{"version":3,"sources":["AX6UIGrid_body.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_util","_AX6UIGrid_data","_AX6UIGrid_page","_AX6UIGrid_inline_editor","_AX6UIGrid_collector","_AX6UIGrid_formatter","_AX6UIGrid_scroller","columnSelect","focusClear","self","this","_column","c","focusedColumn","$","panel","panelName","find","dindex","rowIndex","colIndex","removeAttr","clear","selectedColumn","init","column","isInlineEditing","editKey","inlineEditing","doindex","colspan","xvar","end","inlineEdit","deActive","call","selectedRange","start","trl","range","r","s","rows","length","e","frozenRowIndex","_panels","push","frozenColumnIndex","join","min","max","cell","instanceId","getAttribute","update","Number","_AX6Util2","default","stopEvent","columnSelector","off","on","_jqmin2","document","body","css","updateRowState","_states","_dindex","_doindex","_data","cfg","config","processor","selected","list","i","livePanelKeys","attr","columnKeys","di","pi","proxyList","doi","__original_index__","cellChecked","key","checked","forEach","_state","updateRowStateAll","row","col","bodyRowMap","that","page","disableSelection","item","type","editor","trueValue","value","falseValue","getValue","_AX6UIGrid_data2","setValue","newValue","editorConfig","onClick","rowSelector","selectedDataIndexs","clearSelect","select","undefined","lineNumber","tree-control","toggleCollapse","targetClick","columnKey","__isGrouping","isObject","onDBLClick","colGroup","active","targetDBLClick","param","target","t","contextMenu","ax5","ui","menu","element","popup","filter","popupFilter","originalEvent","touchmoved","resetFrozenColumn","virtualScrollYCountMargin","Math","floor","throttle","opts","noRepaint","virtualScrollX","repaint","callback","virtualScrollAcceleratedDelayTime","__throttledScroll","dividedBodyRowObj","divideTableByFrozenColumnIndex","bodyRowTable","_width","asideBodyRowData","l","dataTable","data","_col","showLineNumber","extend","lineNumberColumnWidth","cols","label","rowSelectorColumnWidth","rowspan","columnAttr","leftBodyRowData","showRowSelector","leftData","rightData","_AX6UIGrid_util2","bodyGroupingTable","width","dividedBodyGroupingObj","asideBodyGroupingData","bodyGroupingData","makeBodyRowMap","footSumTable","footSumData","dividedFootSumObj","getFieldValue","_list","_item","_index","_value","_returnPlainText","_key","tagsToReplace","<",">","leftBodyGroupingData","_editor","_AX6UIGrid_inline_editor2","editMode","__origin_index__","isFunction","disabled","getHtml","formatter","caller","customFormatter","_AX6UIGrid_formatter2","returnValue","test","replace","tag","treeControl","__value","indentNodeHtml","tree","depth","indentWidth","keys","collapse","icons","collapsedArrow","openedArrow","arrowWidth","children","iconWidth","groupIcon","itemIcon","valueProcessor","collapsedGroupIcon","getGroupingValue","_label","__groupingList","__groupingBy","groupBy","collector","customCollector","_AX6UIGrid_collector2","getSumFieldValue","_reset","paintStartRowIndex","paintStartColumnIndex","virtualPaintStartRowIndex","position","top","bodyTrHeight","paintRowCountTopMargin","isNaN","paintEndColumnIndex","nopaintLeftColumnsWidth","nopaintRightColumnsWidth","left","ci","_ex","_sx","bodyScrollLeft","bodyWidth","scrollContentWidth","padding-left","padding-right","isFirstPaint","headerColGroup","bodyRowData","leftFootSumData","bodyAlign","align","virtualPaintRowCount","bodyHeight","paintRowCountMargin","abs","paintRowCount","ceil","concat","splice","getTableByStartEndColumnIndex","grouping","scrollContentHeight","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","dl","cl","cellHeight","colAlign","isScrolled","columnHeight","columnBorderWidth","stripeString","cgl","len","odi","rowTable","tri","trStyleClass","isGroupingRow","index","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","_cellHeight","lineHeight","multiLine","columnPadding","empty","get","innerHTML","isFootSum","tblRowMaps","token","hasMergeTd","tableTrs","trMaps","tdObj","mergeCellsBody","ri","rl","tableTrTds","childNodes","mergeCells","search","text","prevTokenColIndexs","hasFalse","util","ti","_loop2","_loop","remove","virtualScrollY","scrollConfig","addClass","repaintSum","frozenScrollConfig","asidePanelWidth","needToPaintSum","asideColGroup","slice","footSum","leftHeaderColGroup","rightSum","updateCell","updateWith","_AX6UIGrid_page2","statusUpdate","repaintCell","updateWithCell","_colIndex","_newValue","_panelName","_rowIndex","updateColumnKey","height","replaceGroupTr","replaceTr","moveFocus","while_i","nPanelInfo","originalColumn","scrollTo","moveResult","timeoutUnUse","_dy","blur","newTop","focus","isScrollPanel","containerPanelName","_dx","bodyGroupingMap","findPanelByColumnIndex","_AX6UIGrid_scroller2","resize","LR","scrollLeft","header","GRID","isScrollTo","$column","newLeft","outerWidth","_position","_initValue","UP","useReturnToSave","RIGHT","HOME","originalValue","END","$inlineEditorCell","_e","$inlineEditor","_type","action","bindedAx5ui","ax5select","_msg","initValue","__editor","isNothing","number","money","tagName","editorValue","CANCEL","_options","ax5picker","ESC","k","getSum","_collapse","getExcelString","po","repaintRow","val","getProxyList","click","dblClick"],"mappings":"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","file":"AX6UIGrid_body.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"./AX6Util\";\nimport UTIL from \"./AX6UIGrid_util\";\nimport DATA from \"./AX6UIGrid_data\";\nimport PAGE from \"./AX6UIGrid_page\";\n\nimport INLINE_EDITOR from \"./AX6UIGrid_inline_editor\";\nimport COLLECTOR from \"./AX6UIGrid_collector\";\nimport FORMATTER from \"./AX6UIGrid_formatter\";\nimport SCROLLER from \"./AX6UIGrid_scroller\";\n\nconst columnSelect = {\n    focusClear: function () {\n        let self = this, _column;\n        for (let c in self.focusedColumn) {\n            _column = self.focusedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .removeAttr('data-ax6grid-column-focused');\n            }\n        }\n        self.focusedColumn = {};\n    },\n    clear: function () {\n        let self = this, _column;\n        for (let c in self.selectedColumn) {\n            _column = self.selectedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .removeAttr('data-ax6grid-column-selected');\n            }\n        }\n        self.selectedColumn = {};\n    },\n    init: function (column) {\n        let self = this;\n        if (this.isInlineEditing) {\n            for (let editKey in this.inlineEditing) {\n                if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                    return this;\n                }\n            }\n        }\n\n        // focus\n        columnSelect.focusClear.call(self);\n        self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n            panelName: column.panelName,\n            dindex: column.dindex,\n            doindex: column.doindex,\n            rowIndex: column.rowIndex,\n            colIndex: column.colIndex,\n            colspan: column.colspan\n        };\n\n        // select\n        columnSelect.clear.call(self);\n        self.xvar.selectedRange = {\n            start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n            end: null\n        };\n        self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n            if (data) {\n                return false;\n            } else {\n                return {\n                    panelName: column.panelName,\n                    dindex: column.dindex,\n                    doindex: column.doindex,\n                    rowIndex: column.rowIndex,\n                    colIndex: column.colIndex,\n                    colspan: column.colspan\n                }\n            }\n        })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n        this.$.panel[column.panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + column.dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + column.colIndex + '\"]')\n            .attr('data-ax6grid-column-focused', \"true\")\n            .attr('data-ax6grid-column-selected', \"true\");\n\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this, \"RETURN\");\n        }\n    },\n    update: function (column) {\n        const self = this;\n        let dindex, doindex, colIndex, rowIndex, trl;\n\n        self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n        columnSelect.clear.call(self);\n\n        let range = {\n            r: {\n                s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n            },\n            c: {\n                s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n            }\n        };\n\n        dindex = range.r.s;\n        for (; dindex <= range.r.e; dindex++) {\n\n\n            trl = this.bodyRowTable.rows.length;\n            rowIndex = 0;\n            for (; rowIndex < trl; rowIndex++) {\n                colIndex = range.c.s;\n                for (; colIndex <= range.c.e; colIndex++) {\n                    var _panels = [],\n                        panelName = \"\";\n\n                    if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                    if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    panelName = _panels.join(\"-\");\n\n                    self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                        panelName: panelName,\n                        dindex: dindex,\n                        rowIndex: rowIndex,\n                        colIndex: colIndex,\n                        colspan: column.colspan\n                    };\n\n                    _panels = null;\n                    panelName = null;\n                }\n            }\n        }\n        dindex = null;\n        doindex = null;\n        colIndex = null;\n        rowIndex = null;\n\n        for (var c in self.selectedColumn) {\n            var _column = self.selectedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .attr('data-ax6grid-column-selected', 'true');\n            }\n        }\n\n    }\n};\n\nconst columnSelector = {\n    \"on\": function (cell) {\n        let self = this;\n\n        if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n            return;\n        }\n\n        columnSelect.init.call(self, cell);\n\n        this.$[\"container\"][\"body\"]\n            .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax6grid-column-attr=\"default\"]', function (e) {\n                if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n                    columnSelect.update.call(self, {\n                        panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n                        doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                    U.stopEvent(e);\n                }\n            })\n            .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            })\n            .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            });\n\n        jQuery(document.body)\n            .attr('unselectable', 'on')\n            .css('user-select', 'none')\n            .on('selectstart', false);\n    },\n    \"off\": function () {\n\n        this.$[\"container\"][\"body\"]\n            .off(\"mousemove.ax5grid-\" + this.instanceId)\n            .off(\"mouseup.ax5grid-\" + this.instanceId)\n            .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n        jQuery(document.body)\n            .removeAttr('unselectable')\n            .css('user-select', 'auto')\n            .off('selectstart');\n    }\n};\n\nconst updateRowState = function (_states, _dindex, _doindex, _data) {\n    let self = this,\n        cfg = this.config,\n        processor = {\n            \"selected\": function (_dindex, _doindex) {\n                if (this.list[_doindex]) {\n                    let i = this.$.livePanelKeys.length;\n                    while (i--) {\n                        this.$.panel[this.$.livePanelKeys[i]]\n                            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                            .attr(\"data-ax6grid-selected\", this.list[_doindex][cfg.columnKeys.selected]);\n                    }\n                }\n            },\n            \"selectedClear\": function () {\n                let di = this.list.length;\n                let pi;\n\n                if (!this.proxyList) {\n                    while (di--) {\n                        if (this.list[di][cfg.columnKeys.selected]) {\n                            pi = this.$.livePanelKeys.length;\n                            while (pi--) {\n                                this.$.panel[this.$.livePanelKeys[pi]]\n                                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                                    .attr(\"data-ax6grid-selected\", false);\n                            }\n                        }\n                        this.list[di][cfg.columnKeys.selected] = false;\n                    }\n                } else {\n                    while (di--) {\n                        this.list[di][cfg.columnKeys.selected] = false;\n                    }\n                    di = this.proxyList.length;\n                    while (di--) {\n                        if(this.list[doi][cfg.columnKeys.selected]){\n                            pi = this.$.livePanelKeys.length;\n                            while (pi--) {\n                                this.$.panel[this.$.livePanelKeys[pi]]\n                                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                                    .attr(\"data-ax6grid-selected\", false);\n                            }\n                        }\n\n                        this.proxyList[di][cfg.columnKeys.selected] = false;\n                        let doi = this.proxyList[di].__original_index__;\n                    }\n                }\n            },\n            \"cellChecked\": function (_dindex, _doindex, _data) {\n                let key = _data.key,\n                    rowIndex = _data.rowIndex,\n                    colIndex = _data.colIndex;\n\n                let panelName = (function () {\n                    let _panels = [];\n                    if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                    if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    return _panels.join(\"-\");\n                }).call(this);\n\n                this.$.panel[panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                    .find('[data-ax6grid-column-rowIndex=\"' + rowIndex + '\"][data-ax6grid-column-colIndex=\"' + colIndex + '\"]')\n                    .find('[data-ax6grid-editor=\"checkbox\"]')\n                    .attr(\"data-ax6grid-checked\", '' + _data.checked);\n            }\n        };\n\n    if(typeof _doindex === \"undefined\") _doindex = _dindex;\n\n    _states.forEach(function (_state) {\n        if (!processor[_state]) throw 'invaild state name';\n        processor[_state].call(self, _dindex, _doindex, _data);\n    });\n};\n\nconst updateRowStateAll = function (_states, _data) {\n    let self = this,\n        cfg = this.config,\n        processor = {\n            \"selected\": function (_dindex) {\n                repaint.call(this, true);\n            }\n        };\n\n    _states.forEach(function (_state) {\n        if (!processor[_state]) throw 'invaild state name';\n        processor[_state].call(self, _data);\n    });\n};\n\nconst init = function () {\n    let self = this;\n\n    this.$[\"container\"][\"body\"].on(\"click\", '[data-ax6grid-column-attr]', function (e) {\n        let panelName, attr,\n            row, col, dindex, doindex, rowIndex, colIndex, disableSelection,\n            targetClick = {\n                \"default\": function (_column) {\n                    let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                        that = {\n                            self: self,\n                            page: self.page,\n                            list: self.list,\n                            item: self.list[_column.doindex],\n                            dindex: _column.dindex,\n                            doindex: _column.doindex,\n                            rowIndex: _column.rowIndex,\n                            colIndex: _column.colIndex,\n                            column: column,\n                            value: self.list[_column.dindex][column.key]\n                        };\n\n                    if (column.editor && column.editor.type == \"checkbox\") { // todo : INLINE_EDITOR에서 처리 할수 있도록 구문 변경 필요.\n                        let value = DATA.getValue.call(self, _column.dindex, _column.doindex, column.key),\n                            checked, newValue;\n\n                        if (column.editor.config && column.editor.config.trueValue) {\n                            if (checked = !(value == column.editor.config.trueValue)) {\n                                newValue = column.editor.config.trueValue;\n                            } else {\n                                newValue = column.editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        DATA.setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);\n\n                        updateRowState.call(self, [\"cellChecked\"], _column.dindex, _column.doindex, {\n                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                            editorConfig: column.editor.config, checked: checked\n                        });\n                    } else {\n                        if (self.config.body.onClick) {\n                            self.config.body.onClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n                    let item = self.list[_column.doindex];\n                    if (item[self.config.columnKeys.disableSelection]) {\n                        return false;\n                    }\n\n                    if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {\n                        updateRowState.call(self, [\"selectedClear\"]);\n                        DATA.clearSelect.call(self);\n                    }\n\n                    DATA.select.call(self, _column.dindex, _column.doindex, undefined, {\n                        internalCall: true\n                    });\n                    updateRowState.call(self, [\"selected\"], _column.dindex, _column.doindex);\n                },\n                \"lineNumber\": function (_column) {\n\n                },\n                \"tree-control\": function (_column, _el) {\n                    //console.log(_column);\n                    toggleCollapse.call(self, _column.dindex, _column.doindex);\n                }\n            };\n\n        panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n        attr = this.getAttribute(\"data-ax6grid-column-attr\");\n        row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n        col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n        rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n        if (attr in targetClick) {\n            targetClick[attr]({\n                panelName: panelName,\n                attr: attr,\n                row: row,\n                col: col,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            }, this);\n        }\n    });\n    this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax6grid-column-attr]', function (e) {\n        let panelName, attr,\n            row, col, dindex, doindex, rowIndex, colIndex,\n            targetDBLClick = {\n                \"default\": function (_column) {\n                    if (self.isInlineEditing) {\n                        for (let columnKey in self.inlineEditing) {\n                            if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                return this;\n                            }\n                        }\n                    }\n\n                    let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n                    if (column) {\n                        if (!self.list[dindex].__isGrouping) {\n                            value = DATA.getValue.call(self, dindex, doindex, column.key);\n                        }\n                    }\n\n                    let editor = self.colGroup[_column.colIndex].editor;\n                    if (U.isObject(editor)) {\n                        inlineEdit.active.call(self, self.focusedColumn, e, value);\n                    } else {\n                        // 더블클릭 실행\n                        if (self.config.body.onDBLClick) {\n                            let that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.dindex],\n                                dindex: _column.dindex,\n                                doindex: _column.doindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n                            self.config.body.onDBLClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n\n                },\n                \"lineNumber\": function (_column) {\n\n                }\n            };\n\n        panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n        attr = this.getAttribute(\"data-ax6grid-column-attr\");\n        row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n        col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n        rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n        if (attr in targetDBLClick) {\n            targetDBLClick[attr]({\n                panelName: panelName,\n                attr: attr,\n                row: row,\n                col: col,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            });\n        }\n    });\n\n    if (this.config.contextMenu) {\n        this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n            let target, dindex, doindex, rowIndex, colIndex, item, column, param = {};\n\n            target = U.findParentNode(e.target, function (t) {\n                if (t.getAttribute(\"data-ax6grid-column-attr\")) {\n                    return true;\n                }\n            });\n\n            if (target) {\n                // item 찾기\n                rowIndex = Number(target.getAttribute(\"data-ax6grid-column-rowIndex\"));\n                colIndex = Number(target.getAttribute(\"data-ax6grid-column-colIndex\"));\n                dindex = Number(target.getAttribute(\"data-ax6grid-data-index\"));\n                doindex = Number(target.getAttribute(\"data-ax6grid-data-o-index\"));\n                column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n                item = self.list[dindex];\n            }\n\n            if (!self.contextMenu) {\n                self.contextMenu = new ax5.ui.menu();\n            }\n\n            self.contextMenu.setConfig(self.config.contextMenu);\n\n            param = {\n                element: target,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex,\n                item: item,\n                column: column,\n                gridSelf: self\n            };\n\n            self.contextMenu.popup(e, {\n                filter: function () {\n                    return self.config.contextMenu.popupFilter.call(this, this, param);\n                },\n                param: param\n            });\n\n            U.stopEvent(e.originalEvent);\n            target = null;\n            dindex = null;\n            doindex = null;\n            rowIndex = null;\n            colIndex = null;\n            item = null;\n            column = null;\n            param = null;\n        });\n    }\n\n    this.$[\"container\"][\"body\"]\n        .on(\"mousedown\", '[data-ax6grid-column-attr=\"default\"]', function (e) {\n            if (self.xvar.touchmoved) return false;\n            if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n                columnSelector.on.call(self, {\n                    panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n                    dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n                    doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n                    rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n                    colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n                    colspan: Number(this.getAttribute(\"colspan\"))\n                });\n            }\n        })\n        .on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n    resetFrozenColumn.call(this);\n\n    // 그리드 바디에 출력할 여유 카운트\n    this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n    this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n\n    if (this.config.virtualScrollAccelerated) {\n        this.__throttledScroll = U.throttle(function (css, opts) {\n            if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n                repaint.call(this);\n            } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n                repaint.call(this);\n            }\n            if (opts.callback) {\n                opts.callback();\n            }\n        }, this.config.virtualScrollAcceleratedDelayTime);\n    } else {\n        this.__throttledScroll = false;\n    }\n};\n\nconst resetFrozenColumn = function () {\n    let cfg = this.config,\n        dividedBodyRowObj = UTIL.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n    this.asideBodyRowData = (function (dataTable) {\n        let data = {rows: []};\n        for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n            data.rows[i] = {cols: []};\n            if (i === 0) {\n                let col = {\n                    label: \"\",\n                    colspan: 1,\n                    rowspan: dataTable.rows.length,\n                    colIndex: null\n                }, _col = {};\n\n                if (cfg.showLineNumber) {\n                    _col = jQuery.extend({}, col, {\n                        width: cfg.lineNumberColumnWidth,\n                        _width: cfg.lineNumberColumnWidth,\n                        columnAttr: \"lineNumber\",\n                        label: \"&nbsp;\", key: \"__d-index__\"\n                    });\n                    data.rows[i].cols.push(_col);\n                }\n                if (cfg.showRowSelector) {\n                    _col = jQuery.extend({}, col, {\n                        width: cfg.rowSelectorColumnWidth,\n                        _width: cfg.rowSelectorColumnWidth,\n                        columnAttr: \"rowSelector\",\n                        label: \"\", key: \"__d-checkbox__\"\n                    });\n                    data.rows[i].cols.push(_col);\n                }\n            }\n        }\n\n        return data;\n    }).call(this, this.bodyRowTable);\n\n    //console.log(dividedBodyRowObj);\n\n    this.leftBodyRowData = dividedBodyRowObj.leftData;\n    this.bodyRowData = dividedBodyRowObj.rightData;\n\n    if (cfg.body.grouping) {\n        let dividedBodyGroupingObj = UTIL.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n        this.asideBodyGroupingData = (function (dataTable) {\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyGroupingTable);\n        this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n        this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n        this.bodyGroupingMap = UTIL.makeBodyRowMap.call(this, this.bodyGroupingTable);\n    }\n\n    this.leftFootSumData = {};\n    this.footSumData = {};\n    if (this.config.footSum) {\n        let dividedFootSumObj = UTIL.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n        this.leftFootSumData = dividedFootSumObj.leftData;\n        this.footSumData = dividedFootSumObj.rightData;\n    }\n};\n\nconst getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n\n    let _key = _col.key, tagsToReplace = {\n        '<': '&lt;',\n        '>': '&gt;'\n    };\n\n    if (_key === \"__d-index__\") {\n        return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n    }\n    else if (_key === \"__d-checkbox__\") {\n        return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n    }\n    else {\n        if (_col.editor && (function (_editor) {\n                if (_editor.type in INLINE_EDITOR) {\n                    return (INLINE_EDITOR[_editor.type].editMode == \"inline\");\n                }\n                return false;\n            })(_col.editor)) { // editor가 inline타입이라면\n\n            _value = _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n\n            if (U.isFunction(_col.editor.disabled)) {\n                if (_col.editor.disabled.call({\n                        list: _list,\n                        dindex: _index,\n                        item: _list[_index],\n                        key: _key,\n                        value: _value\n                    })) {\n                    return _value;\n                }\n            }\n\n            // print editor\n            return _returnPlainText ? _value : INLINE_EDITOR[_col.editor.type].getHtml(this, _col.editor, _value);\n        }\n\n        const valueProcessor = {\n            \"formatter\": function () {\n                let that = {\n                    key: _key,\n                    value: _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key),\n                    dindex: _index,\n                    item: _item,\n                    list: _list\n                };\n\n                let caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n                return caller ? caller.call(that) : that.value;\n            },\n            \"default\": function () {\n                let returnValue = \"\";\n\n                if (typeof _value !== \"undefined\") {\n                    returnValue = _value;\n                } else {\n                    if (/[\\.\\[\\]]/.test(_key)) {\n                        _value = DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n                    }else{\n                        _value = _item[_key];\n                    }\n\n                    if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                }\n\n                // 키값이 Boolean일때 오류 발생하여 수정.\n                return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                    return tagsToReplace[tag] || tag;\n                });\n            },\n            \"treeControl\": function (__value) {\n                let cfg = this.config,\n                    keys = this.config.tree.columnKeys,\n                    indentNodeHtml = '';\n\n                if (_item[keys.children].length) {\n                    indentNodeHtml += '<a ' +\n                        'data-ax6grid-data-index=\"' + _index + '\" ' +\n                        'data-ax6grid-column-attr=\"tree-control\" ' +\n                        'data-ax6grid-tnode-arrow=\"\" ' +\n                        'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                        '>';\n                    indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n                    indentNodeHtml += '</a>';\n                } else {\n                    indentNodeHtml += '<span ' +\n                        'data-ax6grid-tnode-arrow=\"\" ' +\n                        'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                        '>&nbsp;</span>';\n                }\n\n                indentNodeHtml += '<span ' +\n                    'data-ax6grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n                    'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n                    '>';\n                indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n                indentNodeHtml += '</span>';\n\n                return indentNodeHtml + __value;\n            }\n        };\n\n        let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n        if (this.config.tree.use && _col.treeControl) {\n            returnValue = valueProcessor.treeControl.call(this, returnValue);\n        }\n\n        return returnValue;\n    }\n\n};\n\nconst getGroupingValue = function (_item, _index, _col) {\n    let value, that, caller, _key = _col.key, _label = _col.label;\n\n    if (typeof _key === \"undefined\") {\n        that = {\n            key: _key,\n            list: _item.__groupingList,\n            groupBy: _item.__groupingBy\n        };\n        if (U.isFunction(_label)) {\n            value = _label.call(that);\n        } else {\n            value = _label;\n        }\n        _item[_col.colIndex] = value;\n        return value;\n    }\n    else if (_key === \"__d-index__\") {\n        return '';\n    }\n    else if (_key === \"__d-checkbox__\") {\n        return '';\n    }\n    else {\n        if (_col.collector) {\n            that = {\n                key: _key,\n                list: _item.__groupingList\n            };\n            _item[_col.colIndex] = value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n            if (_col.formatter) {\n                that.value = value;\n                caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n                return caller ? caller.call(that) : value;\n            } else {\n                return value;\n            }\n        } else {\n            return \"&nbsp;\";\n        }\n    }\n};\n\nconst getSumFieldValue = function (_list, _col) {\n    let _key = _col.key, _label = _col.label;\n    //, _collector, _formatter\n    if (typeof _key === \"undefined\") {\n        return _label;\n    }\n    else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n        return '&nbsp;';\n    }\n    else {\n        if (_col.collector) {\n            let that = {\n                    key: _key,\n                    list: _list\n                };\n            let value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n            that.value = value;\n\n            if (_col.formatter) {\n                return (U.isFunction(_col.formatter) ? _col.formatter : this.config.formatter[_col.formatter] || FORMATTER[_col.formatter]).call(that);\n            } else {\n                return value;\n            }\n        } else {\n            return \"&nbsp;\";\n        }\n    }\n};\n\nconst repaint = function (_reset) {\n    // debugger;\n    let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n    /// repaint reset 타입이면 고정컬럼을 재조정\n    if (_reset) {\n        resetFrozenColumn.call(this);\n        // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n        this.xvar.paintStartRowIndex = undefined;\n        this.xvar.paintStartColumnIndex = undefined;\n    }\n\n    /// 출력시작 인덱스\n    let paintStartRowIndex, virtualPaintStartRowIndex;\n\n    if (this.config.virtualScrollY) {\n        virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n            paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n        }\n    }\n    else {\n        paintStartRowIndex = this.xvar.frozenRowIndex;\n    }\n\n    if (isNaN(paintStartRowIndex)) return this;\n\n    let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n    let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n    if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n        for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n            // bodyScrollLeft\n            this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n            this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n            if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n                paintStartColumnIndex = ci;\n            }\n            if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n                paintEndColumnIndex = ci;\n\n                if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n                if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n            }\n        }\n\n        if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n        if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n        this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    }\n\n    let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n        headerColGroup = this.headerColGroup,\n        asideBodyRowData = this.asideBodyRowData,\n        leftBodyRowData = this.leftBodyRowData,\n        bodyRowData = this.bodyRowData,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount, virtualPaintRowCount;\n\n    if (!this.config.virtualScrollY) {\n        virtualPaintRowCount = paintRowCount = list.length;\n    } else {\n        virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n        paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n    }\n\n    // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n    if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n        paintStartRowIndex = this.xvar.paintStartRowIndex;\n    }\n\n    if (\n        this.xvar.dataRowCount === list.length\n        && this.xvar.paintStartRowIndex === paintStartRowIndex\n        && this.xvar.paintRowCount === paintRowCount\n        && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n        && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n    ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n    // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n    if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n        headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n        bodyRowData = UTIL.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n        if (cfg.body.grouping) {\n            bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n        }\n        if (cfg.footSum) {\n            footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n        }\n        if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n            this.needToPaintSum = true;\n        }\n    }\n\n    /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n    this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n    /// 사용된 패널들의 키 모음\n    this.$.livePanelKeys = [];\n\n    // 그리드 바디 영역 페인트 함수\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _groupRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey];\n\n        if (!isFirstPaint && !_scrollConfig) {\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return false;\n        }\n\n        let SS = [],\n            cgi, cgl, di, dl, tri, trl, ci, cl, col,\n            cellHeight,\n            colAlign,\n            isScrolled = (function () {\n                // 스크롤값이 변경되거나 처음 호출되었습니까?\n                if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                    _scrollConfig = {\n                        paintStartRowIndex: 0,\n                        paintRowCount: _list.length\n                    };\n                    return false;\n                } else {\n                    return true;\n                }\n            })(),\n            stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight) + 'px';\n\n        if (isScrolled) {\n            SS.push('<div style=\"background:repeating-linear-gradient(to top, ' + stripeString + ');' +\n                'font-size:0;' +\n                'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n        }\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        di = _scrollConfig.paintStartRowIndex;\n\n        for (dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n\n            if (_list[di]) {\n                let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                    SS.push('<tr class=\"tr-' + (di % 4) + '', (cfg.body.trStyleClass) ? (U.isFunction(cfg.body.trStyleClass)) ? ' ' + cfg.body.trStyleClass.call({\n                            item: _list[di],\n                            index: di\n                        }, _list[di], di) : ' ' + cfg.body.trStyleClass : '','\"',\n\n                        (isGroupingRow) ? ' data-ax6grid-grouping-tr=\"true\"' : '',\n                        ' data-ax6grid-tr-data-index=\"' + di + '\"',\n                        ' data-ax6grid-tr-data-o-index=\"' + odi + '\"',\n                        ' data-ax6grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                        ' data-ax6grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                        '>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                        })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                    SS.push('</tr>');\n                }\n            }\n        }\n        SS.push('</table>');\n\n        if (isScrolled && _list.length) {\n            SS.push('<div style=\"background:repeating-linear-gradient(to bottom, ' + stripeString + ');' +\n                'font-size:0;' +\n                'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n        }\n\n\n        _elTarget.empty();\n        SS = SS.join('');\n\n        _elTarget.get(0).innerHTML = SS;\n\n        this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n        return true;\n    };\n\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey];\n\n        if (!isFirstPaint && !_scrollConfig) {\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return false;\n        }\n\n        let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty();\n        SS = SS.join('');\n\n        _elTarget.get(0).innerHTML = SS;\n\n        this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n        return true;\n    };\n\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let tblRowMaps = [];\n        let _elTarget = this.$.panel[_elTargetKey];\n        let token = {}, hasMergeTd;\n\n        // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n        let tableTrs = _elTarget.find(\"tr\");\n        for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n            let tableTrTds, trMaps;\n            tableTrTds = tableTrs[ri].childNodes;\n            trMaps = [];\n\n            for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n                let tdObj = {\n                    \"$\": jQuery(tableTrTds[ci])\n                };\n\n                if (tdObj[\"$\"].attr(\"data-ax6grid-column-col\") != \"null\") {\n                    tdObj.dindex = tdObj[\"$\"].attr(\"data-ax6grid-data-index\");\n                    tdObj.tri = tdObj[\"$\"].attr(\"data-ax6grid-column-row\");\n                    tdObj.ci = tdObj[\"$\"].attr(\"data-ax6grid-column-col\");\n                    tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-rowIndex\");\n                    tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-colIndex\");\n                    tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                    tdObj.text = tdObj[\"$\"].text();\n                    trMaps.push(tdObj);\n                }\n\n                tdObj = null;\n            }\n            tblRowMaps.push(trMaps);\n        }\n\n        // 두줄이상 일 때 의미가 있으니.\n        if (tblRowMaps.length > 1) {\n            hasMergeTd = false;\n            for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                let prevTokenColIndexs = [];\n\n                for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                    // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n\n                    if (!_colGroup[ci].editor && (() => {\n                            if (U.isArray(cfg.body.mergeCells)) {\n                                return ax5.util.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n                            } else {\n                                return true;\n                            }\n                        })()) {\n\n                        // 앞줄과 값이 같다면.\n                        if (token[ci] && (() => {\n                                if (prevTokenColIndexs.length > 0) {\n                                    let hasFalse = true;\n                                    prevTokenColIndexs.forEach(function (ti) {\n                                        if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                                            hasFalse = false;\n                                        }\n                                    });\n                                    return hasFalse;\n                                } else {\n                                    return true;\n                                }\n                            })() && token[ci].text == tblRowMaps[ri][ci].text) {\n                            tblRowMaps[ri][ci].rowspan = 0;\n                            tblRowMaps[token[ci].ri][ci].rowspan++;\n                            hasMergeTd = true;\n                        } else {\n                            token[ci] = {\n                                ri: ri,\n                                ci: ci,\n                                text: tblRowMaps[ri][ci].text\n                            };\n                        }\n\n                        prevTokenColIndexs.push(ci);\n                    }\n                }\n            }\n\n            // rowspan을 다 구했으면 적용합니다.\n            if (hasMergeTd) {\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                        if (tblRowMaps[ri][ci].rowspan == 0) {\n                            tblRowMaps[ri][ci][\"$\"].remove();\n                        } else if (tblRowMaps[ri][ci].rowspan > 1) {\n                            tblRowMaps[ri][ci][\"$\"]\n                                .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                                .addClass(\"merged\");\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    let scrollConfig = {\n        paintStartRowIndex: paintStartRowIndex,\n        paintRowCount: paintRowCount,\n        paintStartColumnIndex: paintStartColumnIndex,\n        paintEndColumnIndex: paintEndColumnIndex,\n        nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n        nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n        bodyTrHeight: this.xvar.bodyTrHeight,\n        virtualScrollX: this.config.virtualScrollX,\n        virtualScrollY: this.config.virtualScrollY,\n    };\n    let frozenScrollConfig = jQuery.extend({}, scrollConfig, {\n        paintStartRowIndex: 0,\n        paintRowCount: this.xvar.frozenRowIndex\n    });\n\n    // aside\n    if (cfg.asidePanelWidth > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n\n        repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum) {\n            // 바닥 요약 (footSum에 대한 aside 사용안함)\n            repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n        }\n    }\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n\n        repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n        }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > 0) {\n        // 상단 행고정\n        repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n    repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n    // 바닥 요약\n    if (cfg.footSum && this.needToPaintSum) {\n        repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n    // right\n    if (cfg.rightSum) {\n        // todo : right 표현 정리\n    }\n\n    /// mergeCells\n    if (cfg.body.mergeCells && this.list.length) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n            mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n    }\n\n    this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n    this.xvar.paintStartRowIndex = paintStartRowIndex;\n    this.xvar.paintRowCount = paintRowCount;\n    this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n    this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n    this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n    this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n    this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n    this.xvar.dataRowCount = list.length;\n    this.needToPaintSum = false;\n\n    PAGE.statusUpdate.call(this);\n};\n\nconst repaintCell = function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {\n    let self = this,\n        cfg = this.config,\n        list = this.list;\n\n    let updateCell = this.$[\"panel\"][_panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + _rowIndex + '\"][data-ax6grid-column-colindex=\"' + _colIndex + '\"]')\n            .find('[data-ax6grid-cellholder]'),\n        colGroup = this.colGroup,\n        col = colGroup[_colIndex];\n\n    updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n    if (col.editor && col.editor.updateWith) {\n        col.editor.updateWith.forEach(function (updateColumnKey) {\n            colGroup.forEach(function (col) {\n                if (col.key == updateColumnKey) {\n                    let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                        panelName = UTIL.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                        updateWithCell = self.$[\"panel\"][panelName]\n                            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                            .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                            .find('[data-ax6grid-cellholder]');\n\n                    updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                }\n            });\n        });\n    }\n\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        headerColGroup = this.headerColGroup,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n        headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n        if (cfg.body.grouping) {\n            bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n        }\n        if (cfg.footSum) {\n            footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n        }\n    }\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        let tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty().get(0).innerHTML = SS.join('');\n        return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            di, dl, tri, trl, ci, cl,\n            col, cellHeight, colAlign;\n\n        for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n            if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                let rowTable = _groupRow;\n                SS = [];\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                        })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                }\n                _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n            }\n        }\n    };\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n            replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                paintStartRowIndex: 0,\n                paintRowCount: this.xvar.frozenRowIndex,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            });\n        }\n\n        replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n        }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n};\n\nconst repaintRow = function (_dindex) {\n    let self = this,\n        cfg = this.config,\n        list = this.list;\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        asideBodyRowData = this.asideBodyRowData,\n        leftBodyRowData = this.leftBodyRowData,\n        bodyRowData = this.bodyRowData,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty().get(0).innerHTML = SS.join('');\n        return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n            _scrollConfig = {\n                paintStartRowIndex: 0,\n                paintRowCount: _list.length\n            };\n        }\n\n        for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n            if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                let rowTable = _groupRow;\n                SS = [];\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                        })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                }\n                _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n            }\n        }\n    };\n    let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow,\n            odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n            for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                col = rowTable.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-data-index=\"' + di + '\" ',\n                    'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        let attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        let tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    item: _list[di],\n                                    index: di\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-data-index=\"' + di + '\" ',\n                'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n        }\n\n        _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n    };\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n        }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n    } else {\n        replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n    }\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            else {\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        else {\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n        }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n    }\n};\n\nconst scrollTo = function (css, opts) {\n    let self = this;\n    if (typeof opts === \"undefined\") opts = {timeoutUnUse: false};\n    if (this.isInlineEditing) {\n        for (var key in this.inlineEditing) {\n            //if(this.inlineEditing[key].editor.type === \"select\") {}\n            // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n            inlineEdit.deActive.call(this, \"ESC\", key);\n        }\n    }\n\n    if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n        this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n        this.$.panel[\"left-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n        this.$.panel[\"top-body-scroll\"].css({left: css.left});\n    }\n\n    this.$.panel[\"body-scroll\"].css(css);\n\n    if (this.config.footSum && \"left\" in css) {\n        this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n    }\n\n    // 바디 리페인팅 this.__throttledScroll 은 body init 에서 초기화\n    if (this.__throttledScroll) {\n        this.__throttledScroll(css, opts);\n    } else {\n        if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n            repaint.call(this);\n        } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n            repaint.call(this);\n        }\n        if (opts.callback) {\n            opts.callback();\n        }\n    }\n};\n\nconst blur = function () {\n    columnSelect.focusClear.call(this);\n    columnSelect.clear.call(this);\n    if (this.isInlineEditing) {\n        inlineEdit.deActive.call(this);\n    }\n};\n\nconst moveFocus = function (_position) {\n    let focus = {\n        \"UD\": function (_dy) {\n            let moveResult = true,\n                focusedColumn, originalColumn, while_i,\n                nPanelInfo;\n\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n\n            if (!focusedColumn) return false;\n\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n            if (_dy > 0) {\n                // 아래로\n                if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                    focusedColumn.dindex = focusedColumn.dindex + _dy;\n                    focusedColumn.doindex = focusedColumn.doindex + _dy;\n                    focusedColumn.rowIndex = 0;\n                    if (focusedColumn.dindex > this.list.length - 1) {\n                        focusedColumn.dindex = focusedColumn.doindex = this.list.length - 1;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                }\n            }\n            else {\n                // 위로\n                if (focusedColumn.rowIndex + _dy < 0) {\n                    focusedColumn.dindex = focusedColumn.dindex + _dy;\n                    focusedColumn.doindex = focusedColumn.doindex + _dy;\n                    focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                    if (focusedColumn.dindex < 0) {\n                        focusedColumn.dindex = focusedColumn.doindex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                }\n            }\n\n            while_i = 0;\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                    focusedColumn.colIndex--;\n                } else {\n                    focusedColumn.rowIndex--;\n                }\n\n                if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                    // find fail\n                    moveResult = false;\n                    break;\n                }\n                while_i++;\n            }\n\n            nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n            // if mergeCells\n            if (this.config.body.mergeCells && this.list.length) {\n                while (!this.$.panel[nPanelInfo.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                    if (_dy > 0) {\n                        focusedColumn.dindex++;\n                    } else {\n                        focusedColumn.dindex--;\n                    }\n\n                    if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                        break;\n                    }\n                }\n                nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            }\n\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n\n            if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n                    let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;\n                    if (newTop < 0) newTop = 0;\n                    scrollTo.call(this, {top: -newTop, timeoutUnUse: false});\n                    SCROLLER.resize.call(this);\n                }\n                else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                    scrollTo.call(this, {top: (this.xvar.virtualPaintRowCount - 2 - focusedColumn.dindex) * this.xvar.bodyTrHeight, timeoutUnUse: false});\n                    SCROLLER.resize.call(this);\n                }\n            }\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n            this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            return moveResult;\n        },\n        \"LR\": function (_dx) {\n            let moveResult = true,\n                focusedColumn, originalColumn,\n                while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n            for (var c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (!focusedColumn) return false;\n\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n            if (_dx < 0) {\n                focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                if (focusedColumn.colIndex < 0) {\n                    focusedColumn.colIndex = 0;\n                    moveResult = false;\n                }\n            }\n            else {\n                focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                    focusedColumn.colIndex = this.colGroup.length - 1;\n                    moveResult = false;\n                }\n            }\n\n            if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                focusedColumn.rowIndex = 0;\n            }\n\n            if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n                if (_dx < 0) {\n                    while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex--;\n                        if (focusedColumn.colIndex <= 0) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex++;\n                        if (focusedColumn.colIndex >= this.colGroup.length) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                if (_dx < 0) {\n                    while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex--;\n                        if (focusedColumn.colIndex <= 0) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex++;\n                        if (focusedColumn.colIndex >= this.colGroup.length) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n            // if mergeCells\n            if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                while (!this.$.panel[nPanelInfo.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                    focusedColumn.dindex--;\n\n                    if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                        break;\n                    }\n                }\n                nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            }\n\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리\n            let isScrollTo = (function () {\n                if (!this.config.virtualScrollX) return false;\n                let scrollLeft = 0;\n                if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n                    if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n                        scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n                        scrollTo.call(this, {left: scrollLeft});\n                        GRID.header.scrollTo.call(this, {left: scrollLeft});\n                        SCROLLER.resize.call(this);\n                        return true;\n                    }\n                    else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n                        if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                            scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                            scrollTo.call(this, {left: -scrollLeft});\n                            GRID.header.scrollTo.call(this, {left: -scrollLeft});\n                            SCROLLER.resize.call(this);\n                        }\n                        return true;\n                    }\n                }\n                scrollLeft = null;\n                return false;\n            }).call(this);\n\n            containerPanelName = nPanelInfo.containerPanelName;\n            isScrollPanel = nPanelInfo.isScrollPanel;\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n            var $column = this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n                // todo : 컬럼이동할 때에도 scrollTo 체크\n                var newLeft = (function () {\n                    if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                        return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                    } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                        return $column.position().left;\n                    } else {\n                        return;\n                    }\n                }).call(this);\n\n                if (typeof newLeft !== \"undefined\") {\n                    GRID.header.scrollTo.call(this, {left: -newLeft});\n                    scrollTo.call(this, {left: -newLeft});\n                    SCROLLER.resize.call(this);\n                }\n            }\n\n            return moveResult;\n        },\n        \"INDEX\": function (_dindex) {\n            let moveResult = true,\n                focusedColumn, originalColumn,\n                while_i;\n\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (!focusedColumn) {\n                focusedColumn = {\n                    rowIndex: 0,\n                    colIndex: 0\n                }\n            }\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n\n            if (_dindex == \"end\") {\n                _dindex = this.list.length - 1;\n            }\n\n            focusedColumn.dindex = _dindex;\n            focusedColumn.rowIndex = 0;\n\n            while_i = 0;\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                    focusedColumn.colIndex--;\n                } else {\n                    focusedColumn.rowIndex--;\n                }\n\n                if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                    // find fail\n                    break;\n                }\n                while_i++;\n            }\n\n            let nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리.\n            (function () {\n                if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                    if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n                        scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                        SCROLLER.resize.call(this);\n                    }\n                    else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                        scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n                        SCROLLER.resize.call(this);\n                    }\n                }\n            }).call(this);\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n            this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            return moveResult;\n        }\n    };\n\n    let processor = {\n        \"UP\": function () {\n            return focus[\"UD\"].call(this, -1);\n        },\n        \"DOWN\": function () {\n            return focus[\"UD\"].call(this, 1);\n        },\n        \"LEFT\": function () {\n            return focus[\"LR\"].call(this, -1);\n        },\n        \"RIGHT\": function () {\n            return focus[\"LR\"].call(this, 1);\n        },\n        \"HOME\": function () {\n            return focus[\"INDEX\"].call(this, 0);\n        },\n        \"END\": function () {\n            return focus[\"INDEX\"].call(this, \"end\");\n        },\n        \"position\": function (_position) {\n            return focus[\"INDEX\"].call(this, _position);\n        }\n    };\n\n    if (_position in processor) {\n        return processor[_position].call(this);\n    } else {\n        return processor[\"position\"].call(this, _position);\n    }\n};\n\nconst inlineEdit = {\n    active(_focusedColumn, _e, _initValue) {\n        let self = this,\n            dindex, doindex, colIndex, rowIndex, panelName, colspan,\n            col, editor;\n\n        for (var key in _focusedColumn) {\n            panelName = _focusedColumn[key].panelName;\n            dindex = _focusedColumn[key].dindex;\n            doindex = _focusedColumn[key].doindex;\n            colIndex = _focusedColumn[key].colIndex;\n            rowIndex = _focusedColumn[key].rowIndex;\n            colspan = _focusedColumn[key].colspan;\n\n            // 인라인 에디팅을 멈춰야 하는 경우 조건\n            col = this.colGroup[colIndex];\n            if (!(editor = col.editor)) return this;\n\n            // editor disabled 체크\n            if (U.isFunction(editor.disabled)) {\n                if (editor.disabled.call({\n                        list: this.list,\n                        dindex: dindex,\n                        item: this.list[dindex],\n                        key: col.key,\n                        value: _initValue\n                    })) {\n                    return this;\n                }\n            }\n\n            // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n            if (!(function (_editor, _type) {\n                    if (_editor.type in INLINE_EDITOR) {\n                        return (INLINE_EDITOR[_editor.type].editMode == \"popup\");\n                    }\n                })(editor)) {\n                // 체크 박스 타입이면 값 변경 시도\n                if (editor.type == \"checkbox\") {\n                    let checked, newValue;\n                    if (editor.config && editor.config.trueValue) {\n                        if (checked = !(_initValue == editor.config.trueValue)) {\n                            newValue = editor.config.trueValue;\n                        } else {\n                            newValue = editor.config.falseValue;\n                        }\n                    } else {\n                        newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                    }\n\n                    DATA.setValue.call(self, dindex, doindex, col.key, newValue);\n                    updateRowState.call(self, [\"cellChecked\"], dindex, doindex, {\n                        key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                        editorConfig: col.editor.config, checked: checked\n                    });\n                }\n                return this;\n            }\n\n            if (this.list[dindex].__isGrouping) {\n                return false;\n            }\n            if (key in this.inlineEditing) {\n                return false;\n            }\n\n            this.inlineEditing[key] = {\n                editor: editor,\n                panelName: panelName,\n                columnKey: key,\n                column: _focusedColumn[key],\n                useReturnToSave: INLINE_EDITOR[editor.type].useReturnToSave\n            };\n            this.isInlineEditing = true;\n        }\n        if (this.isInlineEditing) {\n\n            let originalValue = DATA.getValue.call(self, dindex, doindex, col.key),\n                initValue = (function (__value, __editor) {\n                    if (U.isNothing(__value)) {\n                        __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                    }\n\n                    if (__editor.type == \"money\") {\n                        return U.number(__value, {\"money\": true});\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, _initValue, editor);\n\n            this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                .find('[data-ax6grid-cellholder]');\n\n            this.inlineEditing[key].$inlineEditor = INLINE_EDITOR[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n            return true;\n        }\n    },\n    deActive(_msg, _key, _value) {\n        // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n        if (!this.inlineEditing[_key]) return this;\n\n        let panelName = this.inlineEditing[_key].panelName,\n            dindex = this.inlineEditing[_key].column.dindex,\n            doindex = this.inlineEditing[_key].column.doindex,\n            rowIndex = this.inlineEditing[_key].column.rowIndex,\n            colIndex = this.inlineEditing[_key].column.colIndex,\n            column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n            editorValue = (function ($inlineEditor) {\n                if (typeof _value === \"undefined\") {\n                    if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                        return $inlineEditor.val();\n                    } else {\n                        _msg = \"CANCEL\";\n                        return false;\n                    }\n                } else {\n                    return _value;\n                }\n            })(this.inlineEditing[_key].$inlineEditor),\n            newValue = (function (__value, __editor) {\n                if (__editor.type == \"money\") {\n                    return U.number(__value);\n                }\n                else {\n                    return __value;\n                }\n            }).call(this, editorValue, column.editor);\n\n        let action = {\n            \"CANCEL\"(_dindex, _column, _newValue) {\n                action[\"__clear\"].call(this);\n            },\n            \"RETURN\"(_dindex, _doindex, _column, _newValue) {\n                if (DATA.setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {\n                    action[\"__clear\"].call(this);\n                    repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);\n                } else {\n                    action[\"__clear\"].call(this);\n                }\n            },\n            \"__clear\"() {\n                this.isInlineEditing = false;\n                let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                if (bindedAx5ui == \"ax5picker\") {\n                    this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                } else if (bindedAx5ui == \"ax5select\") {\n                    this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                }\n\n                this.inlineEditing[_key].$inlineEditor.remove();\n                this.inlineEditing[_key].$inlineEditor = null;\n                this.inlineEditing[_key].$inlineEditorCell = null;\n                this.inlineEditing[_key] = undefined;\n                delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n            }\n        };\n\n        if (_msg in action) {\n            action[_msg || \"RETURN\"].call(this, dindex, doindex, column, newValue);\n        } else {\n            action[\"__clear\"].call(this);\n        }\n    },\n    keydown(key, columnKey, _options) {\n        let processor = {\n            \"ESC\"() {\n                for (var columnKey in this.inlineEditing) {\n                    inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                }\n            },\n            \"RETURN\"() {\n                if (this.isInlineEditing) {\n                    if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                        inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                    }else{\n                        return false;\n                    }\n                } else {\n\n                    for (var k in this.focusedColumn) {\n                        let _column = this.focusedColumn[k],\n                            column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                            dindex = _column.dindex,\n                            doindex = _column.doindex,\n                            value = \"\",\n                            col = this.colGroup[_column.colIndex];\n\n                        if (column) {\n                            if (!this.list[dindex].__isGrouping) {\n                                value = DATA.getValue.call(this, dindex, doindex, column.key);\n                            }\n                        }\n\n                        if (col.editor && INLINE_EDITOR[col.editor.type].editMode === \"inline\") {\n                            if (_options && _options.moveFocus) {\n\n                            }\n                            else {\n                                if (column.editor && column.editor.type == \"checkbox\") {\n                                    value = DATA.getValue.call(this, dindex, doindex, column.key);\n\n                                    let checked, newValue;\n                                    if (column.editor.config && column.editor.config.trueValue) {\n                                        // console.log(value, column.editor.config.trueValue);\n\n                                        if (value != column.editor.config.trueValue) {\n                                            newValue = column.editor.config.trueValue;\n                                            checked = true;\n                                        } else {\n                                            newValue = column.editor.config.falseValue;\n                                            checked = false;\n                                        }\n                                    } else {\n                                        newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                    }\n\n                                    DATA.setValue.call(this, dindex, doindex, column.key, newValue);\n                                    updateRowState.call(this, [\"cellChecked\"], dindex, doindex, {\n                                        key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                        editorConfig: column.editor.config, checked: checked\n                                    });\n                                }\n                            }\n                        } else {\n                            inlineEdit.active.call(this, this.focusedColumn, null, value);\n                        }\n                    }\n                }\n                return true;\n            }\n        };\n\n        if (key in processor) {\n            processor[key].call(this, key, columnKey, _options);\n        }\n    }\n};\n\nconst getExcelString = function () {\n    let cfg = this.config,\n        list = this.list,\n        bodyRowData = this.bodyRowTable,\n        footSumData = this.footSumTable,\n        bodyGroupingData = this.bodyGroupingTable;\n\n    // body-scroll 의 포지션에 의존적이므로..\n    let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n        let SS = [],\n            di, dl,\n            tri, trl,\n            ci, cl,\n            col, val;\n\n        //SS.push('<table border=\"1\">');\n        for (di = 0, dl = _list.length; di < dl; di++) {\n            let isGroupingRow = false, rowTable;\n\n            if (_groupRow && \"__isGrouping\" in _list[di]) {\n                rowTable = _groupRow;\n                isGroupingRow = true;\n            } else {\n                rowTable = _bodyRow;\n            }\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, val, \"text\"), '&nbsp;</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n        }\n        //SS.push('</table>');\n        return SS.join('');\n    };\n    let getSum = function (_colGroup, _bodyRow, _list) {\n        let SS = [],\n            tri, trl,\n            ci, cl,\n            col;\n\n        //SS.push('<table border=\"1\">');\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('\\n<tr>');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                SS.push('<td ',\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    '>', getSumFieldValue.call(this, _list, col), '</td>');\n            }\n            SS.push('\\n</tr>');\n        }\n        //SS.push('</table>');\n\n        return SS.join('');\n    };\n\n    let po = [];\n    po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n    if (cfg.footSum) {\n        // 바닥 요약\n        po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n    }\n\n    // right\n    if (cfg.rightSum) {\n        // todo : right 표현 정리\n    }\n\n    return po.join('');\n};\n\nconst toggleCollapse = function (_dindex, _doindex, _collapse) {\n    if (DATA.toggleCollapse.call(this, _dindex, _doindex, _collapse)) {\n        this.proxyList = DATA.getProxyList.call(this, this.list);\n        repaint.call(this);\n    }\n};\n\nconst click = function (_dindex, _doindex) {\n    let that = {\n        self: this,\n        page: this.page,\n        list: this.list,\n        item: this.list[_dindex],\n        dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n    if (this.config.body.onClick) {\n        this.config.body.onClick.call(that);\n    }\n\n    that = null;\n    // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n};\n\nconst dblClick = function (_dindex, _doindex) {\n    let that = {\n        self: this,\n        page: this.page,\n        list: this.list,\n        item: this.list[_dindex],\n        dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onDBLClick) {\n        this.config.body.onDBLClick.call(that);\n    }\n\n    that = null;\n};\n\nexport default {\n    init: init,\n    repaint: repaint,\n    repaintCell: repaintCell,\n    repaintRow: repaintRow,\n    updateRowState: updateRowState,\n    updateRowStateAll: updateRowStateAll,\n    scrollTo: scrollTo,\n    blur: blur,\n    moveFocus: moveFocus,\n    inlineEdit: inlineEdit,\n    getExcelString: getExcelString,\n    toggleCollapse: toggleCollapse,\n    click: click,\n    dblClick: dblClick\n};"]}