{"version":3,"sources":["AX6UIGrid_body.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_util","_AX6UIGrid_data","_AX6UIGrid_page","_AX6UIGrid_header","_AX6UIGrid_inline_editor","_AX6UIGrid_collector","_AX6UIGrid_formatter","_AX6UIGrid_scroller","columnSelect","focusClear","self","this","_column","c","focusedColumn","$","panel","panelName","find","dindex","rowIndex","colIndex","removeAttr","clear","selectedColumn","init","column","isInlineEditing","editKey","inlineEditing","call","doindex","colspan","start","update","trl","end","r","s","Math","min","xvar","selectedRange","e","max","range","inlineEdit","deActive","_panels","frozenRowIndex","push","frozenColumnIndex","join","attr","cell","on","instanceId","getAttribute","Number","stopEvent","columnSelector","off","_jqmin2","default","document","css","_dindex","_doindex","_data","processor","selected","list","i","livePanelKeys","length","cfg","columnKeys","selectedClear","updateRowState","pi","proxyList","di","doi","__original_index__","cellChecked","key","checked","_states","forEach","_state","updateRowStateAll","config","repaint","row","col","bodyRowMap","page","item","disableSelection","value","editor","type","_AX6UIGrid_data2","getValue","newValue","trueValue","falseValue","body","onClick","rowSelector","setValue","editorConfig","clearSelect","select","undefined","internalCall","lineNumber","tree-control","_el","targetClick","columnKey","__isGrouping","colGroup","targetDBLClick","active","that","onDBLClick","contextMenu","param","target","t","ax5","ui","menu","setConfig","element","popupFilter","_AX6Util2","originalEvent","gridSelf","touchmoved","filter","resetFrozenColumn","paintRowCountMargin","virtualScrollYCountMargin","floor","opts","noRepaint","virtualScrollX","callback","virtualScrollAcceleratedDelayTime","__throttledScroll","dividedBodyRowObj","paintRowCountTopMargin","asideBodyRowData","dataTable","data","rows","l","rowspan","_col","showLineNumber","extend","width","lineNumberColumnWidth","_width","cols","rowSelectorColumnWidth","label","leftBodyRowData","leftData","grouping","showRowSelector","_AX6UIGrid_util2","divideTableByFrozenColumnIndex","bodyGroupingTable","columnAttr","dividedBodyGroupingObj","footSumData","footSum","footSumTable","_index","_value","_returnPlainText","_key","tagsToReplace","<",">","leftBodyGroupingData","bodyGroupingData","rightData","_editor","dividedFootSumObj","_AX6UIGrid_inline_editor2","getFieldValue","_list","_item","__origin_index__","disabled","editMode","getHtml","formatter","isFunction","customFormatter","_AX6UIGrid_formatter2","returnValue","test","replace","tag","treeControl","__value","tree","indentNodeHtml","arrowWidth","keys","depth","indentWidth","collapse","icons","collapsedArrow","openedArrow","children","collapsedGroupIcon","groupIcon","itemIcon","valueProcessor","use","getGroupingValue","__groupingList","groupBy","__groupingBy","_label","caller","collector","customCollector","_AX6UIGrid_collector2","getSumFieldValue","_reset","paintStartRowIndex","paintStartColumnIndex","virtualPaintStartRowIndex","virtualScrollY","position","top","bodyTrHeight","isNaN","nopaintRightColumnsWidth","left","ci","_sx","_ex","bodyScrollLeft","paintEndColumnIndex","bodyWidth","nopaintLeftColumnsWidth","scrollContentWidth","padding-left","padding-right","headerColGroup","bodyRowData","leftFootSumData","asideBodyGroupingData","bodyAlign","align","paintRowCount","virtualPaintRowCount","bodyHeight","isFirstPaint","abs","concat","splice","getTableByStartEndColumnIndex","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","dl","tri","colAlign","isScrolled","columnHeight","columnBorderWidth","cellHeight","stripeString","cgi","len","cgl","isGroupingRow","rowTable","odi","trStyleClass","index","cl","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","_cellHeight","lineHeight","columnPadding","multiLine","get","innerHTML","empty","repaintSum","isFootSum","mergeCellsBody","tblRowMaps","token","hasMergeTd","tableTrs","tableTrTds","trMaps","tdObj","ri","rl","childNodes","prevTokenColIndexs","isArray","search","text","hasFalse","mergeCells","util","ti","_loop2","_loop","frozenScrollConfig","scrollConfig","asidePanelWidth","asideColGroup","slice","leftHeaderColGroup","needToPaintSum","rightSum","updateCell","_panelName","updateWith","repaintCell","_rowIndex","_colIndex","_newValue","updateWithCell","html","updateColumnKey","findPanelByColumnIndex","height","ceil","replaceGroupTr","replaceTr","timeoutUnUse","focus","moveResult","while_i","originalColumn","bodyRowTable","nPanelInfo","_dy","blur","moveFocus","_position","UD","newTop","scrollTo","isScrollPanel","containerPanelName","_dx","bodyGroupingMap","_AX6UIGrid_scroller2","resize","LR","isScrollTo","scrollLeft","$column","newLeft","_AX6UIGrid_header2","outerWidth","INDEX","_initValue","UP","DOWN","useReturnToSave","HOME","END","originalValue","editorValue","$inlineEditor","_msg","_type","action","bindedAx5ui","_options","initValue","__editor","number","money","$inlineEditorCell","tagName","CANCEL","RETURN","__clear","getExcelString","ax5picker","ax5select","getBody","remove","val","keydown","ESC","k","getSum","getProxyList","po","dblClick","repaintRow","click","toggleCollapse","_collapse"],"mappings":"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","file":"AX6UIGrid_body.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"./AX6Util\";\nimport UTIL from \"./AX6UIGrid_util\";\nimport DATA from \"./AX6UIGrid_data\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport HEADER from \"./AX6UIGrid_header\";\n\nimport INLINE_EDITOR from \"./AX6UIGrid_inline_editor\";\nimport COLLECTOR from \"./AX6UIGrid_collector\";\nimport FORMATTER from \"./AX6UIGrid_formatter\";\nimport SCROLLER from \"./AX6UIGrid_scroller\";\n\nconst columnSelect = {\n    focusClear: function () {\n        let self = this, _column;\n        for (let c in self.focusedColumn) {\n            _column = self.focusedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .removeAttr('data-ax6grid-column-focused');\n            }\n        }\n        self.focusedColumn = {};\n    },\n    clear: function () {\n        let self = this, _column;\n        for (let c in self.selectedColumn) {\n            _column = self.selectedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .removeAttr('data-ax6grid-column-selected');\n            }\n        }\n        self.selectedColumn = {};\n    },\n    init: function (column) {\n        let self = this;\n        if (this.isInlineEditing) {\n            for (let editKey in this.inlineEditing) {\n                if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                    return this;\n                }\n            }\n        }\n\n        // focus\n        columnSelect.focusClear.call(self);\n        self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n            panelName: column.panelName,\n            dindex: column.dindex,\n            doindex: column.doindex,\n            rowIndex: column.rowIndex,\n            colIndex: column.colIndex,\n            colspan: column.colspan\n        };\n\n        // select\n        columnSelect.clear.call(self);\n        self.xvar.selectedRange = {\n            start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n            end: null\n        };\n        self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n            if (data) {\n                return false;\n            } else {\n                return {\n                    panelName: column.panelName,\n                    dindex: column.dindex,\n                    doindex: column.doindex,\n                    rowIndex: column.rowIndex,\n                    colIndex: column.colIndex,\n                    colspan: column.colspan\n                }\n            }\n        })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n        this.$.panel[column.panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + column.dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + column.colIndex + '\"]')\n            .attr('data-ax6grid-column-focused', \"true\")\n            .attr('data-ax6grid-column-selected', \"true\");\n\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this, \"RETURN\");\n        }\n    },\n    update: function (column) {\n        const self = this;\n        let dindex, doindex, colIndex, rowIndex, trl;\n\n        self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n        columnSelect.clear.call(self);\n\n        let range = {\n            r: {\n                s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n            },\n            c: {\n                s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n            }\n        };\n\n        dindex = range.r.s;\n        for (; dindex <= range.r.e; dindex++) {\n\n\n            trl = this.bodyRowTable.rows.length;\n            rowIndex = 0;\n            for (; rowIndex < trl; rowIndex++) {\n                colIndex = range.c.s;\n                for (; colIndex <= range.c.e; colIndex++) {\n                    var _panels = [],\n                        panelName = \"\";\n\n                    if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                    if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    panelName = _panels.join(\"-\");\n\n                    self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                        panelName: panelName,\n                        dindex: dindex,\n                        rowIndex: rowIndex,\n                        colIndex: colIndex,\n                        colspan: column.colspan\n                    };\n\n                    _panels = null;\n                    panelName = null;\n                }\n            }\n        }\n        dindex = null;\n        doindex = null;\n        colIndex = null;\n        rowIndex = null;\n\n        for (var c in self.selectedColumn) {\n            var _column = self.selectedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .attr('data-ax6grid-column-selected', 'true');\n            }\n        }\n\n    }\n};\n\nconst columnSelector = {\n    \"on\": function (cell) {\n        let self = this;\n\n        if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n            return;\n        }\n\n        columnSelect.init.call(self, cell);\n\n        this.$[\"container\"][\"body\"]\n            .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax6grid-column-attr=\"default\"]', function (e) {\n                if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n                    columnSelect.update.call(self, {\n                        panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n                        doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                    U.stopEvent(e);\n                }\n            })\n            .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            })\n            .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            });\n\n        jQuery(document.body)\n            .attr('unselectable', 'on')\n            .css('user-select', 'none')\n            .on('selectstart', false);\n    },\n    \"off\": function () {\n\n        this.$[\"container\"][\"body\"]\n            .off(\"mousemove.ax5grid-\" + this.instanceId)\n            .off(\"mouseup.ax5grid-\" + this.instanceId)\n            .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n        jQuery(document.body)\n            .removeAttr('unselectable')\n            .css('user-select', 'auto')\n            .off('selectstart');\n    }\n};\n\nconst updateRowState = function (_states, _dindex, _doindex, _data) {\n    let self = this,\n        cfg = this.config,\n        processor = {\n            \"selected\": function (_dindex, _doindex) {\n                if (this.list[_doindex]) {\n                    let i = this.$.livePanelKeys.length;\n                    while (i--) {\n                        this.$.panel[this.$.livePanelKeys[i]]\n                            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                            .attr(\"data-ax6grid-selected\", this.list[_doindex][cfg.columnKeys.selected]);\n                    }\n                }\n            },\n            \"selectedClear\": function () {\n                let di = this.list.length;\n                let pi;\n\n                if (!this.proxyList) {\n                    while (di--) {\n                        if (this.list[di][cfg.columnKeys.selected]) {\n                            pi = this.$.livePanelKeys.length;\n                            while (pi--) {\n                                this.$.panel[this.$.livePanelKeys[pi]]\n                                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                                    .attr(\"data-ax6grid-selected\", false);\n                            }\n                        }\n                        this.list[di][cfg.columnKeys.selected] = false;\n                    }\n                } else {\n                    while (di--) {\n                        this.list[di][cfg.columnKeys.selected] = false;\n                    }\n                    di = this.proxyList.length;\n                    while (di--) {\n                        if(this.list[doi][cfg.columnKeys.selected]){\n                            pi = this.$.livePanelKeys.length;\n                            while (pi--) {\n                                this.$.panel[this.$.livePanelKeys[pi]]\n                                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                                    .attr(\"data-ax6grid-selected\", false);\n                            }\n                        }\n\n                        this.proxyList[di][cfg.columnKeys.selected] = false;\n                        let doi = this.proxyList[di].__original_index__;\n                    }\n                }\n            },\n            \"cellChecked\": function (_dindex, _doindex, _data) {\n                let key = _data.key,\n                    rowIndex = _data.rowIndex,\n                    colIndex = _data.colIndex;\n\n                let panelName = (function () {\n                    let _panels = [];\n                    if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                    if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    return _panels.join(\"-\");\n                }).call(this);\n\n                this.$.panel[panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                    .find('[data-ax6grid-column-rowIndex=\"' + rowIndex + '\"][data-ax6grid-column-colIndex=\"' + colIndex + '\"]')\n                    .find('[data-ax6grid-editor=\"checkbox\"]')\n                    .attr(\"data-ax6grid-checked\", '' + _data.checked);\n            }\n        };\n\n    if(typeof _doindex === \"undefined\") _doindex = _dindex;\n\n    _states.forEach(function (_state) {\n        if (!processor[_state]) throw 'invaild state name';\n        processor[_state].call(self, _dindex, _doindex, _data);\n    });\n};\n\nconst updateRowStateAll = function (_states, _data) {\n    let self = this,\n        cfg = this.config,\n        processor = {\n            \"selected\": function (_dindex) {\n                repaint.call(this, true);\n            }\n        };\n\n    _states.forEach(function (_state) {\n        if (!processor[_state]) throw 'invaild state name';\n        processor[_state].call(self, _data);\n    });\n};\n\nconst init = function () {\n    let self = this;\n\n    this.$[\"container\"][\"body\"].on(\"click\", '[data-ax6grid-column-attr]', function (e) {\n        let panelName, attr,\n            row, col, dindex, doindex, rowIndex, colIndex, disableSelection,\n            targetClick = {\n                \"default\": function (_column) {\n                    let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                        that = {\n                            self: self,\n                            page: self.page,\n                            list: self.list,\n                            item: self.list[_column.doindex],\n                            dindex: _column.dindex,\n                            doindex: _column.doindex,\n                            rowIndex: _column.rowIndex,\n                            colIndex: _column.colIndex,\n                            column: column,\n                            value: self.list[_column.dindex][column.key]\n                        };\n\n                    if (column.editor && column.editor.type == \"checkbox\") { // todo : INLINE_EDITOR에서 처리 할수 있도록 구문 변경 필요.\n                        let value = DATA.getValue.call(self, _column.dindex, _column.doindex, column.key),\n                            checked, newValue;\n\n                        if (column.editor.config && column.editor.config.trueValue) {\n                            if (checked = !(value == column.editor.config.trueValue)) {\n                                newValue = column.editor.config.trueValue;\n                            } else {\n                                newValue = column.editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        DATA.setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);\n\n                        updateRowState.call(self, [\"cellChecked\"], _column.dindex, _column.doindex, {\n                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                            editorConfig: column.editor.config, checked: checked\n                        });\n                    } else {\n                        if (self.config.body.onClick) {\n                            self.config.body.onClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n                    let item = self.list[_column.doindex];\n                    if (item[self.config.columnKeys.disableSelection]) {\n                        return false;\n                    }\n\n                    if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {\n                        updateRowState.call(self, [\"selectedClear\"]);\n                        DATA.clearSelect.call(self);\n                    }\n\n                    DATA.select.call(self, _column.dindex, _column.doindex, undefined, {\n                        internalCall: true\n                    });\n                    updateRowState.call(self, [\"selected\"], _column.dindex, _column.doindex);\n                },\n                \"lineNumber\": function (_column) {\n\n                },\n                \"tree-control\": function (_column, _el) {\n                    //console.log(_column);\n                    toggleCollapse.call(self, _column.dindex, _column.doindex);\n                }\n            };\n\n        panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n        attr = this.getAttribute(\"data-ax6grid-column-attr\");\n        row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n        col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n        rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n        if (attr in targetClick) {\n            targetClick[attr]({\n                panelName: panelName,\n                attr: attr,\n                row: row,\n                col: col,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            }, this);\n        }\n    });\n    this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax6grid-column-attr]', function (e) {\n        let panelName, attr,\n            row, col, dindex, doindex, rowIndex, colIndex,\n            targetDBLClick = {\n                \"default\": function (_column) {\n                    if (self.isInlineEditing) {\n                        for (let columnKey in self.inlineEditing) {\n                            if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                return this;\n                            }\n                        }\n                    }\n\n                    let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n                    if (column) {\n                        if (!self.list[dindex].__isGrouping) {\n                            value = DATA.getValue.call(self, dindex, doindex, column.key);\n                        }\n                    }\n\n                    let editor = self.colGroup[_column.colIndex].editor;\n                    if (U.isObject(editor)) {\n                        inlineEdit.active.call(self, self.focusedColumn, e, value);\n                    } else {\n                        // 더블클릭 실행\n                        if (self.config.body.onDBLClick) {\n                            let that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.dindex],\n                                dindex: _column.dindex,\n                                doindex: _column.doindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n                            self.config.body.onDBLClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n\n                },\n                \"lineNumber\": function (_column) {\n\n                }\n            };\n\n        panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n        attr = this.getAttribute(\"data-ax6grid-column-attr\");\n        row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n        col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n        rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n        if (attr in targetDBLClick) {\n            targetDBLClick[attr]({\n                panelName: panelName,\n                attr: attr,\n                row: row,\n                col: col,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            });\n        }\n    });\n\n    if (this.config.contextMenu) {\n        this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n            let target, dindex, doindex, rowIndex, colIndex, item, column, param = {};\n\n            target = U.findParentNode(e.target, function (t) {\n                if (t.getAttribute(\"data-ax6grid-column-attr\")) {\n                    return true;\n                }\n            });\n\n            if (target) {\n                // item 찾기\n                rowIndex = Number(target.getAttribute(\"data-ax6grid-column-rowIndex\"));\n                colIndex = Number(target.getAttribute(\"data-ax6grid-column-colIndex\"));\n                dindex = Number(target.getAttribute(\"data-ax6grid-data-index\"));\n                doindex = Number(target.getAttribute(\"data-ax6grid-data-o-index\"));\n                column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n                item = self.list[dindex];\n            }\n\n            if (!self.contextMenu) {\n                self.contextMenu = new ax5.ui.menu();\n            }\n\n            self.contextMenu.setConfig(self.config.contextMenu);\n\n            param = {\n                element: target,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex,\n                item: item,\n                column: column,\n                gridSelf: self\n            };\n\n            self.contextMenu.popup(e, {\n                filter: function () {\n                    return self.config.contextMenu.popupFilter.call(this, this, param);\n                },\n                param: param\n            });\n\n            U.stopEvent(e.originalEvent);\n            target = null;\n            dindex = null;\n            doindex = null;\n            rowIndex = null;\n            colIndex = null;\n            item = null;\n            column = null;\n            param = null;\n        });\n    }\n\n    this.$[\"container\"][\"body\"]\n        .on(\"mousedown\", '[data-ax6grid-column-attr=\"default\"]', function (e) {\n            if (self.xvar.touchmoved) return false;\n            if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n                columnSelector.on.call(self, {\n                    panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n                    dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n                    doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n                    rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n                    colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n                    colspan: Number(this.getAttribute(\"colspan\"))\n                });\n            }\n        })\n        .on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n    resetFrozenColumn.call(this);\n\n    // 그리드 바디에 출력할 여유 카운트\n    this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n    this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n\n    if (this.config.virtualScrollAccelerated) {\n        this.__throttledScroll = U.throttle(function (css, opts) {\n            if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n                repaint.call(this);\n            } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n                repaint.call(this);\n            }\n            if (opts.callback) {\n                opts.callback();\n            }\n        }, this.config.virtualScrollAcceleratedDelayTime);\n    } else {\n        this.__throttledScroll = false;\n    }\n};\n\nconst resetFrozenColumn = function () {\n    let cfg = this.config,\n        dividedBodyRowObj = UTIL.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n    this.asideBodyRowData = (function (dataTable) {\n        let data = {rows: []};\n        for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n            data.rows[i] = {cols: []};\n            if (i === 0) {\n                let col = {\n                    label: \"\",\n                    colspan: 1,\n                    rowspan: dataTable.rows.length,\n                    colIndex: null\n                }, _col = {};\n\n                if (cfg.showLineNumber) {\n                    _col = jQuery.extend({}, col, {\n                        width: cfg.lineNumberColumnWidth,\n                        _width: cfg.lineNumberColumnWidth,\n                        columnAttr: \"lineNumber\",\n                        label: \"&nbsp;\", key: \"__d-index__\"\n                    });\n                    data.rows[i].cols.push(_col);\n                }\n                if (cfg.showRowSelector) {\n                    _col = jQuery.extend({}, col, {\n                        width: cfg.rowSelectorColumnWidth,\n                        _width: cfg.rowSelectorColumnWidth,\n                        columnAttr: \"rowSelector\",\n                        label: \"\", key: \"__d-checkbox__\"\n                    });\n                    data.rows[i].cols.push(_col);\n                }\n            }\n        }\n\n        return data;\n    }).call(this, this.bodyRowTable);\n\n    //console.log(dividedBodyRowObj);\n\n    this.leftBodyRowData = dividedBodyRowObj.leftData;\n    this.bodyRowData = dividedBodyRowObj.rightData;\n\n    if (cfg.body.grouping) {\n        let dividedBodyGroupingObj = UTIL.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n        this.asideBodyGroupingData = (function (dataTable) {\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyGroupingTable);\n        this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n        this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n        this.bodyGroupingMap = UTIL.makeBodyRowMap.call(this, this.bodyGroupingTable);\n    }\n\n    this.leftFootSumData = {};\n    this.footSumData = {};\n    if (this.config.footSum) {\n        let dividedFootSumObj = UTIL.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n        this.leftFootSumData = dividedFootSumObj.leftData;\n        this.footSumData = dividedFootSumObj.rightData;\n    }\n};\n\nconst getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n\n    let _key = _col.key, tagsToReplace = {\n        '<': '&lt;',\n        '>': '&gt;'\n    };\n\n    if (_key === \"__d-index__\") {\n        return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n    }\n    else if (_key === \"__d-checkbox__\") {\n        return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n    }\n    else {\n        if (_col.editor && (function (_editor) {\n                if (_editor.type in INLINE_EDITOR) {\n                    return (INLINE_EDITOR[_editor.type].editMode == \"inline\");\n                }\n                return false;\n            })(_col.editor)) { // editor가 inline타입이라면\n\n            _value = _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n\n            if (U.isFunction(_col.editor.disabled)) {\n                if (_col.editor.disabled.call({\n                        list: _list,\n                        dindex: _index,\n                        item: _list[_index],\n                        key: _key,\n                        value: _value\n                    })) {\n                    return _value;\n                }\n            }\n\n            // print editor\n            return _returnPlainText ? _value : INLINE_EDITOR[_col.editor.type].getHtml(this, _col.editor, _value);\n        }\n\n        const valueProcessor = {\n            \"formatter\": function () {\n                let that = {\n                    key: _key,\n                    value: _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key),\n                    dindex: _index,\n                    item: _item,\n                    list: _list\n                };\n\n                let caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n                return caller ? caller.call(that) : that.value;\n            },\n            \"default\": function () {\n                let returnValue = \"\";\n\n                if (typeof _value !== \"undefined\") {\n                    returnValue = _value;\n                } else {\n                    if (/[\\.\\[\\]]/.test(_key)) {\n                        _value = DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n                    }else{\n                        _value = _item[_key];\n                    }\n\n                    if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                }\n\n                // 키값이 Boolean일때 오류 발생하여 수정.\n                return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                    return tagsToReplace[tag] || tag;\n                });\n            },\n            \"treeControl\": function (__value) {\n                let cfg = this.config,\n                    keys = this.config.tree.columnKeys,\n                    indentNodeHtml = '';\n\n                if (_item[keys.children].length) {\n                    indentNodeHtml += '<a ' +\n                        'data-ax6grid-data-index=\"' + _index + '\" ' +\n                        'data-ax6grid-column-attr=\"tree-control\" ' +\n                        'data-ax6grid-tnode-arrow=\"\" ' +\n                        'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                        '>';\n                    indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n                    indentNodeHtml += '</a>';\n                } else {\n                    indentNodeHtml += '<span ' +\n                        'data-ax6grid-tnode-arrow=\"\" ' +\n                        'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                        '>&nbsp;</span>';\n                }\n\n                indentNodeHtml += '<span ' +\n                    'data-ax6grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n                    'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n                    '>';\n                indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n                indentNodeHtml += '</span>';\n\n                return indentNodeHtml + __value;\n            }\n        };\n\n        let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n        if (this.config.tree.use && _col.treeControl) {\n            returnValue = valueProcessor.treeControl.call(this, returnValue);\n        }\n\n        return returnValue;\n    }\n\n};\n\nconst getGroupingValue = function (_item, _index, _col) {\n    let value, that, caller, _key = _col.key, _label = _col.label;\n\n    if (typeof _key === \"undefined\") {\n        that = {\n            key: _key,\n            list: _item.__groupingList,\n            groupBy: _item.__groupingBy\n        };\n        if (U.isFunction(_label)) {\n            value = _label.call(that);\n        } else {\n            value = _label;\n        }\n        _item[_col.colIndex] = value;\n        return value;\n    }\n    else if (_key === \"__d-index__\") {\n        return '';\n    }\n    else if (_key === \"__d-checkbox__\") {\n        return '';\n    }\n    else {\n        if (_col.collector) {\n            that = {\n                key: _key,\n                list: _item.__groupingList\n            };\n            _item[_col.colIndex] = value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n            if (_col.formatter) {\n                that.value = value;\n                caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n                return caller ? caller.call(that) : value;\n            } else {\n                return value;\n            }\n        } else {\n            return \"&nbsp;\";\n        }\n    }\n};\n\nconst getSumFieldValue = function (_list, _col) {\n    let _key = _col.key, _label = _col.label;\n    //, _collector, _formatter\n    if (typeof _key === \"undefined\") {\n        return _label;\n    }\n    else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n        return '&nbsp;';\n    }\n    else {\n        if (_col.collector) {\n            let that = {\n                    key: _key,\n                    list: _list\n                };\n            let value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n            that.value = value;\n\n            if (_col.formatter) {\n                return (U.isFunction(_col.formatter) ? _col.formatter : this.config.formatter[_col.formatter] || FORMATTER[_col.formatter]).call(that);\n            } else {\n                return value;\n            }\n        } else {\n            return \"&nbsp;\";\n        }\n    }\n};\n\nconst repaint = function (_reset) {\n    // debugger;\n    let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n    /// repaint reset 타입이면 고정컬럼을 재조정\n    if (_reset) {\n        resetFrozenColumn.call(this);\n        // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n        this.xvar.paintStartRowIndex = undefined;\n        this.xvar.paintStartColumnIndex = undefined;\n    }\n\n    /// 출력시작 인덱스\n    let paintStartRowIndex, virtualPaintStartRowIndex;\n\n    if (this.config.virtualScrollY) {\n        virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n            paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n        }\n    }\n    else {\n        paintStartRowIndex = this.xvar.frozenRowIndex;\n    }\n\n    if (isNaN(paintStartRowIndex)) return this;\n\n    let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n    let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n    if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n        for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n            // bodyScrollLeft\n            this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n            this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n            if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n                paintStartColumnIndex = ci;\n            }\n            if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n                paintEndColumnIndex = ci;\n\n                if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n                if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n            }\n        }\n\n        if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n        if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n        this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    }\n\n    let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n        headerColGroup = this.headerColGroup,\n        asideBodyRowData = this.asideBodyRowData,\n        leftBodyRowData = this.leftBodyRowData,\n        bodyRowData = this.bodyRowData,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount, virtualPaintRowCount;\n\n    if (!this.config.virtualScrollY) {\n        virtualPaintRowCount = paintRowCount = list.length;\n    } else {\n        virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n        paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n    }\n\n    // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n    if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n        paintStartRowIndex = this.xvar.paintStartRowIndex;\n    }\n\n    if (\n        this.xvar.dataRowCount === list.length\n        && this.xvar.paintStartRowIndex === paintStartRowIndex\n        && this.xvar.paintRowCount === paintRowCount\n        && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n        && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n    ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n    // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n    if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n        headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n        bodyRowData = UTIL.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n        if (cfg.body.grouping) {\n            bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n        }\n        if (cfg.footSum) {\n            footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n        }\n        if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n            this.needToPaintSum = true;\n        }\n    }\n\n    /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n    this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n    /// 사용된 패널들의 키 모음\n    this.$.livePanelKeys = [];\n\n    // 그리드 바디 영역 페인트 함수\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _groupRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey];\n\n        if (!isFirstPaint && !_scrollConfig) {\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return false;\n        }\n\n        let SS = [],\n            cgi, cgl, di, dl, tri, trl, ci, cl, col,\n            cellHeight,\n            colAlign,\n            isScrolled = (function () {\n                // 스크롤값이 변경되거나 처음 호출되었습니까?\n                if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                    _scrollConfig = {\n                        paintStartRowIndex: 0,\n                        paintRowCount: _list.length\n                    };\n                    return false;\n                } else {\n                    return true;\n                }\n            })(),\n            stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight) + 'px';\n\n        if (isScrolled) {\n            SS.push('<div style=\"background:repeating-linear-gradient(to top, ' + stripeString + ');' +\n                'font-size:0;' +\n                'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n        }\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        di = _scrollConfig.paintStartRowIndex;\n\n        for (dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n\n            if (_list[di]) {\n                let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                    SS.push('<tr class=\"tr-' + (di % 4) + '', (cfg.body.trStyleClass) ? (U.isFunction(cfg.body.trStyleClass)) ? ' ' + cfg.body.trStyleClass.call({\n                            item: _list[di],\n                            index: di\n                        }, _list[di], di) : ' ' + cfg.body.trStyleClass : '','\"',\n\n                        (isGroupingRow) ? ' data-ax6grid-grouping-tr=\"true\"' : '',\n                        ' data-ax6grid-tr-data-index=\"' + di + '\"',\n                        ' data-ax6grid-tr-data-o-index=\"' + odi + '\"',\n                        ' data-ax6grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                        ' data-ax6grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                        '>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                        })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                    SS.push('</tr>');\n                }\n            }\n        }\n        SS.push('</table>');\n\n        if (isScrolled && _list.length) {\n            SS.push('<div style=\"background:repeating-linear-gradient(to bottom, ' + stripeString + ');' +\n                'font-size:0;' +\n                'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n        }\n\n\n        _elTarget.empty();\n        SS = SS.join('');\n\n        _elTarget.get(0).innerHTML = SS;\n\n        this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n        return true;\n    };\n\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey];\n\n        if (!isFirstPaint && !_scrollConfig) {\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return false;\n        }\n\n        let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty();\n        SS = SS.join('');\n\n        _elTarget.get(0).innerHTML = SS;\n\n        this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n        return true;\n    };\n\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let tblRowMaps = [];\n        let _elTarget = this.$.panel[_elTargetKey];\n        let token = {}, hasMergeTd;\n\n        // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n        let tableTrs = _elTarget.find(\"tr\");\n        for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n            let tableTrTds, trMaps;\n            tableTrTds = tableTrs[ri].childNodes;\n            trMaps = [];\n\n            for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n                let tdObj = {\n                    \"$\": jQuery(tableTrTds[ci])\n                };\n\n                if (tdObj[\"$\"].attr(\"data-ax6grid-column-col\") != \"null\") {\n                    tdObj.dindex = tdObj[\"$\"].attr(\"data-ax6grid-data-index\");\n                    tdObj.tri = tdObj[\"$\"].attr(\"data-ax6grid-column-row\");\n                    tdObj.ci = tdObj[\"$\"].attr(\"data-ax6grid-column-col\");\n                    tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-rowIndex\");\n                    tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-colIndex\");\n                    tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                    tdObj.text = tdObj[\"$\"].text();\n                    trMaps.push(tdObj);\n                }\n\n                tdObj = null;\n            }\n            tblRowMaps.push(trMaps);\n        }\n\n        // 두줄이상 일 때 의미가 있으니.\n        if (tblRowMaps.length > 1) {\n            hasMergeTd = false;\n            for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                let prevTokenColIndexs = [];\n\n                for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                    // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n\n                    if (!_colGroup[ci].editor && (() => {\n                            if (U.isArray(cfg.body.mergeCells)) {\n                                return ax5.util.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n                            } else {\n                                return true;\n                            }\n                        })()) {\n\n                        // 앞줄과 값이 같다면.\n                        if (token[ci] && (() => {\n                                if (prevTokenColIndexs.length > 0) {\n                                    let hasFalse = true;\n                                    prevTokenColIndexs.forEach(function (ti) {\n                                        if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                                            hasFalse = false;\n                                        }\n                                    });\n                                    return hasFalse;\n                                } else {\n                                    return true;\n                                }\n                            })() && token[ci].text == tblRowMaps[ri][ci].text) {\n                            tblRowMaps[ri][ci].rowspan = 0;\n                            tblRowMaps[token[ci].ri][ci].rowspan++;\n                            hasMergeTd = true;\n                        } else {\n                            token[ci] = {\n                                ri: ri,\n                                ci: ci,\n                                text: tblRowMaps[ri][ci].text\n                            };\n                        }\n\n                        prevTokenColIndexs.push(ci);\n                    }\n                }\n            }\n\n            // rowspan을 다 구했으면 적용합니다.\n            if (hasMergeTd) {\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                        if (tblRowMaps[ri][ci].rowspan == 0) {\n                            tblRowMaps[ri][ci][\"$\"].remove();\n                        } else if (tblRowMaps[ri][ci].rowspan > 1) {\n                            tblRowMaps[ri][ci][\"$\"]\n                                .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                                .addClass(\"merged\");\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    let scrollConfig = {\n        paintStartRowIndex: paintStartRowIndex,\n        paintRowCount: paintRowCount,\n        paintStartColumnIndex: paintStartColumnIndex,\n        paintEndColumnIndex: paintEndColumnIndex,\n        nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n        nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n        bodyTrHeight: this.xvar.bodyTrHeight,\n        virtualScrollX: this.config.virtualScrollX,\n        virtualScrollY: this.config.virtualScrollY,\n    };\n    let frozenScrollConfig = jQuery.extend({}, scrollConfig, {\n        paintStartRowIndex: 0,\n        paintRowCount: this.xvar.frozenRowIndex\n    });\n\n    // aside\n    if (cfg.asidePanelWidth > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n\n        repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum) {\n            // 바닥 요약 (footSum에 대한 aside 사용안함)\n            repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n        }\n    }\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n\n        repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n        }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > 0) {\n        // 상단 행고정\n        repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n    repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n    // 바닥 요약\n    if (cfg.footSum && this.needToPaintSum) {\n        repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n    // right\n    if (cfg.rightSum) {\n        // todo : right 표현 정리\n    }\n\n    /// mergeCells\n    if (cfg.body.mergeCells && this.list.length) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n            mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n    }\n\n    this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n    this.xvar.paintStartRowIndex = paintStartRowIndex;\n    this.xvar.paintRowCount = paintRowCount;\n    this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n    this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n    this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n    this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n    this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n    this.xvar.dataRowCount = list.length;\n    this.needToPaintSum = false;\n\n    PAGE.statusUpdate.call(this);\n};\n\nconst repaintCell = function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {\n    let self = this,\n        cfg = this.config,\n        list = this.list;\n\n    let updateCell = this.$[\"panel\"][_panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + _rowIndex + '\"][data-ax6grid-column-colindex=\"' + _colIndex + '\"]')\n            .find('[data-ax6grid-cellholder]'),\n        colGroup = this.colGroup,\n        col = colGroup[_colIndex];\n\n    updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n    if (col.editor && col.editor.updateWith) {\n        col.editor.updateWith.forEach(function (updateColumnKey) {\n            colGroup.forEach(function (col) {\n                if (col.key == updateColumnKey) {\n                    let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                        panelName = UTIL.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                        updateWithCell = self.$[\"panel\"][panelName]\n                            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                            .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                            .find('[data-ax6grid-cellholder]');\n\n                    updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                }\n            });\n        });\n    }\n\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        headerColGroup = this.headerColGroup,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n        headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n        if (cfg.body.grouping) {\n            bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n        }\n        if (cfg.footSum) {\n            footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n        }\n    }\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        let tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty().get(0).innerHTML = SS.join('');\n        return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            di, dl, tri, trl, ci, cl,\n            col, cellHeight, colAlign;\n\n        for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n            if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                let rowTable = _groupRow;\n                SS = [];\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                        })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                }\n                _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n            }\n        }\n    };\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n            replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                paintStartRowIndex: 0,\n                paintRowCount: this.xvar.frozenRowIndex,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            });\n        }\n\n        replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n        }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n};\n\nconst repaintRow = function (_dindex) {\n    let self = this,\n        cfg = this.config,\n        list = this.list;\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        asideBodyRowData = this.asideBodyRowData,\n        leftBodyRowData = this.leftBodyRowData,\n        bodyRowData = this.bodyRowData,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty().get(0).innerHTML = SS.join('');\n        return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n            _scrollConfig = {\n                paintStartRowIndex: 0,\n                paintRowCount: _list.length\n            };\n        }\n\n        for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n            if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                let rowTable = _groupRow;\n                SS = [];\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                        })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                }\n                _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n            }\n        }\n    };\n    let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow,\n            odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n            for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                col = rowTable.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-data-index=\"' + di + '\" ',\n                    'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        let attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        let tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    item: _list[di],\n                                    index: di\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-data-index=\"' + di + '\" ',\n                'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n        }\n\n        _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n    };\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n        }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n    } else {\n        replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n    }\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            else {\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        else {\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n        }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n    }\n};\n\nconst scrollTo = function (css, opts) {\n    let self = this;\n    if (typeof opts === \"undefined\") opts = {timeoutUnUse: false};\n    if (this.isInlineEditing) {\n        for (var key in this.inlineEditing) {\n            //if(this.inlineEditing[key].editor.type === \"select\") {}\n            // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n            inlineEdit.deActive.call(this, \"ESC\", key);\n        }\n    }\n\n    if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n        this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n        this.$.panel[\"left-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n        this.$.panel[\"top-body-scroll\"].css({left: css.left});\n    }\n\n    this.$.panel[\"body-scroll\"].css(css);\n\n    if (this.config.footSum && \"left\" in css) {\n        this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n    }\n\n    // 바디 리페인팅 this.__throttledScroll 은 body init 에서 초기화\n    if (this.__throttledScroll) {\n        this.__throttledScroll(css, opts);\n    } else {\n        if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n            repaint.call(this);\n        } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n            repaint.call(this);\n        }\n        if (opts.callback) {\n            opts.callback();\n        }\n    }\n};\n\nconst blur = function () {\n    columnSelect.focusClear.call(this);\n    columnSelect.clear.call(this);\n    if (this.isInlineEditing) {\n        inlineEdit.deActive.call(this);\n    }\n};\n\nconst moveFocus = function (_position) {\n    let focus = {\n        \"UD\": function (_dy) {\n            let moveResult = true,\n                focusedColumn, originalColumn, while_i,\n                nPanelInfo;\n\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n\n            if (!focusedColumn) return false;\n\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n            if (_dy > 0) {\n                // 아래로\n                if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                    focusedColumn.dindex = focusedColumn.dindex + _dy;\n                    focusedColumn.doindex = focusedColumn.doindex + _dy;\n                    focusedColumn.rowIndex = 0;\n                    if (focusedColumn.dindex > this.list.length - 1) {\n                        focusedColumn.dindex = focusedColumn.doindex = this.list.length - 1;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                }\n            }\n            else {\n                // 위로\n                if (focusedColumn.rowIndex + _dy < 0) {\n                    focusedColumn.dindex = focusedColumn.dindex + _dy;\n                    focusedColumn.doindex = focusedColumn.doindex + _dy;\n                    focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                    if (focusedColumn.dindex < 0) {\n                        focusedColumn.dindex = focusedColumn.doindex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                }\n            }\n\n            while_i = 0;\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                    focusedColumn.colIndex--;\n                } else {\n                    focusedColumn.rowIndex--;\n                }\n\n                if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                    // find fail\n                    moveResult = false;\n                    break;\n                }\n                while_i++;\n            }\n\n            nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n            // if mergeCells\n            if (this.config.body.mergeCells && this.list.length) {\n                while (!this.$.panel[nPanelInfo.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                    if (_dy > 0) {\n                        focusedColumn.dindex++;\n                    } else {\n                        focusedColumn.dindex--;\n                    }\n\n                    if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                        break;\n                    }\n                }\n                nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            }\n\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n\n            if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n                    let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;\n                    if (newTop < 0) newTop = 0;\n                    scrollTo.call(this, {top: -newTop, timeoutUnUse: false});\n                    SCROLLER.resize.call(this);\n                }\n                else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                    scrollTo.call(this, {top: (this.xvar.virtualPaintRowCount - 2 - focusedColumn.dindex) * this.xvar.bodyTrHeight, timeoutUnUse: false});\n                    SCROLLER.resize.call(this);\n                }\n            }\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n            this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            return moveResult;\n        },\n        \"LR\": function (_dx) {\n            let moveResult = true,\n                focusedColumn, originalColumn,\n                while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n            for (var c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (!focusedColumn) return false;\n\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n            if (_dx < 0) {\n                focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                if (focusedColumn.colIndex < 0) {\n                    focusedColumn.colIndex = 0;\n                    moveResult = false;\n                }\n            }\n            else {\n                focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                    focusedColumn.colIndex = this.colGroup.length - 1;\n                    moveResult = false;\n                }\n            }\n\n            if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                focusedColumn.rowIndex = 0;\n            }\n\n            if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n                if (_dx < 0) {\n                    while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex--;\n                        if (focusedColumn.colIndex <= 0) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex++;\n                        if (focusedColumn.colIndex >= this.colGroup.length) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                if (_dx < 0) {\n                    while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex--;\n                        if (focusedColumn.colIndex <= 0) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex++;\n                        if (focusedColumn.colIndex >= this.colGroup.length) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n            // if mergeCells\n            if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                while (!this.$.panel[nPanelInfo.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                    focusedColumn.dindex--;\n\n                    if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                        break;\n                    }\n                }\n                nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            }\n\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리\n            let isScrollTo = (function () {\n                if (!this.config.virtualScrollX) return false;\n                let scrollLeft = 0;\n                if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n                    if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n                        scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n                        scrollTo.call(this, {left: scrollLeft});\n                        HEADER.scrollTo.call(this, {left: scrollLeft});\n                        SCROLLER.resize.call(this);\n                        return true;\n                    }\n                    else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n                        if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                            scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                            scrollTo.call(this, {left: -scrollLeft});\n                            HEADER.scrollTo.call(this, {left: -scrollLeft});\n                            SCROLLER.resize.call(this);\n                        }\n                        return true;\n                    }\n                }\n                scrollLeft = null;\n                return false;\n            }).call(this);\n\n            containerPanelName = nPanelInfo.containerPanelName;\n            isScrollPanel = nPanelInfo.isScrollPanel;\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n            var $column = this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n                // todo : 컬럼이동할 때에도 scrollTo 체크\n                var newLeft = (function () {\n                    if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                        return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                    } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                        return $column.position().left;\n                    } else {\n                        return;\n                    }\n                }).call(this);\n\n                if (typeof newLeft !== \"undefined\") {\n                    HEADER.scrollTo.call(this, {left: -newLeft});\n                    scrollTo.call(this, {left: -newLeft});\n                    SCROLLER.resize.call(this);\n                }\n            }\n\n            return moveResult;\n        },\n        \"INDEX\": function (_dindex) {\n            let moveResult = true,\n                focusedColumn, originalColumn,\n                while_i;\n\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (!focusedColumn) {\n                focusedColumn = {\n                    rowIndex: 0,\n                    colIndex: 0\n                }\n            }\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n\n            if (_dindex == \"end\") {\n                _dindex = this.list.length - 1;\n            }\n\n            focusedColumn.dindex = _dindex;\n            focusedColumn.rowIndex = 0;\n\n            while_i = 0;\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                    focusedColumn.colIndex--;\n                } else {\n                    focusedColumn.rowIndex--;\n                }\n\n                if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                    // find fail\n                    break;\n                }\n                while_i++;\n            }\n\n            let nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리.\n            (function () {\n                if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                    if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n                        scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                        SCROLLER.resize.call(this);\n                    }\n                    else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                        scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n                        SCROLLER.resize.call(this);\n                    }\n                }\n            }).call(this);\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n            this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            return moveResult;\n        }\n    };\n\n    let processor = {\n        \"UP\": function () {\n            return focus[\"UD\"].call(this, -1);\n        },\n        \"DOWN\": function () {\n            return focus[\"UD\"].call(this, 1);\n        },\n        \"LEFT\": function () {\n            return focus[\"LR\"].call(this, -1);\n        },\n        \"RIGHT\": function () {\n            return focus[\"LR\"].call(this, 1);\n        },\n        \"HOME\": function () {\n            return focus[\"INDEX\"].call(this, 0);\n        },\n        \"END\": function () {\n            return focus[\"INDEX\"].call(this, \"end\");\n        },\n        \"position\": function (_position) {\n            return focus[\"INDEX\"].call(this, _position);\n        }\n    };\n\n    if (_position in processor) {\n        return processor[_position].call(this);\n    } else {\n        return processor[\"position\"].call(this, _position);\n    }\n};\n\nconst inlineEdit = {\n    active(_focusedColumn, _e, _initValue) {\n        let self = this,\n            dindex, doindex, colIndex, rowIndex, panelName, colspan,\n            col, editor;\n\n        for (var key in _focusedColumn) {\n            panelName = _focusedColumn[key].panelName;\n            dindex = _focusedColumn[key].dindex;\n            doindex = _focusedColumn[key].doindex;\n            colIndex = _focusedColumn[key].colIndex;\n            rowIndex = _focusedColumn[key].rowIndex;\n            colspan = _focusedColumn[key].colspan;\n\n            // 인라인 에디팅을 멈춰야 하는 경우 조건\n            col = this.colGroup[colIndex];\n            if (!(editor = col.editor)) return this;\n\n            // editor disabled 체크\n            if (U.isFunction(editor.disabled)) {\n                if (editor.disabled.call({\n                        list: this.list,\n                        dindex: dindex,\n                        item: this.list[dindex],\n                        key: col.key,\n                        value: _initValue\n                    })) {\n                    return this;\n                }\n            }\n\n            // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n            if (!(function (_editor, _type) {\n                    if (_editor.type in INLINE_EDITOR) {\n                        return (INLINE_EDITOR[_editor.type].editMode == \"popup\");\n                    }\n                })(editor)) {\n                // 체크 박스 타입이면 값 변경 시도\n                if (editor.type == \"checkbox\") {\n                    let checked, newValue;\n                    if (editor.config && editor.config.trueValue) {\n                        if (checked = !(_initValue == editor.config.trueValue)) {\n                            newValue = editor.config.trueValue;\n                        } else {\n                            newValue = editor.config.falseValue;\n                        }\n                    } else {\n                        newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                    }\n\n                    DATA.setValue.call(self, dindex, doindex, col.key, newValue);\n                    updateRowState.call(self, [\"cellChecked\"], dindex, doindex, {\n                        key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                        editorConfig: col.editor.config, checked: checked\n                    });\n                }\n                return this;\n            }\n\n            if (this.list[dindex].__isGrouping) {\n                return false;\n            }\n            if (key in this.inlineEditing) {\n                return false;\n            }\n\n            this.inlineEditing[key] = {\n                editor: editor,\n                panelName: panelName,\n                columnKey: key,\n                column: _focusedColumn[key],\n                useReturnToSave: INLINE_EDITOR[editor.type].useReturnToSave\n            };\n            this.isInlineEditing = true;\n        }\n        if (this.isInlineEditing) {\n\n            let originalValue = DATA.getValue.call(self, dindex, doindex, col.key),\n                initValue = (function (__value, __editor) {\n                    if (U.isNothing(__value)) {\n                        __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                    }\n\n                    if (__editor.type == \"money\") {\n                        return U.number(__value, {\"money\": true});\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, _initValue, editor);\n\n            this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                .find('[data-ax6grid-cellholder]');\n\n            this.inlineEditing[key].$inlineEditor = INLINE_EDITOR[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n            return true;\n        }\n    },\n    deActive(_msg, _key, _value) {\n        // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n        if (!this.inlineEditing[_key]) return this;\n\n        let panelName = this.inlineEditing[_key].panelName,\n            dindex = this.inlineEditing[_key].column.dindex,\n            doindex = this.inlineEditing[_key].column.doindex,\n            rowIndex = this.inlineEditing[_key].column.rowIndex,\n            colIndex = this.inlineEditing[_key].column.colIndex,\n            column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n            editorValue = (function ($inlineEditor) {\n                if (typeof _value === \"undefined\") {\n                    if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                        return $inlineEditor.val();\n                    } else {\n                        _msg = \"CANCEL\";\n                        return false;\n                    }\n                } else {\n                    return _value;\n                }\n            })(this.inlineEditing[_key].$inlineEditor),\n            newValue = (function (__value, __editor) {\n                if (__editor.type == \"money\") {\n                    return U.number(__value);\n                }\n                else {\n                    return __value;\n                }\n            }).call(this, editorValue, column.editor);\n\n        let action = {\n            \"CANCEL\"(_dindex, _column, _newValue) {\n                action[\"__clear\"].call(this);\n            },\n            \"RETURN\"(_dindex, _doindex, _column, _newValue) {\n                if (DATA.setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {\n                    action[\"__clear\"].call(this);\n                    repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);\n                } else {\n                    action[\"__clear\"].call(this);\n                }\n            },\n            \"__clear\"() {\n                this.isInlineEditing = false;\n                let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                if (bindedAx5ui == \"ax5picker\") {\n                    this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                } else if (bindedAx5ui == \"ax5select\") {\n                    this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                }\n\n                this.inlineEditing[_key].$inlineEditor.remove();\n                this.inlineEditing[_key].$inlineEditor = null;\n                this.inlineEditing[_key].$inlineEditorCell = null;\n                this.inlineEditing[_key] = undefined;\n                delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n            }\n        };\n\n        if (_msg in action) {\n            action[_msg || \"RETURN\"].call(this, dindex, doindex, column, newValue);\n        } else {\n            action[\"__clear\"].call(this);\n        }\n    },\n    keydown(key, columnKey, _options) {\n        let processor = {\n            \"ESC\"() {\n                for (var columnKey in this.inlineEditing) {\n                    inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                }\n            },\n            \"RETURN\"() {\n                if (this.isInlineEditing) {\n                    if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                        inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                    }else{\n                        return false;\n                    }\n                } else {\n\n                    for (var k in this.focusedColumn) {\n                        let _column = this.focusedColumn[k],\n                            column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                            dindex = _column.dindex,\n                            doindex = _column.doindex,\n                            value = \"\",\n                            col = this.colGroup[_column.colIndex];\n\n                        if (column) {\n                            if (!this.list[dindex].__isGrouping) {\n                                value = DATA.getValue.call(this, dindex, doindex, column.key);\n                            }\n                        }\n\n                        if (col.editor && INLINE_EDITOR[col.editor.type].editMode === \"inline\") {\n                            if (_options && _options.moveFocus) {\n\n                            }\n                            else {\n                                if (column.editor && column.editor.type == \"checkbox\") {\n                                    value = DATA.getValue.call(this, dindex, doindex, column.key);\n\n                                    let checked, newValue;\n                                    if (column.editor.config && column.editor.config.trueValue) {\n                                        // console.log(value, column.editor.config.trueValue);\n\n                                        if (value != column.editor.config.trueValue) {\n                                            newValue = column.editor.config.trueValue;\n                                            checked = true;\n                                        } else {\n                                            newValue = column.editor.config.falseValue;\n                                            checked = false;\n                                        }\n                                    } else {\n                                        newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                    }\n\n                                    DATA.setValue.call(this, dindex, doindex, column.key, newValue);\n                                    updateRowState.call(this, [\"cellChecked\"], dindex, doindex, {\n                                        key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                        editorConfig: column.editor.config, checked: checked\n                                    });\n                                }\n                            }\n                        } else {\n                            inlineEdit.active.call(this, this.focusedColumn, null, value);\n                        }\n                    }\n                }\n                return true;\n            }\n        };\n\n        if (key in processor) {\n            processor[key].call(this, key, columnKey, _options);\n        }\n    }\n};\n\nconst getExcelString = function () {\n    let cfg = this.config,\n        list = this.list,\n        bodyRowData = this.bodyRowTable,\n        footSumData = this.footSumTable,\n        bodyGroupingData = this.bodyGroupingTable;\n\n    // body-scroll 의 포지션에 의존적이므로..\n    let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n        let SS = [],\n            di, dl,\n            tri, trl,\n            ci, cl,\n            col, val;\n\n        //SS.push('<table border=\"1\">');\n        for (di = 0, dl = _list.length; di < dl; di++) {\n            let isGroupingRow = false, rowTable;\n\n            if (_groupRow && \"__isGrouping\" in _list[di]) {\n                rowTable = _groupRow;\n                isGroupingRow = true;\n            } else {\n                rowTable = _bodyRow;\n            }\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, val, \"text\"), '&nbsp;</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n        }\n        //SS.push('</table>');\n        return SS.join('');\n    };\n    let getSum = function (_colGroup, _bodyRow, _list) {\n        let SS = [],\n            tri, trl,\n            ci, cl,\n            col;\n\n        //SS.push('<table border=\"1\">');\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('\\n<tr>');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                SS.push('<td ',\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    '>', getSumFieldValue.call(this, _list, col), '</td>');\n            }\n            SS.push('\\n</tr>');\n        }\n        //SS.push('</table>');\n\n        return SS.join('');\n    };\n\n    let po = [];\n    po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n    if (cfg.footSum) {\n        // 바닥 요약\n        po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n    }\n\n    // right\n    if (cfg.rightSum) {\n        // todo : right 표현 정리\n    }\n\n    return po.join('');\n};\n\nconst toggleCollapse = function (_dindex, _doindex, _collapse) {\n    if (DATA.toggleCollapse.call(this, _dindex, _doindex, _collapse)) {\n        this.proxyList = DATA.getProxyList.call(this, this.list);\n        repaint.call(this);\n    }\n};\n\nconst click = function (_dindex, _doindex) {\n    let that = {\n        self: this,\n        page: this.page,\n        list: this.list,\n        item: this.list[_dindex],\n        dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n    if (this.config.body.onClick) {\n        this.config.body.onClick.call(that);\n    }\n\n    that = null;\n    // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n};\n\nconst dblClick = function (_dindex, _doindex) {\n    let that = {\n        self: this,\n        page: this.page,\n        list: this.list,\n        item: this.list[_dindex],\n        dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onDBLClick) {\n        this.config.body.onDBLClick.call(that);\n    }\n\n    that = null;\n};\n\nexport default {\n    init: init,\n    repaint: repaint,\n    repaintCell: repaintCell,\n    repaintRow: repaintRow,\n    updateRowState: updateRowState,\n    updateRowStateAll: updateRowStateAll,\n    scrollTo: scrollTo,\n    blur: blur,\n    moveFocus: moveFocus,\n    inlineEdit: inlineEdit,\n    getExcelString: getExcelString,\n    toggleCollapse: toggleCollapse,\n    click: click,\n    dblClick: dblClick\n};"]}