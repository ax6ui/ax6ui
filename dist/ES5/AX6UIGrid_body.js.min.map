{"version":3,"sources":["AX6UIGrid_body.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_util","_AX6UIGrid_data","_AX6UIGrid_page","_AX6UIGrid_inline_editor","_AX6UIGrid_collector","_AX6UIGrid_formatter","_AX6UIGrid_scroller","columnSelect","focusClear","self","this","_column","c","focusedColumn","$","panel","panelName","find","dindex","rowIndex","colIndex","removeAttr","clear","selectedColumn","init","column","isInlineEditing","editKey","inlineEditing","doindex","colspan","xvar","end","inlineEdit","deActive","call","selectedRange","start","trl","range","r","s","rows","length","e","frozenRowIndex","_panels","push","frozenColumnIndex","join","min","max","cell","instanceId","getAttribute","update","Number","_AX6Util2","default","stopEvent","columnSelector","off","on","_jqmin2","document","body","css","updateRowState","_states","_dindex","_doindex","_data","cfg","config","processor","selected","list","i","livePanelKeys","attr","columnKeys","di","pi","proxyList","doi","__original_index__","cellChecked","key","checked","forEach","_state","updateRowStateAll","row","col","bodyRowMap","that","page","disableSelection","item","type","editor","trueValue","value","falseValue","getValue","_AX6UIGrid_data2","setValue","newValue","editorConfig","onClick","rowSelector","selectedDataIndexs","clearSelect","select","undefined","lineNumber","tree-control","toggleCollapse","targetClick","columnKey","__isGrouping","isObject","onDBLClick","colGroup","active","targetDBLClick","param","target","t","contextMenu","ax5","ui","menu","element","popup","filter","popupFilter","originalEvent","touchmoved","resetFrozenColumn","virtualScrollYCountMargin","Math","floor","throttle","opts","noRepaint","virtualScrollX","repaint","callback","virtualScrollAcceleratedDelayTime","__throttledScroll","dividedBodyRowObj","divideTableByFrozenColumnIndex","bodyRowTable","_width","asideBodyRowData","l","dataTable","data","_col","showLineNumber","extend","lineNumberColumnWidth","cols","label","rowSelectorColumnWidth","rowspan","columnAttr","leftBodyRowData","showRowSelector","leftData","rightData","_AX6UIGrid_util2","bodyGroupingTable","width","dividedBodyGroupingObj","asideBodyGroupingData","bodyGroupingData","makeBodyRowMap","footSumTable","footSumData","dividedFootSumObj","getFieldValue","_list","_item","_index","_value","_returnPlainText","_key","tagsToReplace","<",">","leftBodyGroupingData","_editor","_AX6UIGrid_inline_editor2","editMode","__origin_index__","isFunction","disabled","getHtml","formatter","_AX6UIGrid_formatter2","returnValue","valueProcessor","test","replace","tag","treeControl","__value","indentNodeHtml","tree","depth","indentWidth","keys","collapse","icons","collapsedArrow","openedArrow","arrowWidth","children","iconWidth","groupIcon","itemIcon","collapsedGroupIcon","getGroupingValue","_label","__groupingList","__groupingBy","collector","getSumFieldValue","_reset","paintStartRowIndex","paintStartColumnIndex","virtualScrollY","virtualPaintStartRowIndex","position","top","bodyTrHeight","paintRowCountTopMargin","isNaN","nopaintLeftColumnsWidth","nopaintRightColumnsWidth","bodyScrollLeft","left","ci","_ex","_sx","bodyWidth","paintEndColumnIndex","scrollContentWidth","padding-left","padding-right","isFirstPaint","headerColGroup","bodyRowData","leftFootSumData","align","ceil","paintRowCountMargin","virtualPaintRowCount","abs","paintRowCount","dataRowCount","splice","getTableByStartEndColumnIndex","concat","footSum","grouping","scrollContentHeight","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","cgl","dl","tri","cl","cellHeight","colAlign","isScrolled","columnHeight","columnBorderWidth","stripeString","len","isGroupingRow","rowTable","odi","trStyleClass","index","attrs","_focusedColumn","_selectedColumn","tdCSS_class","styleClass","multiLine","_cellHeight","lineHeight","columnPadding","empty","get","innerHTML","repaintSum","bodyAlign","isFootSum","tblRowMaps","token","hasMergeTd","tableTrs","tableTrTds","tdObj","trMaps","mergeCellsBody","ri","rl","prevTokenColIndexs","text","hasFalse","util","search","mergeCells","ti","remove","_loop2","_loop","scrollConfig","addClass","frozenScrollConfig","asidePanelWidth","needToPaintSum","asideColGroup","leftHeaderColGroup","slice","rightSum","repaintCell","_panelName","updateCell","updateWith","updateColumnKey","_AX6UIGrid_page2","statusUpdate","updateWithCell","_newValue","_rowIndex","_colIndex","html","height","replaceGroupTr","repaintRow","replaceTr","moveFocus","while_i","moveResult","timeoutUnUse","nPanelInfo","scrollTo","focus","UD","_dy","originalColumn","isScrollPanel","_dx","findPanelByColumnIndex","newTop","resize","_AX6UIGrid_scroller2","LR","isScrollTo","containerPanelName","scrollLeft","GRID","header","$column","newLeft","bodyGroupingMap","outerWidth","_position","INDEX","_initValue","UP","LEFT","RIGHT","HOME","initValue","isNothing","END","$inlineEditorCell","$inlineEditor","_e","_msg","editorValue","__editor","_type","action","ax5picker","useReturnToSave","originalValue","tagName","val","number","CANCEL","RETURN","bindedAx5ui","ax5select","keydown","_options","ESC","k","getSum","_collapse","getProxyList","dblClick","po","getExcelString","click","blur"],"mappings":"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","file":"AX6UIGrid_body.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"./AX6Util\";\nimport UTIL from \"./AX6UIGrid_util\";\nimport DATA from \"./AX6UIGrid_data\";\nimport PAGE from \"./AX6UIGrid_page\";\n\nimport INLINE_EDITOR from \"./AX6UIGrid_inline_editor\";\nimport COLLECTOR from \"./AX6UIGrid_collector\";\nimport FORMATTER from \"./AX6UIGrid_formatter\";\nimport SCROLLER from \"./AX6UIGrid_scroller\";\n\nconst columnSelect = {\n    focusClear: function () {\n        let self = this, _column;\n        for (let c in self.focusedColumn) {\n            _column = self.focusedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .removeAttr('data-ax6grid-column-focused');\n            }\n        }\n        self.focusedColumn = {};\n    },\n    clear: function () {\n        let self = this, _column;\n        for (let c in self.selectedColumn) {\n            _column = self.selectedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .removeAttr('data-ax6grid-column-selected');\n            }\n        }\n        self.selectedColumn = {};\n    },\n    init: function (column) {\n        let self = this;\n        if (this.isInlineEditing) {\n            for (let editKey in this.inlineEditing) {\n                if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                    return this;\n                }\n            }\n        }\n\n        // focus\n        columnSelect.focusClear.call(self);\n        self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n            panelName: column.panelName,\n            dindex: column.dindex,\n            doindex: column.doindex,\n            rowIndex: column.rowIndex,\n            colIndex: column.colIndex,\n            colspan: column.colspan\n        };\n\n        // select\n        columnSelect.clear.call(self);\n        self.xvar.selectedRange = {\n            start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n            end: null\n        };\n        self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n            if (data) {\n                return false;\n            } else {\n                return {\n                    panelName: column.panelName,\n                    dindex: column.dindex,\n                    doindex: column.doindex,\n                    rowIndex: column.rowIndex,\n                    colIndex: column.colIndex,\n                    colspan: column.colspan\n                }\n            }\n        })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n        this.$.panel[column.panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + column.dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + column.colIndex + '\"]')\n            .attr('data-ax6grid-column-focused', \"true\")\n            .attr('data-ax6grid-column-selected', \"true\");\n\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this, \"RETURN\");\n        }\n    },\n    update: function (column) {\n        const self = this;\n        let dindex, doindex, colIndex, rowIndex, trl;\n\n        self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n        columnSelect.clear.call(self);\n\n        let range = {\n            r: {\n                s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n            },\n            c: {\n                s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n            }\n        };\n\n        dindex = range.r.s;\n        for (; dindex <= range.r.e; dindex++) {\n\n\n            trl = this.bodyRowTable.rows.length;\n            rowIndex = 0;\n            for (; rowIndex < trl; rowIndex++) {\n                colIndex = range.c.s;\n                for (; colIndex <= range.c.e; colIndex++) {\n                    var _panels = [],\n                        panelName = \"\";\n\n                    if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                    if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    panelName = _panels.join(\"-\");\n\n                    self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                        panelName: panelName,\n                        dindex: dindex,\n                        rowIndex: rowIndex,\n                        colIndex: colIndex,\n                        colspan: column.colspan\n                    };\n\n                    _panels = null;\n                    panelName = null;\n                }\n            }\n        }\n        dindex = null;\n        doindex = null;\n        colIndex = null;\n        rowIndex = null;\n\n        for (var c in self.selectedColumn) {\n            var _column = self.selectedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .attr('data-ax6grid-column-selected', 'true');\n            }\n        }\n\n    }\n};\n\nconst columnSelector = {\n    \"on\": function (cell) {\n        let self = this;\n\n        if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n            return;\n        }\n\n        columnSelect.init.call(self, cell);\n\n        this.$[\"container\"][\"body\"]\n            .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax6grid-column-attr=\"default\"]', function (e) {\n                if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n                    columnSelect.update.call(self, {\n                        panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n                        doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                    U.stopEvent(e);\n                }\n            })\n            .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            })\n            .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            });\n\n        jQuery(document.body)\n            .attr('unselectable', 'on')\n            .css('user-select', 'none')\n            .on('selectstart', false);\n    },\n    \"off\": function () {\n\n        this.$[\"container\"][\"body\"]\n            .off(\"mousemove.ax5grid-\" + this.instanceId)\n            .off(\"mouseup.ax5grid-\" + this.instanceId)\n            .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n        jQuery(document.body)\n            .removeAttr('unselectable')\n            .css('user-select', 'auto')\n            .off('selectstart');\n    }\n};\n\nconst updateRowState = function (_states, _dindex, _doindex, _data) {\n    let self = this,\n        cfg = this.config,\n        processor = {\n            \"selected\": function (_dindex, _doindex) {\n                if (this.list[_doindex]) {\n                    let i = this.$.livePanelKeys.length;\n                    while (i--) {\n                        this.$.panel[this.$.livePanelKeys[i]]\n                            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                            .attr(\"data-ax6grid-selected\", this.list[_doindex][cfg.columnKeys.selected]);\n                    }\n                }\n            },\n            \"selectedClear\": function () {\n                let di = this.list.length;\n                let pi;\n\n                if (!this.proxyList) {\n                    while (di--) {\n                        if (this.list[di][cfg.columnKeys.selected]) {\n                            pi = this.$.livePanelKeys.length;\n                            while (pi--) {\n                                this.$.panel[this.$.livePanelKeys[pi]]\n                                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                                    .attr(\"data-ax6grid-selected\", false);\n                            }\n                        }\n                        this.list[di][cfg.columnKeys.selected] = false;\n                    }\n                } else {\n                    while (di--) {\n                        this.list[di][cfg.columnKeys.selected] = false;\n                    }\n                    di = this.proxyList.length;\n                    while (di--) {\n                        if(this.list[doi][cfg.columnKeys.selected]){\n                            pi = this.$.livePanelKeys.length;\n                            while (pi--) {\n                                this.$.panel[this.$.livePanelKeys[pi]]\n                                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                                    .attr(\"data-ax6grid-selected\", false);\n                            }\n                        }\n\n                        this.proxyList[di][cfg.columnKeys.selected] = false;\n                        let doi = this.proxyList[di].__original_index__;\n                    }\n                }\n            },\n            \"cellChecked\": function (_dindex, _doindex, _data) {\n                let key = _data.key,\n                    rowIndex = _data.rowIndex,\n                    colIndex = _data.colIndex;\n\n                let panelName = (function () {\n                    let _panels = [];\n                    if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                    if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    return _panels.join(\"-\");\n                }).call(this);\n\n                this.$.panel[panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                    .find('[data-ax6grid-column-rowIndex=\"' + rowIndex + '\"][data-ax6grid-column-colIndex=\"' + colIndex + '\"]')\n                    .find('[data-ax6grid-editor=\"checkbox\"]')\n                    .attr(\"data-ax6grid-checked\", '' + _data.checked);\n            }\n        };\n\n    if(typeof _doindex === \"undefined\") _doindex = _dindex;\n\n    _states.forEach(function (_state) {\n        if (!processor[_state]) throw 'invaild state name';\n        processor[_state].call(self, _dindex, _doindex, _data);\n    });\n};\n\nconst updateRowStateAll = function (_states, _data) {\n    let self = this,\n        cfg = this.config,\n        processor = {\n            \"selected\": function (_dindex) {\n                repaint.call(this, true);\n            }\n        };\n\n    _states.forEach(function (_state) {\n        if (!processor[_state]) throw 'invaild state name';\n        processor[_state].call(self, _data);\n    });\n};\n\nconst init = function () {\n    let self = this;\n\n    this.$[\"container\"][\"body\"].on(\"click\", '[data-ax6grid-column-attr]', function (e) {\n        let panelName, attr,\n            row, col, dindex, doindex, rowIndex, colIndex, disableSelection,\n            targetClick = {\n                \"default\": function (_column) {\n                    let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                        that = {\n                            self: self,\n                            page: self.page,\n                            list: self.list,\n                            item: self.list[_column.doindex],\n                            dindex: _column.dindex,\n                            doindex: _column.doindex,\n                            rowIndex: _column.rowIndex,\n                            colIndex: _column.colIndex,\n                            column: column,\n                            value: self.list[_column.dindex][column.key]\n                        };\n\n                    if (column.editor && column.editor.type == \"checkbox\") { // todo : INLINE_EDITOR에서 처리 할수 있도록 구문 변경 필요.\n                        let value = DATA.getValue.call(self, _column.dindex, _column.doindex, column.key),\n                            checked, newValue;\n\n                        if (column.editor.config && column.editor.config.trueValue) {\n                            if (checked = !(value == column.editor.config.trueValue)) {\n                                newValue = column.editor.config.trueValue;\n                            } else {\n                                newValue = column.editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        DATA.setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);\n\n                        updateRowState.call(self, [\"cellChecked\"], _column.dindex, _column.doindex, {\n                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                            editorConfig: column.editor.config, checked: checked\n                        });\n                    } else {\n                        if (self.config.body.onClick) {\n                            self.config.body.onClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n                    let item = self.list[_column.doindex];\n                    if (item[self.config.columnKeys.disableSelection]) {\n                        return false;\n                    }\n\n                    if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {\n                        updateRowState.call(self, [\"selectedClear\"]);\n                        DATA.clearSelect.call(self);\n                    }\n\n                    DATA.select.call(self, _column.dindex, _column.doindex, undefined, {\n                        internalCall: true\n                    });\n                    updateRowState.call(self, [\"selected\"], _column.dindex, _column.doindex);\n                },\n                \"lineNumber\": function (_column) {\n\n                },\n                \"tree-control\": function (_column, _el) {\n                    //console.log(_column);\n                    toggleCollapse.call(self, _column.dindex, _column.doindex);\n                }\n            };\n\n        panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n        attr = this.getAttribute(\"data-ax6grid-column-attr\");\n        row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n        col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n        rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n        if (attr in targetClick) {\n            targetClick[attr]({\n                panelName: panelName,\n                attr: attr,\n                row: row,\n                col: col,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            }, this);\n        }\n    });\n    this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax6grid-column-attr]', function (e) {\n        let panelName, attr,\n            row, col, dindex, doindex, rowIndex, colIndex,\n            targetDBLClick = {\n                \"default\": function (_column) {\n                    if (self.isInlineEditing) {\n                        for (let columnKey in self.inlineEditing) {\n                            if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                return this;\n                            }\n                        }\n                    }\n\n                    let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n                    if (column) {\n                        if (!self.list[dindex].__isGrouping) {\n                            value = DATA.getValue.call(self, dindex, doindex, column.key);\n                        }\n                    }\n\n                    let editor = self.colGroup[_column.colIndex].editor;\n                    if (U.isObject(editor)) {\n                        inlineEdit.active.call(self, self.focusedColumn, e, value);\n                    } else {\n                        // 더블클릭 실행\n                        if (self.config.body.onDBLClick) {\n                            let that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.dindex],\n                                dindex: _column.dindex,\n                                doindex: _column.doindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n                            self.config.body.onDBLClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n\n                },\n                \"lineNumber\": function (_column) {\n\n                }\n            };\n\n        panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n        attr = this.getAttribute(\"data-ax6grid-column-attr\");\n        row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n        col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n        rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n        if (attr in targetDBLClick) {\n            targetDBLClick[attr]({\n                panelName: panelName,\n                attr: attr,\n                row: row,\n                col: col,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            });\n        }\n    });\n\n    if (this.config.contextMenu) {\n        this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n            let target, dindex, doindex, rowIndex, colIndex, item, column, param = {};\n\n            target = U.findParentNode(e.target, function (t) {\n                if (t.getAttribute(\"data-ax6grid-column-attr\")) {\n                    return true;\n                }\n            });\n\n            if (target) {\n                // item 찾기\n                rowIndex = Number(target.getAttribute(\"data-ax6grid-column-rowIndex\"));\n                colIndex = Number(target.getAttribute(\"data-ax6grid-column-colIndex\"));\n                dindex = Number(target.getAttribute(\"data-ax6grid-data-index\"));\n                doindex = Number(target.getAttribute(\"data-ax6grid-data-o-index\"));\n                column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n                item = self.list[dindex];\n            }\n\n            if (!self.contextMenu) {\n                self.contextMenu = new ax5.ui.menu();\n            }\n\n            self.contextMenu.setConfig(self.config.contextMenu);\n\n            param = {\n                element: target,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex,\n                item: item,\n                column: column,\n                gridSelf: self\n            };\n\n            self.contextMenu.popup(e, {\n                filter: function () {\n                    return self.config.contextMenu.popupFilter.call(this, this, param);\n                },\n                param: param\n            });\n\n            U.stopEvent(e.originalEvent);\n            target = null;\n            dindex = null;\n            doindex = null;\n            rowIndex = null;\n            colIndex = null;\n            item = null;\n            column = null;\n            param = null;\n        });\n    }\n\n    this.$[\"container\"][\"body\"]\n        .on(\"mousedown\", '[data-ax6grid-column-attr=\"default\"]', function (e) {\n            if (self.xvar.touchmoved) return false;\n            if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n                columnSelector.on.call(self, {\n                    panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n                    dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n                    doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n                    rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n                    colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n                    colspan: Number(this.getAttribute(\"colspan\"))\n                });\n            }\n        })\n        .on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n    resetFrozenColumn.call(this);\n\n    // 그리드 바디에 출력할 여유 카운트\n    this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n    this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n\n    if (this.config.virtualScrollAccelerated) {\n        this.__throttledScroll = U.throttle(function (css, opts) {\n            if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n                repaint.call(this);\n            } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n                repaint.call(this);\n            }\n            if (opts.callback) {\n                opts.callback();\n            }\n        }, this.config.virtualScrollAcceleratedDelayTime);\n    } else {\n        this.__throttledScroll = false;\n    }\n};\n\nconst resetFrozenColumn = function () {\n    let cfg = this.config,\n        dividedBodyRowObj = UTIL.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n    this.asideBodyRowData = (function (dataTable) {\n        let data = {rows: []};\n        for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n            data.rows[i] = {cols: []};\n            if (i === 0) {\n                let col = {\n                    label: \"\",\n                    colspan: 1,\n                    rowspan: dataTable.rows.length,\n                    colIndex: null\n                }, _col = {};\n\n                if (cfg.showLineNumber) {\n                    _col = jQuery.extend({}, col, {\n                        width: cfg.lineNumberColumnWidth,\n                        _width: cfg.lineNumberColumnWidth,\n                        columnAttr: \"lineNumber\",\n                        label: \"&nbsp;\", key: \"__d-index__\"\n                    });\n                    data.rows[i].cols.push(_col);\n                }\n                if (cfg.showRowSelector) {\n                    _col = jQuery.extend({}, col, {\n                        width: cfg.rowSelectorColumnWidth,\n                        _width: cfg.rowSelectorColumnWidth,\n                        columnAttr: \"rowSelector\",\n                        label: \"\", key: \"__d-checkbox__\"\n                    });\n                    data.rows[i].cols.push(_col);\n                }\n            }\n        }\n\n        return data;\n    }).call(this, this.bodyRowTable);\n\n    //console.log(dividedBodyRowObj);\n\n    this.leftBodyRowData = dividedBodyRowObj.leftData;\n    this.bodyRowData = dividedBodyRowObj.rightData;\n\n    if (cfg.body.grouping) {\n        let dividedBodyGroupingObj = UTIL.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n        this.asideBodyGroupingData = (function (dataTable) {\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyGroupingTable);\n        this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n        this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n        this.bodyGroupingMap = UTIL.makeBodyRowMap.call(this, this.bodyGroupingTable);\n    }\n\n    this.leftFootSumData = {};\n    this.footSumData = {};\n    if (this.config.footSum) {\n        let dividedFootSumObj = UTIL.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n        this.leftFootSumData = dividedFootSumObj.leftData;\n        this.footSumData = dividedFootSumObj.rightData;\n    }\n};\n\nconst getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n\n    let _key = _col.key, tagsToReplace = {\n        '<': '&lt;',\n        '>': '&gt;'\n    };\n\n    if (_key === \"__d-index__\") {\n        return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n    }\n    else if (_key === \"__d-checkbox__\") {\n        return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n    }\n    else {\n        if (_col.editor && (function (_editor) {\n                if (_editor.type in INLINE_EDITOR) {\n                    return (INLINE_EDITOR[_editor.type].editMode == \"inline\");\n                }\n                return false;\n            })(_col.editor)) { // editor가 inline타입이라면\n\n            _value = _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n\n            if (U.isFunction(_col.editor.disabled)) {\n                if (_col.editor.disabled.call({\n                        list: _list,\n                        dindex: _index,\n                        item: _list[_index],\n                        key: _key,\n                        value: _value\n                    })) {\n                    return _value;\n                }\n            }\n\n            // print editor\n            return _returnPlainText ? _value : INLINE_EDITOR[_col.editor.type].getHtml(this, _col.editor, _value);\n        }\n\n        const valueProcessor = {\n            \"formatter\": function () {\n                let that = {\n                    key: _key,\n                    value: _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key),\n                    dindex: _index,\n                    item: _item,\n                    list: _list\n                };\n                if (U.isFunction(_col.formatter)) {\n                    return _col.formatter.call(that);\n                } else {\n                    return FORMATTER[_col.formatter].call(that);\n                }\n            },\n            \"default\": function () {\n                let returnValue = \"\";\n\n                if (typeof _value !== \"undefined\") {\n                    returnValue = _value;\n                } else {\n                    if (/[\\.\\[\\]]/.test(_key)) {\n                        _value = DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n                    }else{\n                        _value = _item[_key];\n                    }\n\n                    if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                }\n\n                // 키값이 Boolean일때 오류 발생하여 수정.\n                return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                    return tagsToReplace[tag] || tag;\n                });\n            },\n            \"treeControl\": function (__value) {\n                let cfg = this.config,\n                    keys = this.config.tree.columnKeys,\n                    indentNodeHtml = '';\n\n                if (_item[keys.children].length) {\n                    indentNodeHtml += '<a ' +\n                        'data-ax6grid-data-index=\"' + _index + '\" ' +\n                        'data-ax6grid-column-attr=\"tree-control\" ' +\n                        'data-ax6grid-tnode-arrow=\"\" ' +\n                        'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                        '>';\n                    indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n                    indentNodeHtml += '</a>';\n                } else {\n                    indentNodeHtml += '<span ' +\n                        'data-ax6grid-tnode-arrow=\"\" ' +\n                        'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                        '>&nbsp;</span>';\n                }\n\n                indentNodeHtml += '<span ' +\n                    'data-ax6grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n                    'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n                    '>';\n                indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n                indentNodeHtml += '</span>';\n\n                return indentNodeHtml + __value;\n            }\n        };\n\n        let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n        if (this.config.tree.use && _col.treeControl) {\n            returnValue = valueProcessor.treeControl.call(this, returnValue);\n        }\n\n        return returnValue;\n    }\n\n};\n\nconst getGroupingValue = function (_item, _index, _col) {\n    let value, that, _key = _col.key, _label = _col.label;\n\n    if (typeof _key === \"undefined\") {\n        that = {\n            key: _key,\n            list: _item.__groupingList,\n            groupBy: _item.__groupingBy\n        };\n        if (U.isFunction(_label)) {\n            value = _label.call(that);\n        } else {\n            value = _label;\n        }\n        _item[_col.colIndex] = value;\n        return value;\n    }\n    else if (_key === \"__d-index__\") {\n        return '';\n    }\n    else if (_key === \"__d-checkbox__\") {\n        return '';\n    }\n    else {\n        if (_col.collector) {\n            that = {\n                key: _key,\n                list: _item.__groupingList\n            };\n            if (U.isFunction(_col.collector)) {\n                value = _col.collector.call(that);\n            } else {\n                value = COLLECTOR[_col.collector].call(that);\n            }\n            _item[_col.colIndex] = value;\n\n            if (_col.formatter) {\n                that.value = value;\n                if (U.isFunction(_col.formatter)) {\n                    return _col.formatter.call(that);\n                } else {\n                    return FORMATTER[_col.formatter].call(that);\n                }\n            } else {\n                return value;\n            }\n        } else {\n            return \"&nbsp;\";\n        }\n    }\n};\n\nconst getSumFieldValue = function (_list, _col) {\n    let _key = _col.key, _label = _col.label;\n    //, _collector, _formatter\n    if (typeof _key === \"undefined\") {\n        return _label;\n    }\n    else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n        return '&nbsp;';\n    }\n    else {\n        if (_col.collector) {\n            let that = {\n                    key: _key,\n                    list: _list\n                },\n                value;\n\n            if (U.isFunction(_col.collector)) {\n                value = _col.collector.call(that);\n            } else {\n                value = COLLECTOR[_col.collector].call(that);\n            }\n\n            if (_col.formatter) {\n                that.value = value;\n                if (U.isFunction(_col.formatter)) {\n                    return _col.formatter.call(that);\n                } else {\n                    return FORMATTER[_col.formatter].call(that);\n                }\n            } else {\n                return value;\n            }\n\n        } else {\n            return \"&nbsp;\";\n        }\n    }\n};\n\nconst repaint = function (_reset) {\n    // debugger;\n    let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n    /// repaint reset 타입이면 고정컬럼을 재조정\n    if (_reset) {\n        resetFrozenColumn.call(this);\n        // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n        this.xvar.paintStartRowIndex = undefined;\n        this.xvar.paintStartColumnIndex = undefined;\n    }\n\n    /// 출력시작 인덱스\n    let paintStartRowIndex, virtualPaintStartRowIndex;\n\n    if (this.config.virtualScrollY) {\n        virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n            paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n        }\n    }\n    else {\n        paintStartRowIndex = this.xvar.frozenRowIndex;\n    }\n\n    if (isNaN(paintStartRowIndex)) return this;\n\n    let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n    let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n    if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n        for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n            // bodyScrollLeft\n            this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n            this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n            if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n                paintStartColumnIndex = ci;\n            }\n            if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n                paintEndColumnIndex = ci;\n\n                if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n                if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n            }\n        }\n\n        if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n        if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n        this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    }\n\n    let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n        headerColGroup = this.headerColGroup,\n        asideBodyRowData = this.asideBodyRowData,\n        leftBodyRowData = this.leftBodyRowData,\n        bodyRowData = this.bodyRowData,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount, virtualPaintRowCount;\n\n    if (!this.config.virtualScrollY) {\n        virtualPaintRowCount = paintRowCount = list.length;\n    } else {\n        virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n        paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n    }\n\n    // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n    if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n        paintStartRowIndex = this.xvar.paintStartRowIndex;\n    }\n\n    if (\n        this.xvar.dataRowCount === list.length\n        && this.xvar.paintStartRowIndex === paintStartRowIndex\n        && this.xvar.paintRowCount === paintRowCount\n        && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n        && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n    ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n    // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n    if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n        headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n        bodyRowData = UTIL.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n        if (cfg.body.grouping) {\n            bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n        }\n        if (cfg.footSum) {\n            footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n        }\n        if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n            this.needToPaintSum = true;\n        }\n    }\n\n    /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n    this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n    /// 사용된 패널들의 키 모음\n    this.$.livePanelKeys = [];\n\n    // 그리드 바디 영역 페인트 함수\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _groupRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey];\n\n        if (!isFirstPaint && !_scrollConfig) {\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return false;\n        }\n\n        let SS = [],\n            cgi, cgl, di, dl, tri, trl, ci, cl, col,\n            cellHeight,\n            colAlign,\n            isScrolled = (function () {\n                // 스크롤값이 변경되거나 처음 호출되었습니까?\n                if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                    _scrollConfig = {\n                        paintStartRowIndex: 0,\n                        paintRowCount: _list.length\n                    };\n                    return false;\n                } else {\n                    return true;\n                }\n            })(),\n            stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight) + 'px';\n\n        if (isScrolled) {\n            SS.push('<div style=\"background:repeating-linear-gradient(to top, ' + stripeString + ');' +\n                'font-size:0;' +\n                'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n        }\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        di = _scrollConfig.paintStartRowIndex;\n\n        for (dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n\n            if (_list[di]) {\n                let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                    SS.push('<tr class=\"tr-' + (di % 4) + '', (cfg.body.trStyleClass) ? (U.isFunction(cfg.body.trStyleClass)) ? ' ' + cfg.body.trStyleClass.call({\n                            item: _list[di],\n                            index: di\n                        }, _list[di], di) : ' ' + cfg.body.trStyleClass : '','\"',\n\n                        (isGroupingRow) ? ' data-ax6grid-grouping-tr=\"true\"' : '',\n                        ' data-ax6grid-tr-data-index=\"' + di + '\"',\n                        ' data-ax6grid-tr-data-o-index=\"' + odi + '\"',\n                        ' data-ax6grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                        ' data-ax6grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                        '>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                        })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                    SS.push('</tr>');\n                }\n            }\n        }\n        SS.push('</table>');\n\n        if (isScrolled && _list.length) {\n            SS.push('<div style=\"background:repeating-linear-gradient(to bottom, ' + stripeString + ');' +\n                'font-size:0;' +\n                'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n        }\n\n\n        _elTarget.empty();\n        SS = SS.join('');\n\n        _elTarget.get(0).innerHTML = SS;\n\n        this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n        return true;\n    };\n\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey];\n\n        if (!isFirstPaint && !_scrollConfig) {\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return false;\n        }\n\n        let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty();\n        SS = SS.join('');\n\n        _elTarget.get(0).innerHTML = SS;\n\n        this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n        return true;\n    };\n\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let tblRowMaps = [];\n        let _elTarget = this.$.panel[_elTargetKey];\n        let token = {}, hasMergeTd;\n\n        // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n        let tableTrs = _elTarget.find(\"tr\");\n        for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n            let tableTrTds, trMaps;\n            tableTrTds = tableTrs[ri].childNodes;\n            trMaps = [];\n\n            for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n                let tdObj = {\n                    \"$\": jQuery(tableTrTds[ci])\n                };\n\n                if (tdObj[\"$\"].attr(\"data-ax6grid-column-col\") != \"null\") {\n                    tdObj.dindex = tdObj[\"$\"].attr(\"data-ax6grid-data-index\");\n                    tdObj.tri = tdObj[\"$\"].attr(\"data-ax6grid-column-row\");\n                    tdObj.ci = tdObj[\"$\"].attr(\"data-ax6grid-column-col\");\n                    tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-rowIndex\");\n                    tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-colIndex\");\n                    tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                    tdObj.text = tdObj[\"$\"].text();\n                    trMaps.push(tdObj);\n                }\n\n                tdObj = null;\n            }\n            tblRowMaps.push(trMaps);\n        }\n\n        // 두줄이상 일 때 의미가 있으니.\n        if (tblRowMaps.length > 1) {\n            hasMergeTd = false;\n            for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                let prevTokenColIndexs = [];\n\n                for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                    // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n\n                    if (!_colGroup[ci].editor && (() => {\n                            if (U.isArray(cfg.body.mergeCells)) {\n                                return ax5.util.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n                            } else {\n                                return true;\n                            }\n                        })()) {\n\n                        // 앞줄과 값이 같다면.\n                        if (token[ci] && (() => {\n                                if (prevTokenColIndexs.length > 0) {\n                                    let hasFalse = true;\n                                    prevTokenColIndexs.forEach(function (ti) {\n                                        if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                                            hasFalse = false;\n                                        }\n                                    });\n                                    return hasFalse;\n                                } else {\n                                    return true;\n                                }\n                            })() && token[ci].text == tblRowMaps[ri][ci].text) {\n                            tblRowMaps[ri][ci].rowspan = 0;\n                            tblRowMaps[token[ci].ri][ci].rowspan++;\n                            hasMergeTd = true;\n                        } else {\n                            token[ci] = {\n                                ri: ri,\n                                ci: ci,\n                                text: tblRowMaps[ri][ci].text\n                            };\n                        }\n\n                        prevTokenColIndexs.push(ci);\n                    }\n                }\n            }\n\n            // rowspan을 다 구했으면 적용합니다.\n            if (hasMergeTd) {\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                        if (tblRowMaps[ri][ci].rowspan == 0) {\n                            tblRowMaps[ri][ci][\"$\"].remove();\n                        } else if (tblRowMaps[ri][ci].rowspan > 1) {\n                            tblRowMaps[ri][ci][\"$\"]\n                                .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                                .addClass(\"merged\");\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    let scrollConfig = {\n        paintStartRowIndex: paintStartRowIndex,\n        paintRowCount: paintRowCount,\n        paintStartColumnIndex: paintStartColumnIndex,\n        paintEndColumnIndex: paintEndColumnIndex,\n        nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n        nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n        bodyTrHeight: this.xvar.bodyTrHeight,\n        virtualScrollX: this.config.virtualScrollX,\n        virtualScrollY: this.config.virtualScrollY,\n    };\n    let frozenScrollConfig = jQuery.extend({}, scrollConfig, {\n        paintStartRowIndex: 0,\n        paintRowCount: this.xvar.frozenRowIndex\n    });\n\n    // aside\n    if (cfg.asidePanelWidth > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n\n        repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum) {\n            // 바닥 요약 (footSum에 대한 aside 사용안함)\n            repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n        }\n    }\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n\n        repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n        }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > 0) {\n        // 상단 행고정\n        repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n    repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n    // 바닥 요약\n    if (cfg.footSum && this.needToPaintSum) {\n        repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n    // right\n    if (cfg.rightSum) {\n        // todo : right 표현 정리\n    }\n\n    /// mergeCells\n    if (cfg.body.mergeCells && this.list.length) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n            mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n    }\n\n    this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n    this.xvar.paintStartRowIndex = paintStartRowIndex;\n    this.xvar.paintRowCount = paintRowCount;\n    this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n    this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n    this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n    this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n    this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n    this.xvar.dataRowCount = list.length;\n    this.needToPaintSum = false;\n\n    PAGE.statusUpdate.call(this);\n};\n\nconst repaintCell = function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {\n    let self = this,\n        cfg = this.config,\n        list = this.list;\n\n    let updateCell = this.$[\"panel\"][_panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + _rowIndex + '\"][data-ax6grid-column-colindex=\"' + _colIndex + '\"]')\n            .find('[data-ax6grid-cellholder]'),\n        colGroup = this.colGroup,\n        col = colGroup[_colIndex];\n\n    updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n    if (col.editor && col.editor.updateWith) {\n        col.editor.updateWith.forEach(function (updateColumnKey) {\n            colGroup.forEach(function (col) {\n                if (col.key == updateColumnKey) {\n                    let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                        panelName = UTIL.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                        updateWithCell = self.$[\"panel\"][panelName]\n                            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                            .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                            .find('[data-ax6grid-cellholder]');\n\n                    updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                }\n            });\n        });\n    }\n\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        headerColGroup = this.headerColGroup,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n        headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n        if (cfg.body.grouping) {\n            bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n        }\n        if (cfg.footSum) {\n            footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n        }\n    }\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        let tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty().get(0).innerHTML = SS.join('');\n        return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            di, dl, tri, trl, ci, cl,\n            col, cellHeight, colAlign;\n\n        for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n            if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                let rowTable = _groupRow;\n                SS = [];\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                        })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                }\n                _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n            }\n        }\n    };\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n            replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                paintStartRowIndex: 0,\n                paintRowCount: this.xvar.frozenRowIndex,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            });\n        }\n\n        replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n        }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n};\n\nconst repaintRow = function (_dindex) {\n    let self = this,\n        cfg = this.config,\n        list = this.list;\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        asideBodyRowData = this.asideBodyRowData,\n        leftBodyRowData = this.leftBodyRowData,\n        bodyRowData = this.bodyRowData,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty().get(0).innerHTML = SS.join('');\n        return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n            _scrollConfig = {\n                paintStartRowIndex: 0,\n                paintRowCount: _list.length\n            };\n        }\n\n        for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n            if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                let rowTable = _groupRow;\n                SS = [];\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                        })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                }\n                _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n            }\n        }\n    };\n    let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow,\n            odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n            for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                col = rowTable.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-data-index=\"' + di + '\" ',\n                    'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        let attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        let tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    item: _list[di],\n                                    index: di\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-data-index=\"' + di + '\" ',\n                'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n        }\n\n        _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n    };\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n        }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n    } else {\n        replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n    }\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            else {\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        else {\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n        }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n    }\n};\n\nconst scrollTo = function (css, opts) {\n    let self = this;\n    if (typeof opts === \"undefined\") opts = {timeoutUnUse: false};\n    if (this.isInlineEditing) {\n        for (var key in this.inlineEditing) {\n            //if(this.inlineEditing[key].editor.type === \"select\") {}\n            // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n            inlineEdit.deActive.call(this, \"ESC\", key);\n        }\n    }\n\n    if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n        this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n        this.$.panel[\"left-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n        this.$.panel[\"top-body-scroll\"].css({left: css.left});\n    }\n\n    this.$.panel[\"body-scroll\"].css(css);\n\n    if (this.config.footSum && \"left\" in css) {\n        this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n    }\n\n    // 바디 리페인팅 this.__throttledScroll 은 body init 에서 초기화\n    if (this.__throttledScroll) {\n        this.__throttledScroll(css, opts);\n    } else {\n        if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n            repaint.call(this);\n        } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n            repaint.call(this);\n        }\n        if (opts.callback) {\n            opts.callback();\n        }\n    }\n};\n\nconst blur = function () {\n    columnSelect.focusClear.call(this);\n    columnSelect.clear.call(this);\n    if (this.isInlineEditing) {\n        inlineEdit.deActive.call(this);\n    }\n};\n\nconst moveFocus = function (_position) {\n    let focus = {\n        \"UD\": function (_dy) {\n            let moveResult = true,\n                focusedColumn, originalColumn, while_i,\n                nPanelInfo;\n\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n\n            if (!focusedColumn) return false;\n\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n            if (_dy > 0) {\n                // 아래로\n                if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                    focusedColumn.dindex = focusedColumn.dindex + _dy;\n                    focusedColumn.doindex = focusedColumn.doindex + _dy;\n                    focusedColumn.rowIndex = 0;\n                    if (focusedColumn.dindex > this.list.length - 1) {\n                        focusedColumn.dindex = focusedColumn.doindex = this.list.length - 1;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                }\n            }\n            else {\n                // 위로\n                if (focusedColumn.rowIndex + _dy < 0) {\n                    focusedColumn.dindex = focusedColumn.dindex + _dy;\n                    focusedColumn.doindex = focusedColumn.doindex + _dy;\n                    focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                    if (focusedColumn.dindex < 0) {\n                        focusedColumn.dindex = focusedColumn.doindex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                }\n            }\n\n            while_i = 0;\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                    focusedColumn.colIndex--;\n                } else {\n                    focusedColumn.rowIndex--;\n                }\n\n                if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                    // find fail\n                    moveResult = false;\n                    break;\n                }\n                while_i++;\n            }\n\n            nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n            // if mergeCells\n            if (this.config.body.mergeCells && this.list.length) {\n                while (!this.$.panel[nPanelInfo.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                    if (_dy > 0) {\n                        focusedColumn.dindex++;\n                    } else {\n                        focusedColumn.dindex--;\n                    }\n\n                    if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                        break;\n                    }\n                }\n                nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            }\n\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n\n            if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n                    let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;\n                    if (newTop < 0) newTop = 0;\n                    scrollTo.call(this, {top: -newTop, timeoutUnUse: false});\n                    SCROLLER.resize.call(this);\n                }\n                else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                    scrollTo.call(this, {top: (this.xvar.virtualPaintRowCount - 2 - focusedColumn.dindex) * this.xvar.bodyTrHeight, timeoutUnUse: false});\n                    SCROLLER.resize.call(this);\n                }\n            }\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n            this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            return moveResult;\n        },\n        \"LR\": function (_dx) {\n            let moveResult = true,\n                focusedColumn, originalColumn,\n                while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n            for (var c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (!focusedColumn) return false;\n\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n            if (_dx < 0) {\n                focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                if (focusedColumn.colIndex < 0) {\n                    focusedColumn.colIndex = 0;\n                    moveResult = false;\n                }\n            }\n            else {\n                focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                    focusedColumn.colIndex = this.colGroup.length - 1;\n                    moveResult = false;\n                }\n            }\n\n            if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                focusedColumn.rowIndex = 0;\n            }\n\n            if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n                if (_dx < 0) {\n                    while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex--;\n                        if (focusedColumn.colIndex <= 0) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex++;\n                        if (focusedColumn.colIndex >= this.colGroup.length) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                if (_dx < 0) {\n                    while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex--;\n                        if (focusedColumn.colIndex <= 0) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex++;\n                        if (focusedColumn.colIndex >= this.colGroup.length) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n            // if mergeCells\n            if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                while (!this.$.panel[nPanelInfo.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                    focusedColumn.dindex--;\n\n                    if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                        break;\n                    }\n                }\n                nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            }\n\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리\n            let isScrollTo = (function () {\n                if (!this.config.virtualScrollX) return false;\n                let scrollLeft = 0;\n                if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n                    if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n                        scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n                        scrollTo.call(this, {left: scrollLeft});\n                        GRID.header.scrollTo.call(this, {left: scrollLeft});\n                        SCROLLER.resize.call(this);\n                        return true;\n                    }\n                    else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n                        if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                            scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                            scrollTo.call(this, {left: -scrollLeft});\n                            GRID.header.scrollTo.call(this, {left: -scrollLeft});\n                            SCROLLER.resize.call(this);\n                        }\n                        return true;\n                    }\n                }\n                scrollLeft = null;\n                return false;\n            }).call(this);\n\n            containerPanelName = nPanelInfo.containerPanelName;\n            isScrollPanel = nPanelInfo.isScrollPanel;\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n            var $column = this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n                // todo : 컬럼이동할 때에도 scrollTo 체크\n                var newLeft = (function () {\n                    if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                        return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                    } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                        return $column.position().left;\n                    } else {\n                        return;\n                    }\n                }).call(this);\n\n                if (typeof newLeft !== \"undefined\") {\n                    GRID.header.scrollTo.call(this, {left: -newLeft});\n                    scrollTo.call(this, {left: -newLeft});\n                    SCROLLER.resize.call(this);\n                }\n            }\n\n            return moveResult;\n        },\n        \"INDEX\": function (_dindex) {\n            let moveResult = true,\n                focusedColumn, originalColumn,\n                while_i;\n\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (!focusedColumn) {\n                focusedColumn = {\n                    rowIndex: 0,\n                    colIndex: 0\n                }\n            }\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n\n            if (_dindex == \"end\") {\n                _dindex = this.list.length - 1;\n            }\n\n            focusedColumn.dindex = _dindex;\n            focusedColumn.rowIndex = 0;\n\n            while_i = 0;\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                    focusedColumn.colIndex--;\n                } else {\n                    focusedColumn.rowIndex--;\n                }\n\n                if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                    // find fail\n                    break;\n                }\n                while_i++;\n            }\n\n            let nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리.\n            (function () {\n                if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                    if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n                        scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                        SCROLLER.resize.call(this);\n                    }\n                    else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                        scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n                        SCROLLER.resize.call(this);\n                    }\n                }\n            }).call(this);\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n            this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            return moveResult;\n        }\n    };\n\n    let processor = {\n        \"UP\": function () {\n            return focus[\"UD\"].call(this, -1);\n        },\n        \"DOWN\": function () {\n            return focus[\"UD\"].call(this, 1);\n        },\n        \"LEFT\": function () {\n            return focus[\"LR\"].call(this, -1);\n        },\n        \"RIGHT\": function () {\n            return focus[\"LR\"].call(this, 1);\n        },\n        \"HOME\": function () {\n            return focus[\"INDEX\"].call(this, 0);\n        },\n        \"END\": function () {\n            return focus[\"INDEX\"].call(this, \"end\");\n        },\n        \"position\": function (_position) {\n            return focus[\"INDEX\"].call(this, _position);\n        }\n    };\n\n    if (_position in processor) {\n        return processor[_position].call(this);\n    } else {\n        return processor[\"position\"].call(this, _position);\n    }\n};\n\nconst inlineEdit = {\n    active(_focusedColumn, _e, _initValue) {\n        let self = this,\n            dindex, doindex, colIndex, rowIndex, panelName, colspan,\n            col, editor;\n\n        for (var key in _focusedColumn) {\n            panelName = _focusedColumn[key].panelName;\n            dindex = _focusedColumn[key].dindex;\n            doindex = _focusedColumn[key].doindex;\n            colIndex = _focusedColumn[key].colIndex;\n            rowIndex = _focusedColumn[key].rowIndex;\n            colspan = _focusedColumn[key].colspan;\n\n            // 인라인 에디팅을 멈춰야 하는 경우 조건\n            col = this.colGroup[colIndex];\n            if (!(editor = col.editor)) return this;\n\n            // editor disabled 체크\n            if (U.isFunction(editor.disabled)) {\n                if (editor.disabled.call({\n                        list: this.list,\n                        dindex: dindex,\n                        item: this.list[dindex],\n                        key: col.key,\n                        value: _initValue\n                    })) {\n                    return this;\n                }\n            }\n\n            // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n            if (!(function (_editor, _type) {\n                    if (_editor.type in INLINE_EDITOR) {\n                        return (INLINE_EDITOR[_editor.type].editMode == \"popup\");\n                    }\n                })(editor)) {\n                // 체크 박스 타입이면 값 변경 시도\n                if (editor.type == \"checkbox\") {\n                    let checked, newValue;\n                    if (editor.config && editor.config.trueValue) {\n                        if (checked = !(_initValue == editor.config.trueValue)) {\n                            newValue = editor.config.trueValue;\n                        } else {\n                            newValue = editor.config.falseValue;\n                        }\n                    } else {\n                        newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                    }\n\n                    DATA.setValue.call(self, dindex, doindex, col.key, newValue);\n                    updateRowState.call(self, [\"cellChecked\"], dindex, doindex, {\n                        key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                        editorConfig: col.editor.config, checked: checked\n                    });\n                }\n                return this;\n            }\n\n            if (this.list[dindex].__isGrouping) {\n                return false;\n            }\n            if (key in this.inlineEditing) {\n                return false;\n            }\n\n            this.inlineEditing[key] = {\n                editor: editor,\n                panelName: panelName,\n                columnKey: key,\n                column: _focusedColumn[key],\n                useReturnToSave: INLINE_EDITOR[editor.type].useReturnToSave\n            };\n            this.isInlineEditing = true;\n        }\n        if (this.isInlineEditing) {\n\n            let originalValue = DATA.getValue.call(self, dindex, doindex, col.key),\n                initValue = (function (__value, __editor) {\n                    if (U.isNothing(__value)) {\n                        __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                    }\n\n                    if (__editor.type == \"money\") {\n                        return U.number(__value, {\"money\": true});\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, _initValue, editor);\n\n            this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                .find('[data-ax6grid-cellholder]');\n\n            this.inlineEditing[key].$inlineEditor = INLINE_EDITOR[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n            return true;\n        }\n    },\n    deActive(_msg, _key, _value) {\n        // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n        if (!this.inlineEditing[_key]) return this;\n\n        let panelName = this.inlineEditing[_key].panelName,\n            dindex = this.inlineEditing[_key].column.dindex,\n            doindex = this.inlineEditing[_key].column.doindex,\n            rowIndex = this.inlineEditing[_key].column.rowIndex,\n            colIndex = this.inlineEditing[_key].column.colIndex,\n            column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n            editorValue = (function ($inlineEditor) {\n                if (typeof _value === \"undefined\") {\n                    if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                        return $inlineEditor.val();\n                    } else {\n                        _msg = \"CANCEL\";\n                        return false;\n                    }\n                } else {\n                    return _value;\n                }\n            })(this.inlineEditing[_key].$inlineEditor),\n            newValue = (function (__value, __editor) {\n                if (__editor.type == \"money\") {\n                    return U.number(__value);\n                }\n                else {\n                    return __value;\n                }\n            }).call(this, editorValue, column.editor);\n\n        let action = {\n            \"CANCEL\"(_dindex, _column, _newValue) {\n                action[\"__clear\"].call(this);\n            },\n            \"RETURN\"(_dindex, _doindex, _column, _newValue) {\n                if (DATA.setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {\n                    action[\"__clear\"].call(this);\n                    repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);\n                } else {\n                    action[\"__clear\"].call(this);\n                }\n            },\n            \"__clear\"() {\n                this.isInlineEditing = false;\n                let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                if (bindedAx5ui == \"ax5picker\") {\n                    this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                } else if (bindedAx5ui == \"ax5select\") {\n                    this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                }\n\n                this.inlineEditing[_key].$inlineEditor.remove();\n                this.inlineEditing[_key].$inlineEditor = null;\n                this.inlineEditing[_key].$inlineEditorCell = null;\n                this.inlineEditing[_key] = undefined;\n                delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n            }\n        };\n\n        if (_msg in action) {\n            action[_msg || \"RETURN\"].call(this, dindex, doindex, column, newValue);\n        } else {\n            action[\"__clear\"].call(this);\n        }\n    },\n    keydown(key, columnKey, _options) {\n        let processor = {\n            \"ESC\"() {\n                for (var columnKey in this.inlineEditing) {\n                    inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                }\n            },\n            \"RETURN\"() {\n                if (this.isInlineEditing) {\n                    if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                        inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                    }else{\n                        return false;\n                    }\n                } else {\n\n                    for (var k in this.focusedColumn) {\n                        let _column = this.focusedColumn[k],\n                            column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                            dindex = _column.dindex,\n                            doindex = _column.doindex,\n                            value = \"\",\n                            col = this.colGroup[_column.colIndex];\n\n                        if (column) {\n                            if (!this.list[dindex].__isGrouping) {\n                                value = DATA.getValue.call(this, dindex, doindex, column.key);\n                            }\n                        }\n\n                        if (col.editor && INLINE_EDITOR[col.editor.type].editMode === \"inline\") {\n                            if (_options && _options.moveFocus) {\n\n                            }\n                            else {\n                                if (column.editor && column.editor.type == \"checkbox\") {\n                                    value = DATA.getValue.call(this, dindex, doindex, column.key);\n\n                                    let checked, newValue;\n                                    if (column.editor.config && column.editor.config.trueValue) {\n                                        // console.log(value, column.editor.config.trueValue);\n\n                                        if (value != column.editor.config.trueValue) {\n                                            newValue = column.editor.config.trueValue;\n                                            checked = true;\n                                        } else {\n                                            newValue = column.editor.config.falseValue;\n                                            checked = false;\n                                        }\n                                    } else {\n                                        newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                    }\n\n                                    DATA.setValue.call(this, dindex, doindex, column.key, newValue);\n                                    updateRowState.call(this, [\"cellChecked\"], dindex, doindex, {\n                                        key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                        editorConfig: column.editor.config, checked: checked\n                                    });\n                                }\n                            }\n                        } else {\n                            inlineEdit.active.call(this, this.focusedColumn, null, value);\n                        }\n                    }\n                }\n                return true;\n            }\n        };\n\n        if (key in processor) {\n            processor[key].call(this, key, columnKey, _options);\n        }\n    }\n};\n\nconst getExcelString = function () {\n    let cfg = this.config,\n        list = this.list,\n        bodyRowData = this.bodyRowTable,\n        footSumData = this.footSumTable,\n        bodyGroupingData = this.bodyGroupingTable;\n\n    // body-scroll 의 포지션에 의존적이므로..\n    let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n        let SS = [],\n            di, dl,\n            tri, trl,\n            ci, cl,\n            col, val;\n\n        //SS.push('<table border=\"1\">');\n        for (di = 0, dl = _list.length; di < dl; di++) {\n            let isGroupingRow = false, rowTable;\n\n            if (_groupRow && \"__isGrouping\" in _list[di]) {\n                rowTable = _groupRow;\n                isGroupingRow = true;\n            } else {\n                rowTable = _bodyRow;\n            }\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, val, \"text\"), '&nbsp;</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n        }\n        //SS.push('</table>');\n        return SS.join('');\n    };\n    let getSum = function (_colGroup, _bodyRow, _list) {\n        let SS = [],\n            tri, trl,\n            ci, cl,\n            col;\n\n        //SS.push('<table border=\"1\">');\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('\\n<tr>');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                SS.push('<td ',\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    '>', getSumFieldValue.call(this, _list, col), '</td>');\n            }\n            SS.push('\\n</tr>');\n        }\n        //SS.push('</table>');\n\n        return SS.join('');\n    };\n\n    let po = [];\n    po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n    if (cfg.footSum) {\n        // 바닥 요약\n        po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n    }\n\n    // right\n    if (cfg.rightSum) {\n        // todo : right 표현 정리\n    }\n\n    return po.join('');\n};\n\nconst toggleCollapse = function (_dindex, _doindex, _collapse) {\n    if (DATA.toggleCollapse.call(this, _dindex, _doindex, _collapse)) {\n        this.proxyList = DATA.getProxyList.call(this, this.list);\n        repaint.call(this);\n    }\n};\n\nconst click = function (_dindex, _doindex) {\n    let that = {\n        self: this,\n        page: this.page,\n        list: this.list,\n        item: this.list[_dindex],\n        dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n    if (this.config.body.onClick) {\n        this.config.body.onClick.call(that);\n    }\n\n    that = null;\n    // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n};\n\nconst dblClick = function (_dindex, _doindex) {\n    let that = {\n        self: this,\n        page: this.page,\n        list: this.list,\n        item: this.list[_dindex],\n        dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onDBLClick) {\n        this.config.body.onDBLClick.call(that);\n    }\n\n    that = null;\n};\n\nexport default {\n    init: init,\n    repaint: repaint,\n    repaintCell: repaintCell,\n    repaintRow: repaintRow,\n    updateRowState: updateRowState,\n    updateRowStateAll: updateRowStateAll,\n    scrollTo: scrollTo,\n    blur: blur,\n    moveFocus: moveFocus,\n    inlineEdit: inlineEdit,\n    getExcelString: getExcelString,\n    toggleCollapse: toggleCollapse,\n    click: click,\n    dblClick: dblClick\n};"]}