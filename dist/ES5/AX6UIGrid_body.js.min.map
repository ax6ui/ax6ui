{"version":3,"sources":["AX6UIGrid_body.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_util","_AX6UIGrid_data","_AX6UIGrid_page","_AX6UIGrid_header","_AX6UIGrid_inline_editor","_AX6UIGrid_collector","_AX6UIGrid_formatter","_AX6UIGrid_scroller","columnSelect","focusClear","self","this","_column","c","focusedColumn","$","panel","panelName","find","dindex","rowIndex","colIndex","removeAttr","clear","selectedColumn","init","column","isInlineEditing","editKey","inlineEditing","call","doindex","colspan","start","update","trl","end","r","s","Math","min","xvar","selectedRange","e","max","range","inlineEdit","deActive","_panels","frozenRowIndex","push","frozenColumnIndex","join","attr","cell","on","instanceId","getAttribute","Number","stopEvent","columnSelector","off","_jqmin2","default","document","css","_dindex","_doindex","_data","processor","selected","list","i","livePanelKeys","length","cfg","columnKeys","selectedClear","updateRowState","pi","proxyList","di","doi","__original_index__","cellChecked","key","checked","_states","forEach","_state","updateRowStateAll","config","repaint","row","col","columnKey","bodyRowMap","value","targetDBLClick","getValue","editor","colGroup","_AX6Util2","isObject","active","body","onDBLClick","that","page","item","targetClick","type","newValue","trueValue","falseValue","_AX6UIGrid_data2","setValue","onClick","rowSelector","multipleSelect","selectedDataIndexs","select","undefined","lineNumber","tree-control","disableSelection","toggleCollapse","internalCall","param","target","t","onContextMenu","gridSelf","element","touchmoved","paintRowCountMargin","virtualScrollYCountMargin","floor","opts","noRepaint","virtualScrollX","callback","virtualScrollAcceleratedDelayTime","__throttledScroll","resetFrozenColumn","dividedBodyRowObj","paintRowCountTopMargin","asideBodyRowData","dataTable","data","rows","l","rowspan","_col","showLineNumber","extend","width","lineNumberColumnWidth","_width","cols","rowSelectorColumnWidth","label","leftBodyRowData","leftData","grouping","showRowSelector","_AX6UIGrid_util2","divideTableByFrozenColumnIndex","bodyGroupingTable","columnAttr","dividedBodyGroupingObj","footSumData","footSum","footSumTable","_index","_value","_returnPlainText","_key","tagsToReplace","<",">","leftBodyGroupingData","bodyGroupingData","rightData","_editor","dividedFootSumObj","_AX6UIGrid_inline_editor2","getFieldValue","_list","_item","__origin_index__","disabled","editMode","getHtml","formatter","isFunction","customFormatter","_AX6UIGrid_formatter2","returnValue","test","replace","tag","treeControl","__value","tree","indentNodeHtml","arrowWidth","keys","depth","indentWidth","collapse","icons","collapsedArrow","openedArrow","children","collapsedGroupIcon","groupIcon","itemIcon","valueProcessor","use","getGroupingValue","__groupingList","groupBy","__groupingBy","_label","caller","collector","customCollector","_AX6UIGrid_collector2","getSumFieldValue","_reset","paintStartRowIndex","paintStartColumnIndex","virtualPaintStartRowIndex","virtualScrollY","position","top","bodyTrHeight","isNaN","nopaintRightColumnsWidth","left","ci","_sx","_ex","bodyScrollLeft","paintEndColumnIndex","bodyWidth","nopaintLeftColumnsWidth","scrollContentWidth","padding-left","padding-right","headerColGroup","bodyRowData","leftFootSumData","asideBodyGroupingData","bodyAlign","align","paintRowCount","virtualPaintRowCount","bodyHeight","isFirstPaint","abs","concat","splice","getTableByStartEndColumnIndex","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","dl","tri","colAlign","isScrolled","columnHeight","columnBorderWidth","cellHeight","stripeString","cgi","len","cgl","isGroupingRow","rowTable","odi","trStyleClass","index","cl","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","_cellHeight","lineHeight","columnPadding","multiLine","get","innerHTML","empty","repaintSum","isFootSum","mergeCellsBody","tblRowMaps","token","hasMergeTd","tableTrs","tableTrTds","trMaps","tdObj","ri","rl","childNodes","prevTokenColIndexs","isArray","search","text","hasFalse","mergeCells","ti","_loop2","_loop","frozenScrollConfig","scrollConfig","asidePanelWidth","asideColGroup","slice","leftHeaderColGroup","needToPaintSum","rightSum","updateCell","_panelName","updateWith","repaintCell","_rowIndex","_colIndex","_newValue","updateWithCell","html","updateColumnKey","findPanelByColumnIndex","height","ceil","replaceGroupTr","replaceTr","timeoutUnUse","focus","moveResult","while_i","originalColumn","bodyRowTable","nPanelInfo","_dy","blur","moveFocus","_position","UD","newTop","scrollTo","isScrollPanel","containerPanelName","_dx","bodyGroupingMap","_AX6UIGrid_scroller2","resize","LR","isScrollTo","scrollLeft","__isGrouping","$column","newLeft","_AX6UIGrid_header2","outerWidth","INDEX","_initValue","editorConfig","UP","DOWN","useReturnToSave","HOME","END","originalValue","editorValue","$inlineEditor","_msg","_type","action","bindedAx5ui","_options","initValue","__editor","number","money","$inlineEditorCell","tagName","CANCEL","RETURN","__clear","getExcelString","ax5picker","ax5select","getBody","remove","val","keydown","ESC","k","getSum","getProxyList","po","dblClick","repaintRow","_collapse","click"],"mappings":"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","file":"AX6UIGrid_body.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"./AX6Util\";\nimport UTIL from \"./AX6UIGrid_util\";\nimport DATA from \"./AX6UIGrid_data\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport HEADER from \"./AX6UIGrid_header\";\n\nimport INLINE_EDITOR from \"./AX6UIGrid_inline_editor\";\nimport COLLECTOR from \"./AX6UIGrid_collector\";\nimport FORMATTER from \"./AX6UIGrid_formatter\";\nimport SCROLLER from \"./AX6UIGrid_scroller\";\n\nconst columnSelect = {\n    focusClear: function () {\n        let self = this, _column;\n        for (let c in self.focusedColumn) {\n            _column = self.focusedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .removeAttr('data-ax6grid-column-focused');\n            }\n        }\n        self.focusedColumn = {};\n    },\n    clear: function () {\n        let self = this, _column;\n        for (let c in self.selectedColumn) {\n            _column = self.selectedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .removeAttr('data-ax6grid-column-selected');\n            }\n        }\n        self.selectedColumn = {};\n    },\n    init: function (column) {\n        let self = this;\n        if (this.isInlineEditing) {\n            for (let editKey in this.inlineEditing) {\n                if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                    return this;\n                }\n            }\n        }\n\n        // focus\n        columnSelect.focusClear.call(self);\n        self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n            panelName: column.panelName,\n            dindex: column.dindex,\n            doindex: column.doindex,\n            rowIndex: column.rowIndex,\n            colIndex: column.colIndex,\n            colspan: column.colspan\n        };\n\n        // select\n        columnSelect.clear.call(self);\n        self.xvar.selectedRange = {\n            start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n            end: null\n        };\n        self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n            if (data) {\n                return false;\n            } else {\n                return {\n                    panelName: column.panelName,\n                    dindex: column.dindex,\n                    doindex: column.doindex,\n                    rowIndex: column.rowIndex,\n                    colIndex: column.colIndex,\n                    colspan: column.colspan\n                }\n            }\n        })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n        this.$.panel[column.panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + column.dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + column.colIndex + '\"]')\n            .attr('data-ax6grid-column-focused', \"true\")\n            .attr('data-ax6grid-column-selected', \"true\");\n\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this, \"RETURN\");\n        }\n    },\n    update: function (column) {\n        const self = this;\n        let dindex, doindex, colIndex, rowIndex, trl;\n\n        self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n        columnSelect.clear.call(self);\n\n        let range = {\n            r: {\n                s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n            },\n            c: {\n                s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n            }\n        };\n\n        dindex = range.r.s;\n        for (; dindex <= range.r.e; dindex++) {\n\n\n            trl = this.bodyRowTable.rows.length;\n            rowIndex = 0;\n            for (; rowIndex < trl; rowIndex++) {\n                colIndex = range.c.s;\n                for (; colIndex <= range.c.e; colIndex++) {\n                    var _panels = [],\n                        panelName = \"\";\n\n                    if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                    if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    panelName = _panels.join(\"-\");\n\n                    self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                        panelName: panelName,\n                        dindex: dindex,\n                        rowIndex: rowIndex,\n                        colIndex: colIndex,\n                        colspan: column.colspan\n                    };\n\n                    _panels = null;\n                    panelName = null;\n                }\n            }\n        }\n        dindex = null;\n        doindex = null;\n        colIndex = null;\n        rowIndex = null;\n\n        for (var c in self.selectedColumn) {\n            var _column = self.selectedColumn[c];\n            if (_column) {\n                self.$.panel[_column.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n                    .attr('data-ax6grid-column-selected', 'true');\n            }\n        }\n\n    }\n};\n\nconst columnSelector = {\n    \"on\": function (cell) {\n        let self = this;\n\n        if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n            return;\n        }\n\n        columnSelect.init.call(self, cell);\n\n        this.$[\"container\"][\"body\"]\n            .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax6grid-column-attr=\"default\"]', function (e) {\n                if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n                    columnSelect.update.call(self, {\n                        panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n                        doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                    U.stopEvent(e);\n                }\n            })\n            .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            })\n            .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            });\n\n        jQuery(document.body)\n            .attr('unselectable', 'on')\n            .css('user-select', 'none')\n            .on('selectstart', false);\n    },\n    \"off\": function () {\n\n        this.$[\"container\"][\"body\"]\n            .off(\"mousemove.ax5grid-\" + this.instanceId)\n            .off(\"mouseup.ax5grid-\" + this.instanceId)\n            .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n        jQuery(document.body)\n            .removeAttr('unselectable')\n            .css('user-select', 'auto')\n            .off('selectstart');\n    }\n};\n\nconst updateRowState = function (_states, _dindex, _doindex, _data) {\n    let self = this,\n        cfg = this.config,\n        processor = {\n            \"selected\": function (_dindex, _doindex) {\n                if (this.list[_doindex]) {\n                    let i = this.$.livePanelKeys.length;\n                    while (i--) {\n                        this.$.panel[this.$.livePanelKeys[i]]\n                            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                            .attr(\"data-ax6grid-selected\", this.list[_doindex][cfg.columnKeys.selected]);\n                    }\n                }\n            },\n            \"selectedClear\": function () {\n                let di = this.list.length;\n                let pi;\n\n                if (!this.proxyList) {\n                    while (di--) {\n                        if (this.list[di][cfg.columnKeys.selected]) {\n                            pi = this.$.livePanelKeys.length;\n                            while (pi--) {\n                                this.$.panel[this.$.livePanelKeys[pi]]\n                                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                                    .attr(\"data-ax6grid-selected\", false);\n                            }\n                        }\n                        this.list[di][cfg.columnKeys.selected] = false;\n                    }\n                } else {\n                    while (di--) {\n                        this.list[di][cfg.columnKeys.selected] = false;\n                    }\n                    di = this.proxyList.length;\n                    while (di--) {\n                        if(this.list[doi][cfg.columnKeys.selected]){\n                            pi = this.$.livePanelKeys.length;\n                            while (pi--) {\n                                this.$.panel[this.$.livePanelKeys[pi]]\n                                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                                    .attr(\"data-ax6grid-selected\", false);\n                            }\n                        }\n\n                        this.proxyList[di][cfg.columnKeys.selected] = false;\n                        let doi = this.proxyList[di].__original_index__;\n                    }\n                }\n            },\n            \"cellChecked\": function (_dindex, _doindex, _data) {\n                let key = _data.key,\n                    rowIndex = _data.rowIndex,\n                    colIndex = _data.colIndex;\n\n                let panelName = (function () {\n                    let _panels = [];\n                    if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                    if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    return _panels.join(\"-\");\n                }).call(this);\n\n                this.$.panel[panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                    .find('[data-ax6grid-column-rowIndex=\"' + rowIndex + '\"][data-ax6grid-column-colIndex=\"' + colIndex + '\"]')\n                    .find('[data-ax6grid-editor=\"checkbox\"]')\n                    .attr(\"data-ax6grid-checked\", '' + _data.checked);\n            }\n        };\n\n    if(typeof _doindex === \"undefined\") _doindex = _dindex;\n\n    _states.forEach(function (_state) {\n        if (!processor[_state]) throw 'invaild state name';\n        processor[_state].call(self, _dindex, _doindex, _data);\n    });\n};\n\nconst updateRowStateAll = function (_states, _data) {\n    let self = this,\n        cfg = this.config,\n        processor = {\n            \"selected\": function (_dindex) {\n                repaint.call(this, true);\n            }\n        };\n\n    _states.forEach(function (_state) {\n        if (!processor[_state]) throw 'invaild state name';\n        processor[_state].call(self, _data);\n    });\n};\n\nconst init = function () {\n    let self = this;\n\n    this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax6grid-column-attr]', function (e) {\n        let panelName, attr,\n            row, col, dindex, doindex, rowIndex, colIndex,\n            targetDBLClick = {\n                \"default\": function (_column) {\n                    if (self.isInlineEditing) {\n                        for (let columnKey in self.inlineEditing) {\n                            if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                return this;\n                            }\n                        }\n                    }\n\n                    let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n                    if (column) {\n                        if (!self.list[dindex].__isGrouping) {\n                            value = DATA.getValue.call(self, dindex, doindex, column.key);\n                        }\n                    }\n\n                    let editor = self.colGroup[_column.colIndex].editor;\n                    if (U.isObject(editor)) {\n                        inlineEdit.active.call(self, self.focusedColumn, e, value);\n                    } else {\n                        // 더블클릭 실행\n                        if (self.config.body.onDBLClick) {\n                            let that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.dindex],\n                                dindex: _column.dindex,\n                                doindex: _column.doindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n                            self.config.body.onDBLClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n\n                },\n                \"lineNumber\": function (_column) {\n\n                }\n            };\n\n        panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n        attr = this.getAttribute(\"data-ax6grid-column-attr\");\n        row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n        col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n        rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n        if (attr in targetDBLClick) {\n            targetDBLClick[attr]({\n                panelName: panelName,\n                attr: attr,\n                row: row,\n                col: col,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            });\n\n            U.stopEvent(e);\n        }\n    });\n\n    this.$[\"container\"][\"body\"].on(\"click\", '[data-ax6grid-column-attr]', function (e) {\n        let panelName, attr,\n            row, col, dindex, doindex, rowIndex, colIndex, disableSelection,\n            targetClick = {\n                \"default\": function (_column) {\n                    let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                        that = {\n                            self: self,\n                            page: self.page,\n                            list: self.list,\n                            item: self.list[_column.doindex],\n                            dindex: _column.dindex,\n                            doindex: _column.doindex,\n                            rowIndex: _column.rowIndex,\n                            colIndex: _column.colIndex,\n                            column: column,\n                            value: self.list[_column.dindex][column.key]\n                        };\n\n                    if (column.editor && column.editor.type == \"checkbox\") { // todo : INLINE_EDITOR에서 처리 할수 있도록 구문 변경 필요.\n                        let value = DATA.getValue.call(self, _column.dindex, _column.doindex, column.key),\n                            checked, newValue;\n\n                        if (column.editor.config && column.editor.config.trueValue) {\n                            if (checked = !(value == column.editor.config.trueValue)) {\n                                newValue = column.editor.config.trueValue;\n                            } else {\n                                newValue = column.editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        DATA.setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);\n\n                        updateRowState.call(self, [\"cellChecked\"], _column.dindex, _column.doindex, {\n                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                            editorConfig: column.editor.config, checked: checked\n                        });\n                    } else {\n                        if (self.config.body.onClick) {\n                            self.config.body.onClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function (_column) {\n                    let item = self.list[_column.doindex];\n                    if (item[self.config.columnKeys.disableSelection]) {\n                        return false;\n                    }\n\n                    if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {\n                        updateRowState.call(self, [\"selectedClear\"]);\n                        DATA.clearSelect.call(self);\n                    }\n\n                    DATA.select.call(self, _column.dindex, _column.doindex, undefined, {\n                        internalCall: true\n                    });\n                    updateRowState.call(self, [\"selected\"], _column.dindex, _column.doindex);\n                },\n                \"lineNumber\": function (_column) {\n\n                },\n                \"tree-control\": function (_column, _el) {\n                    //console.log(_column);\n                    toggleCollapse.call(self, _column.dindex, _column.doindex);\n                }\n            };\n\n        panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n        attr = this.getAttribute(\"data-ax6grid-column-attr\");\n        row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n        col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n        rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n        if (attr in targetClick) {\n            targetClick[attr]({\n                panelName: panelName,\n                attr: attr,\n                row: row,\n                col: col,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            }, this);\n        }\n    });\n\n    this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n        let target, dindex, doindex, rowIndex, colIndex, item, column, param = {};\n\n        target = U.findParentNode(e.target, function (t) {\n            if (t.getAttribute(\"data-ax6grid-column-attr\")) {\n                return true;\n            }\n        });\n\n        if (target) {\n            // item 찾기\n            rowIndex = Number(target.getAttribute(\"data-ax6grid-column-rowIndex\"));\n            colIndex = Number(target.getAttribute(\"data-ax6grid-column-colIndex\"));\n            dindex = Number(target.getAttribute(\"data-ax6grid-data-index\"));\n            doindex = Number(target.getAttribute(\"data-ax6grid-data-o-index\"));\n            column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n            item = self.list[dindex];\n        }\n\n        if (self.config.body.onContextMenu) {\n            param = {\n                element: target,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex,\n                item: item,\n                column: column,\n                gridSelf: self\n            };\n            self.config.body.onContextMenu.call({\n                self: self,\n                item: item,\n                column: column,\n                dindex: dindex,\n                doindex: doindex,\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            }, e, param);\n        }\n\n        U.stopEvent(e.originalEvent);\n        target = null;\n        dindex = null;\n        doindex = null;\n        rowIndex = null;\n        colIndex = null;\n        item = null;\n        column = null;\n        param = null;\n    });\n\n    this.$[\"container\"][\"body\"]\n        .on(\"mousedown\", '[data-ax6grid-column-attr=\"default\"]', function (e) {\n            if (self.xvar.touchmoved) return false;\n            if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n                columnSelector.on.call(self, {\n                    panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n                    dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n                    doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n                    rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n                    colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n                    colspan: Number(this.getAttribute(\"colspan\"))\n                });\n            }\n        })\n        .on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n    resetFrozenColumn.call(this);\n\n    // 그리드 바디에 출력할 여유 카운트\n    this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n    this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n\n    if (this.config.virtualScrollAccelerated) {\n        this.__throttledScroll = U.throttle(function (css, opts) {\n            if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n                repaint.call(this);\n            } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n                repaint.call(this);\n            }\n            if (opts.callback) {\n                opts.callback();\n            }\n        }, this.config.virtualScrollAcceleratedDelayTime);\n    } else {\n        this.__throttledScroll = false;\n    }\n};\n\nconst resetFrozenColumn = function () {\n    let cfg = this.config,\n        dividedBodyRowObj = UTIL.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n    this.asideBodyRowData = (function (dataTable) {\n        let data = {rows: []};\n        for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n            data.rows[i] = {cols: []};\n            if (i === 0) {\n                let col = {\n                    label: \"\",\n                    colspan: 1,\n                    rowspan: dataTable.rows.length,\n                    colIndex: null\n                }, _col = {};\n\n                if (cfg.showLineNumber) {\n                    _col = jQuery.extend({}, col, {\n                        width: cfg.lineNumberColumnWidth,\n                        _width: cfg.lineNumberColumnWidth,\n                        columnAttr: \"lineNumber\",\n                        label: \"&nbsp;\", key: \"__d-index__\"\n                    });\n                    data.rows[i].cols.push(_col);\n                }\n                if (cfg.showRowSelector) {\n                    _col = jQuery.extend({}, col, {\n                        width: cfg.rowSelectorColumnWidth,\n                        _width: cfg.rowSelectorColumnWidth,\n                        columnAttr: \"rowSelector\",\n                        label: \"\", key: \"__d-checkbox__\"\n                    });\n                    data.rows[i].cols.push(_col);\n                }\n            }\n        }\n\n        return data;\n    }).call(this, this.bodyRowTable);\n\n    //console.log(dividedBodyRowObj);\n\n    this.leftBodyRowData = dividedBodyRowObj.leftData;\n    this.bodyRowData = dividedBodyRowObj.rightData;\n\n    if (cfg.body.grouping) {\n        let dividedBodyGroupingObj = UTIL.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n        this.asideBodyGroupingData = (function (dataTable) {\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyGroupingTable);\n        this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n        this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n        this.bodyGroupingMap = UTIL.makeBodyRowMap.call(this, this.bodyGroupingTable);\n    }\n\n    this.leftFootSumData = {};\n    this.footSumData = {};\n    if (this.config.footSum) {\n        let dividedFootSumObj = UTIL.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n        this.leftFootSumData = dividedFootSumObj.leftData;\n        this.footSumData = dividedFootSumObj.rightData;\n    }\n};\n\nconst getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n\n    let _key = _col.key, tagsToReplace = {\n        '<': '&lt;',\n        '>': '&gt;'\n    };\n\n    if (_key === \"__d-index__\") {\n        return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n    }\n    else if (_key === \"__d-checkbox__\") {\n        return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n    }\n    else {\n        if (_col.editor && (function (_editor) {\n                if (_editor.type in INLINE_EDITOR) {\n                    return (INLINE_EDITOR[_editor.type].editMode == \"inline\");\n                }\n                return false;\n            })(_col.editor)) { // editor가 inline타입이라면\n\n            _value = _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n\n            if (U.isFunction(_col.editor.disabled)) {\n                if (_col.editor.disabled.call({\n                        list: _list,\n                        dindex: _index,\n                        item: _list[_index],\n                        key: _key,\n                        value: _value\n                    })) {\n                    return _value;\n                }\n            }\n\n            // print editor\n            return _returnPlainText ? _value : INLINE_EDITOR[_col.editor.type].getHtml(this, _col.editor, _value);\n        }\n\n        const valueProcessor = {\n            \"formatter\": function () {\n                let that = {\n                    key: _key,\n                    value: _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key),\n                    dindex: _index,\n                    item: _item,\n                    list: _list\n                };\n\n                let caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n                return caller ? caller.call(that) : that.value;\n            },\n            \"default\": function () {\n                let returnValue = \"\";\n\n                if (typeof _value !== \"undefined\") {\n                    returnValue = _value;\n                } else {\n                    if (/[\\.\\[\\]]/.test(_key)) {\n                        _value = DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n                    }else{\n                        _value = _item[_key];\n                    }\n\n                    if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                }\n\n                // 키값이 Boolean일때 오류 발생하여 수정.\n                return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                    return tagsToReplace[tag] || tag;\n                });\n            },\n            \"treeControl\": function (__value) {\n                let cfg = this.config,\n                    keys = this.config.tree.columnKeys,\n                    indentNodeHtml = '';\n\n                if (_item[keys.children].length) {\n                    indentNodeHtml += '<a ' +\n                        'data-ax6grid-data-index=\"' + _index + '\" ' +\n                        'data-ax6grid-column-attr=\"tree-control\" ' +\n                        'data-ax6grid-tnode-arrow=\"\" ' +\n                        'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                        '>';\n                    indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n                    indentNodeHtml += '</a>';\n                } else {\n                    indentNodeHtml += '<span ' +\n                        'data-ax6grid-tnode-arrow=\"\" ' +\n                        'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                        '>&nbsp;</span>';\n                }\n\n                indentNodeHtml += '<span ' +\n                    'data-ax6grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n                    'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n                    '>';\n                indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n                indentNodeHtml += '</span>';\n\n                return indentNodeHtml + __value;\n            }\n        };\n\n        let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n        if (this.config.tree.use && _col.treeControl) {\n            returnValue = valueProcessor.treeControl.call(this, returnValue);\n        }\n\n        return returnValue;\n    }\n\n};\n\nconst getGroupingValue = function (_item, _index, _col) {\n    let value, that, caller, _key = _col.key, _label = _col.label;\n\n    if (typeof _key === \"undefined\") {\n        that = {\n            key: _key,\n            list: _item.__groupingList,\n            groupBy: _item.__groupingBy\n        };\n        if (U.isFunction(_label)) {\n            value = _label.call(that);\n        } else {\n            value = _label;\n        }\n        _item[_col.colIndex] = value;\n        return value;\n    }\n    else if (_key === \"__d-index__\") {\n        return '';\n    }\n    else if (_key === \"__d-checkbox__\") {\n        return '';\n    }\n    else {\n        if (_col.collector) {\n            that = {\n                key: _key,\n                list: _item.__groupingList\n            };\n            _item[_col.colIndex] = value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n            if (_col.formatter) {\n                that.value = value;\n                caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n                return caller ? caller.call(that) : value;\n            } else {\n                return value;\n            }\n        } else {\n            return \"&nbsp;\";\n        }\n    }\n};\n\nconst getSumFieldValue = function (_list, _col) {\n    let _key = _col.key, _label = _col.label;\n    //, _collector, _formatter\n    if (typeof _key === \"undefined\") {\n        return _label;\n    }\n    else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n        return '&nbsp;';\n    }\n    else {\n        if (_col.collector) {\n            let that = {\n                    key: _key,\n                    list: _list\n                };\n            let value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n            that.value = value;\n\n            if (_col.formatter) {\n                return (U.isFunction(_col.formatter) ? _col.formatter : this.config.formatter[_col.formatter] || FORMATTER[_col.formatter]).call(that);\n            } else {\n                return value;\n            }\n        } else {\n            return \"&nbsp;\";\n        }\n    }\n};\n\nconst repaint = function (_reset) {\n    // debugger;\n    let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n    /// repaint reset 타입이면 고정컬럼을 재조정\n    if (_reset) {\n        resetFrozenColumn.call(this);\n        // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n        this.xvar.paintStartRowIndex = undefined;\n        this.xvar.paintStartColumnIndex = undefined;\n    }\n\n    /// 출력시작 인덱스\n    let paintStartRowIndex, virtualPaintStartRowIndex;\n\n    if (this.config.virtualScrollY) {\n        virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n            paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n        }\n    }\n    else {\n        paintStartRowIndex = this.xvar.frozenRowIndex;\n    }\n\n    if (isNaN(paintStartRowIndex)) return this;\n\n    let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n    let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n    if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n        for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n            // bodyScrollLeft\n            this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n            this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n            if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n                paintStartColumnIndex = ci;\n            }\n            if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n                paintEndColumnIndex = ci;\n\n                if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n                if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n            }\n        }\n\n        if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n        if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n        this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    }\n\n    let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n        headerColGroup = this.headerColGroup,\n        asideBodyRowData = this.asideBodyRowData,\n        leftBodyRowData = this.leftBodyRowData,\n        bodyRowData = this.bodyRowData,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount, virtualPaintRowCount;\n\n    if (!this.config.virtualScrollY) {\n        virtualPaintRowCount = paintRowCount = list.length;\n    } else {\n        virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n        paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n    }\n\n    // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n    if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n        paintStartRowIndex = this.xvar.paintStartRowIndex;\n    }\n\n    if (\n        this.xvar.dataRowCount === list.length\n        && this.xvar.paintStartRowIndex === paintStartRowIndex\n        && this.xvar.paintRowCount === paintRowCount\n        && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n        && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n    ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n    // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n    if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n        headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n        bodyRowData = UTIL.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n        if (cfg.body.grouping) {\n            bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n        }\n        if (cfg.footSum) {\n            footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n        }\n        if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n            this.needToPaintSum = true;\n        }\n    }\n\n    /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n    this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n    /// 사용된 패널들의 키 모음\n    this.$.livePanelKeys = [];\n\n    // 그리드 바디 영역 페인트 함수\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _groupRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey];\n\n        if (!isFirstPaint && !_scrollConfig) {\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return false;\n        }\n\n        let SS = [],\n            cgi, cgl, di, dl, tri, trl, ci, cl, col,\n            cellHeight,\n            colAlign,\n            isScrolled = (function () {\n                // 스크롤값이 변경되거나 처음 호출되었습니까?\n                if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                    _scrollConfig = {\n                        paintStartRowIndex: 0,\n                        paintRowCount: _list.length\n                    };\n                    return false;\n                } else {\n                    return true;\n                }\n            })(),\n            stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight) + 'px';\n\n        if (isScrolled) {\n            SS.push('<div style=\"background:repeating-linear-gradient(to top, ' + stripeString + ');' +\n                'font-size:0;' +\n                'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n        }\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        di = _scrollConfig.paintStartRowIndex;\n\n        for (dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n\n            if (_list[di]) {\n                let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                    SS.push('<tr class=\"tr-' + (di % 4) + '', (cfg.body.trStyleClass) ? (U.isFunction(cfg.body.trStyleClass)) ? ' ' + cfg.body.trStyleClass.call({\n                            item: _list[di],\n                            index: di\n                        }, _list[di], di) : ' ' + cfg.body.trStyleClass : '','\"',\n\n                        (isGroupingRow) ? ' data-ax6grid-grouping-tr=\"true\"' : '',\n                        ' data-ax6grid-tr-data-index=\"' + di + '\"',\n                        ' data-ax6grid-tr-data-o-index=\"' + odi + '\"',\n                        ' data-ax6grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                        ' data-ax6grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                        '>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                        })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                    SS.push('</tr>');\n                }\n            }\n        }\n        SS.push('</table>');\n\n        if (isScrolled && _list.length) {\n            SS.push('<div style=\"background:repeating-linear-gradient(to bottom, ' + stripeString + ');' +\n                'font-size:0;' +\n                'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n        }\n\n\n        _elTarget.empty();\n        SS = SS.join('');\n\n        _elTarget.get(0).innerHTML = SS;\n\n        this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n        return true;\n    };\n\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey];\n\n        if (!isFirstPaint && !_scrollConfig) {\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return false;\n        }\n\n        let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty();\n        SS = SS.join('');\n\n        _elTarget.get(0).innerHTML = SS;\n\n        this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n        return true;\n    };\n\n    /**\n     * @param _elTargetKey\n     * @param _colGroup\n     * @param _bodyRow\n     * @param _list\n     * @param [_scrollConfig]\n     * @returns {boolean}\n     */\n    let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let tblRowMaps = [];\n        let _elTarget = this.$.panel[_elTargetKey];\n        let token = {}, hasMergeTd;\n\n        // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n        let tableTrs = _elTarget.find(\"tr\");\n        for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n            let tableTrTds, trMaps;\n            tableTrTds = tableTrs[ri].childNodes;\n            trMaps = [];\n\n            for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n                let tdObj = {\n                    \"$\": jQuery(tableTrTds[ci])\n                };\n\n                if (tdObj[\"$\"].attr(\"data-ax6grid-column-col\") != \"null\") {\n                    tdObj.dindex = tdObj[\"$\"].attr(\"data-ax6grid-data-index\");\n                    tdObj.tri = tdObj[\"$\"].attr(\"data-ax6grid-column-row\");\n                    tdObj.ci = tdObj[\"$\"].attr(\"data-ax6grid-column-col\");\n                    tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-rowIndex\");\n                    tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-colIndex\");\n                    tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                    tdObj.text = tdObj[\"$\"].text();\n                    trMaps.push(tdObj);\n                }\n\n                tdObj = null;\n            }\n            tblRowMaps.push(trMaps);\n        }\n\n        // 두줄이상 일 때 의미가 있으니.\n        if (tblRowMaps.length > 1) {\n            hasMergeTd = false;\n            for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                let prevTokenColIndexs = [];\n\n                for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                    // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n\n                    if (!_colGroup[ci].editor && (() => {\n                            if (U.isArray(cfg.body.mergeCells)) {\n                                return U.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n                            } else {\n                                return true;\n                            }\n                        })()) {\n\n                        // 앞줄과 값이 같다면.\n                        if (token[ci] && (() => {\n                                if (prevTokenColIndexs.length > 0) {\n                                    let hasFalse = true;\n                                    prevTokenColIndexs.forEach(function (ti) {\n                                        if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                                            hasFalse = false;\n                                        }\n                                    });\n                                    return hasFalse;\n                                } else {\n                                    return true;\n                                }\n                            })() && token[ci].text == tblRowMaps[ri][ci].text) {\n                            tblRowMaps[ri][ci].rowspan = 0;\n                            tblRowMaps[token[ci].ri][ci].rowspan++;\n                            hasMergeTd = true;\n                        } else {\n                            token[ci] = {\n                                ri: ri,\n                                ci: ci,\n                                text: tblRowMaps[ri][ci].text\n                            };\n                        }\n\n                        prevTokenColIndexs.push(ci);\n                    }\n                }\n            }\n\n            // rowspan을 다 구했으면 적용합니다.\n            if (hasMergeTd) {\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                        if (tblRowMaps[ri][ci].rowspan == 0) {\n                            tblRowMaps[ri][ci][\"$\"].remove();\n                        } else if (tblRowMaps[ri][ci].rowspan > 1) {\n                            tblRowMaps[ri][ci][\"$\"]\n                                .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                                .addClass(\"merged\");\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    let scrollConfig = {\n        paintStartRowIndex: paintStartRowIndex,\n        paintRowCount: paintRowCount,\n        paintStartColumnIndex: paintStartColumnIndex,\n        paintEndColumnIndex: paintEndColumnIndex,\n        nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n        nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n        bodyTrHeight: this.xvar.bodyTrHeight,\n        virtualScrollX: this.config.virtualScrollX,\n        virtualScrollY: this.config.virtualScrollY,\n    };\n    let frozenScrollConfig = jQuery.extend({}, scrollConfig, {\n        paintStartRowIndex: 0,\n        paintRowCount: this.xvar.frozenRowIndex\n    });\n\n    // aside\n    if (cfg.asidePanelWidth > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n\n        repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum) {\n            // 바닥 요약 (footSum에 대한 aside 사용안함)\n            repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n        }\n    }\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n\n        repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n        }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > 0) {\n        // 상단 행고정\n        repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n    repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n    // 바닥 요약\n    if (cfg.footSum && this.needToPaintSum) {\n        repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n    // right\n    if (cfg.rightSum) {\n        // todo : right 표현 정리\n    }\n\n    /// mergeCells\n    if (cfg.body.mergeCells && this.list.length) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n            mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n    }\n\n    this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n    this.xvar.paintStartRowIndex = paintStartRowIndex;\n    this.xvar.paintRowCount = paintRowCount;\n    this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n    this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n    this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n    this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n    this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n    this.xvar.dataRowCount = list.length;\n    this.needToPaintSum = false;\n\n    PAGE.statusUpdate.call(this);\n};\n\nconst repaintCell = function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {\n    let self = this,\n        cfg = this.config,\n        list = this.list;\n\n    let updateCell = this.$[\"panel\"][_panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + _rowIndex + '\"][data-ax6grid-column-colindex=\"' + _colIndex + '\"]')\n            .find('[data-ax6grid-cellholder]'),\n        colGroup = this.colGroup,\n        col = colGroup[_colIndex];\n\n    updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n    if (col.editor && col.editor.updateWith) {\n        col.editor.updateWith.forEach(function (updateColumnKey) {\n            colGroup.forEach(function (col) {\n                if (col.key == updateColumnKey) {\n                    let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                        panelName = UTIL.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                        updateWithCell = self.$[\"panel\"][panelName]\n                            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                            .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                            .find('[data-ax6grid-cellholder]');\n\n                    updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                }\n            });\n        });\n    }\n\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        headerColGroup = this.headerColGroup,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n        headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n        if (cfg.body.grouping) {\n            bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n        }\n        if (cfg.footSum) {\n            footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n        }\n    }\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        let tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty().get(0).innerHTML = SS.join('');\n        return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            di, dl, tri, trl, ci, cl,\n            col, cellHeight, colAlign;\n\n        for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n            if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                let rowTable = _groupRow;\n                SS = [];\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                        })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                }\n                _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n            }\n        }\n    };\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n            replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                paintStartRowIndex: 0,\n                paintRowCount: this.xvar.frozenRowIndex,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            });\n        }\n\n        replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n        }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n};\n\nconst repaintRow = function (_dindex) {\n    let self = this,\n        cfg = this.config,\n        list = this.list;\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        asideBodyRowData = this.asideBodyRowData,\n        leftBodyRowData = this.leftBodyRowData,\n        bodyRowData = this.bodyRowData,\n        leftFootSumData = this.leftFootSumData,\n        footSumData = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData = this.bodyGroupingData,\n        bodyAlign = cfg.body.align,\n        paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n        SS.push('<colgroup>');\n        for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n            SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n        }\n        SS.push('<col  />');\n        SS.push('</colgroup>');\n\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('<tr class=\"tr-sum\">');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n            SS.push('</tr>');\n        }\n\n        SS.push('</table>');\n\n        _elTarget.empty().get(0).innerHTML = SS.join('');\n        return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n        if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n            _scrollConfig = {\n                paintStartRowIndex: 0,\n                paintRowCount: _list.length\n            };\n        }\n\n        for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n            let len;\n            len = _list.length;\n            if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n            }\n            return len;\n        })(); di < dl; di++) {\n            if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                let rowTable = _groupRow;\n                SS = [];\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax6grid-data-index=\"' + di + '\" ',\n                            'data-ax6grid-column-row=\"' + tri + '\" ',\n                            'data-ax6grid-column-col=\"' + ci + '\" ',\n                            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                        })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax6grid-column-row=\"null\" ',\n                        'data-ax6grid-column-col=\"null\" ',\n                        'data-ax6grid-data-index=\"' + di + '\" ',\n                        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                }\n                _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n            }\n        }\n    };\n    let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n        let _elTarget = this.$.panel[_elTargetKey],\n            SS = [],\n            tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow,\n            odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n            for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                col = rowTable.rows[tri].cols[ci];\n                cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                colAlign = col.align || bodyAlign;\n\n                SS.push('<td ',\n                    'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                    'data-ax6grid-data-index=\"' + di + '\" ',\n                    'data-ax6grid-data-o-index=\"' + odi + '\" ',\n                    'data-ax6grid-column-row=\"' + tri + '\" ',\n                    'data-ax6grid-column-col=\"' + ci + '\" ',\n                    'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                    'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                    'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                    (function (_focusedColumn, _selectedColumn) {\n                        let attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax6grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax6grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    'class=\"' + (function (_col) {\n                        let tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    item: _list[di],\n                                    index: di\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }).call(this, col) + '\" ',\n                    'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                SS.push((function (_cellHeight) {\n                    let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                    if (!col.multiLine) {\n                        _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                    }\n\n                    return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                        ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                        '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                SS.push('</td>');\n            }\n            SS.push('<td ',\n                'data-ax6grid-column-row=\"null\" ',\n                'data-ax6grid-column-col=\"null\" ',\n                'data-ax6grid-data-index=\"' + di + '\" ',\n                'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n                'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                '></td>');\n        }\n\n        _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n    };\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n        }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n    } else {\n        replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n    }\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            else {\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        else {\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n        }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n    }\n};\n\nconst scrollTo = function (css, opts) {\n    let self = this;\n    if (typeof opts === \"undefined\") opts = {timeoutUnUse: false};\n    if (this.isInlineEditing) {\n        for (var key in this.inlineEditing) {\n            //if(this.inlineEditing[key].editor.type === \"select\") {}\n            // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n            inlineEdit.deActive.call(this, \"ESC\", key);\n        }\n    }\n\n    if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n        this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n        this.$.panel[\"left-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n        this.$.panel[\"top-body-scroll\"].css({left: css.left});\n    }\n\n    this.$.panel[\"body-scroll\"].css(css);\n\n    if (this.config.footSum && \"left\" in css) {\n        this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n    }\n\n    // 바디 리페인팅 this.__throttledScroll 은 body init 에서 초기화\n    if (this.__throttledScroll) {\n        this.__throttledScroll(css, opts);\n    } else {\n        if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n            repaint.call(this);\n        } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n            repaint.call(this);\n        }\n        if (opts.callback) {\n            opts.callback();\n        }\n    }\n};\n\nconst blur = function () {\n    columnSelect.focusClear.call(this);\n    columnSelect.clear.call(this);\n    if (this.isInlineEditing) {\n        inlineEdit.deActive.call(this);\n    }\n};\n\nconst moveFocus = function (_position) {\n    let focus = {\n        \"UD\": function (_dy) {\n            let moveResult = true,\n                focusedColumn, originalColumn, while_i,\n                nPanelInfo;\n\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n\n            if (!focusedColumn) return false;\n\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n            if (_dy > 0) {\n                // 아래로\n                if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                    focusedColumn.dindex = focusedColumn.dindex + _dy;\n                    focusedColumn.doindex = focusedColumn.doindex + _dy;\n                    focusedColumn.rowIndex = 0;\n                    if (focusedColumn.dindex > this.list.length - 1) {\n                        focusedColumn.dindex = focusedColumn.doindex = this.list.length - 1;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                }\n            }\n            else {\n                // 위로\n                if (focusedColumn.rowIndex + _dy < 0) {\n                    focusedColumn.dindex = focusedColumn.dindex + _dy;\n                    focusedColumn.doindex = focusedColumn.doindex + _dy;\n                    focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                    if (focusedColumn.dindex < 0) {\n                        focusedColumn.dindex = focusedColumn.doindex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                }\n            }\n\n            while_i = 0;\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                    focusedColumn.colIndex--;\n                } else {\n                    focusedColumn.rowIndex--;\n                }\n\n                if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                    // find fail\n                    moveResult = false;\n                    break;\n                }\n                while_i++;\n            }\n\n            nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n            // if mergeCells\n            if (this.config.body.mergeCells && this.list.length) {\n                while (!this.$.panel[nPanelInfo.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                    if (_dy > 0) {\n                        focusedColumn.dindex++;\n                    } else {\n                        focusedColumn.dindex--;\n                    }\n\n                    if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                        break;\n                    }\n                }\n                nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            }\n\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n\n            if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n                    let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;\n                    if (newTop < 0) newTop = 0;\n                    scrollTo.call(this, {top: -newTop, timeoutUnUse: false});\n                    SCROLLER.resize.call(this);\n                }\n                else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                    scrollTo.call(this, {top: (this.xvar.virtualPaintRowCount - 2 - focusedColumn.dindex) * this.xvar.bodyTrHeight, timeoutUnUse: false});\n                    SCROLLER.resize.call(this);\n                }\n            }\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n            this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            return moveResult;\n        },\n        \"LR\": function (_dx) {\n            let moveResult = true,\n                focusedColumn, originalColumn,\n                while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n            for (var c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (!focusedColumn) return false;\n\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n            if (_dx < 0) {\n                focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                if (focusedColumn.colIndex < 0) {\n                    focusedColumn.colIndex = 0;\n                    moveResult = false;\n                }\n            }\n            else {\n                focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                    focusedColumn.colIndex = this.colGroup.length - 1;\n                    moveResult = false;\n                }\n            }\n\n            if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                focusedColumn.rowIndex = 0;\n            }\n\n            if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n                if (_dx < 0) {\n                    while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex--;\n                        if (focusedColumn.colIndex <= 0) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex++;\n                        if (focusedColumn.colIndex >= this.colGroup.length) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                if (_dx < 0) {\n                    while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex--;\n                        if (focusedColumn.colIndex <= 0) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                } else {\n                    while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                        focusedColumn.colIndex++;\n                        if (focusedColumn.colIndex >= this.colGroup.length) {\n                            // find fail\n                            moveResult = false;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n            // if mergeCells\n            if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                while (!this.$.panel[nPanelInfo.panelName]\n                    .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                    focusedColumn.dindex--;\n\n                    if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                        break;\n                    }\n                }\n                nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            }\n\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리\n            let isScrollTo = (function () {\n                if (!this.config.virtualScrollX) return false;\n                let scrollLeft = 0;\n                if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n                    if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n                        scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n                        scrollTo.call(this, {left: scrollLeft});\n                        HEADER.scrollTo.call(this, {left: scrollLeft});\n                        SCROLLER.resize.call(this);\n                        return true;\n                    }\n                    else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n                        if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                            scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                            scrollTo.call(this, {left: -scrollLeft});\n                            HEADER.scrollTo.call(this, {left: -scrollLeft});\n                            SCROLLER.resize.call(this);\n                        }\n                        return true;\n                    }\n                }\n                scrollLeft = null;\n                return false;\n            }).call(this);\n\n            containerPanelName = nPanelInfo.containerPanelName;\n            isScrollPanel = nPanelInfo.isScrollPanel;\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n            var $column = this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n                // todo : 컬럼이동할 때에도 scrollTo 체크\n                var newLeft = (function () {\n                    if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                        return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                    } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                        return $column.position().left;\n                    } else {\n                        return;\n                    }\n                }).call(this);\n\n                if (typeof newLeft !== \"undefined\") {\n                    HEADER.scrollTo.call(this, {left: -newLeft});\n                    scrollTo.call(this, {left: -newLeft});\n                    SCROLLER.resize.call(this);\n                }\n            }\n\n            return moveResult;\n        },\n        \"INDEX\": function (_dindex) {\n            let moveResult = true,\n                focusedColumn, originalColumn,\n                while_i;\n\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (!focusedColumn) {\n                focusedColumn = {\n                    rowIndex: 0,\n                    colIndex: 0\n                }\n            }\n            originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n            columnSelect.focusClear.call(this);\n            columnSelect.clear.call(this);\n\n\n            if (_dindex == \"end\") {\n                _dindex = this.list.length - 1;\n            }\n\n            focusedColumn.dindex = _dindex;\n            focusedColumn.rowIndex = 0;\n\n            while_i = 0;\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                    focusedColumn.colIndex--;\n                } else {\n                    focusedColumn.rowIndex--;\n                }\n\n                if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                    // find fail\n                    break;\n                }\n                while_i++;\n            }\n\n            let nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n            focusedColumn.panelName = nPanelInfo.panelName;\n\n            // 포커스 컬럼의 위치에 따라 스크롤 처리.\n            (function () {\n                if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                    if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n                        scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                        SCROLLER.resize.call(this);\n                    }\n                    else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                        scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n                        SCROLLER.resize.call(this);\n                    }\n                }\n            }).call(this);\n\n            this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n            this.$.panel[focusedColumn.panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                .attr('data-ax6grid-column-focused', \"true\");\n\n            return moveResult;\n        }\n    };\n\n    let processor = {\n        \"UP\": function () {\n            return focus[\"UD\"].call(this, -1);\n        },\n        \"DOWN\": function () {\n            return focus[\"UD\"].call(this, 1);\n        },\n        \"LEFT\": function () {\n            return focus[\"LR\"].call(this, -1);\n        },\n        \"RIGHT\": function () {\n            return focus[\"LR\"].call(this, 1);\n        },\n        \"HOME\": function () {\n            return focus[\"INDEX\"].call(this, 0);\n        },\n        \"END\": function () {\n            return focus[\"INDEX\"].call(this, \"end\");\n        },\n        \"position\": function (_position) {\n            return focus[\"INDEX\"].call(this, _position);\n        }\n    };\n\n    if (_position in processor) {\n        return processor[_position].call(this);\n    } else {\n        return processor[\"position\"].call(this, _position);\n    }\n};\n\nconst inlineEdit = {\n    active(_focusedColumn, _e, _initValue) {\n        let self = this,\n            dindex, doindex, colIndex, rowIndex, panelName, colspan,\n            col, editor;\n\n        for (var key in _focusedColumn) {\n            panelName = _focusedColumn[key].panelName;\n            dindex = _focusedColumn[key].dindex;\n            doindex = _focusedColumn[key].doindex;\n            colIndex = _focusedColumn[key].colIndex;\n            rowIndex = _focusedColumn[key].rowIndex;\n            colspan = _focusedColumn[key].colspan;\n\n            // 인라인 에디팅을 멈춰야 하는 경우 조건\n            col = this.colGroup[colIndex];\n            if (!(editor = col.editor)) return this;\n\n            // editor disabled 체크\n            if (U.isFunction(editor.disabled)) {\n                if (editor.disabled.call({\n                        list: this.list,\n                        dindex: dindex,\n                        item: this.list[dindex],\n                        key: col.key,\n                        value: _initValue\n                    })) {\n                    return this;\n                }\n            }\n\n            // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n            if (!(function (_editor, _type) {\n                    if (_editor.type in INLINE_EDITOR) {\n                        return (INLINE_EDITOR[_editor.type].editMode == \"popup\");\n                    }\n                })(editor)) {\n                // 체크 박스 타입이면 값 변경 시도\n                if (editor.type == \"checkbox\") {\n                    let checked, newValue;\n                    if (editor.config && editor.config.trueValue) {\n                        if (checked = !(_initValue == editor.config.trueValue)) {\n                            newValue = editor.config.trueValue;\n                        } else {\n                            newValue = editor.config.falseValue;\n                        }\n                    } else {\n                        newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                    }\n\n                    DATA.setValue.call(self, dindex, doindex, col.key, newValue);\n                    updateRowState.call(self, [\"cellChecked\"], dindex, doindex, {\n                        key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                        editorConfig: col.editor.config, checked: checked\n                    });\n                }\n                return this;\n            }\n\n            if (this.list[dindex].__isGrouping) {\n                return false;\n            }\n            if (key in this.inlineEditing) {\n                return false;\n            }\n\n            this.inlineEditing[key] = {\n                editor: editor,\n                panelName: panelName,\n                columnKey: key,\n                column: _focusedColumn[key],\n                useReturnToSave: INLINE_EDITOR[editor.type].useReturnToSave\n            };\n            this.isInlineEditing = true;\n        }\n        if (this.isInlineEditing) {\n\n            let originalValue = DATA.getValue.call(self, dindex, doindex, col.key),\n                initValue = (function (__value, __editor) {\n                    if (U.isNothing(__value)) {\n                        __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                    }\n\n                    if (__editor.type == \"money\") {\n                        return U.number(__value, {\"money\": true});\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, _initValue, editor);\n\n            this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                .find('[data-ax6grid-cellholder]');\n\n            this.inlineEditing[key].$inlineEditor = INLINE_EDITOR[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n            return true;\n        }\n    },\n    deActive(_msg, _key, _value) {\n        // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n        if (!this.inlineEditing[_key]) return this;\n\n        let panelName = this.inlineEditing[_key].panelName,\n            dindex = this.inlineEditing[_key].column.dindex,\n            doindex = this.inlineEditing[_key].column.doindex,\n            rowIndex = this.inlineEditing[_key].column.rowIndex,\n            colIndex = this.inlineEditing[_key].column.colIndex,\n            column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n            editorValue = (function ($inlineEditor) {\n                if (typeof _value === \"undefined\") {\n                    if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                        return $inlineEditor.val();\n                    } else {\n                        _msg = \"CANCEL\";\n                        return false;\n                    }\n                } else {\n                    return _value;\n                }\n            })(this.inlineEditing[_key].$inlineEditor),\n            newValue = (function (__value, __editor) {\n                if (__editor.type == \"money\") {\n                    return U.number(__value);\n                }\n                else {\n                    return __value;\n                }\n            }).call(this, editorValue, column.editor);\n\n        let action = {\n            \"CANCEL\"(_dindex, _column, _newValue) {\n                action[\"__clear\"].call(this);\n            },\n            \"RETURN\"(_dindex, _doindex, _column, _newValue) {\n                if (DATA.setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {\n                    action[\"__clear\"].call(this);\n                    repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);\n                } else {\n                    action[\"__clear\"].call(this);\n                }\n            },\n            \"__clear\"() {\n                this.isInlineEditing = false;\n                let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                if (bindedAx5ui == \"ax5picker\") {\n                    this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                } else if (bindedAx5ui == \"ax5select\") {\n                    this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                }\n\n                this.inlineEditing[_key].$inlineEditor.remove();\n                this.inlineEditing[_key].$inlineEditor = null;\n                this.inlineEditing[_key].$inlineEditorCell = null;\n                this.inlineEditing[_key] = undefined;\n                delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n            }\n        };\n\n        if (_msg in action) {\n            action[_msg || \"RETURN\"].call(this, dindex, doindex, column, newValue);\n        } else {\n            action[\"__clear\"].call(this);\n        }\n    },\n    keydown(key, columnKey, _options) {\n        let processor = {\n            \"ESC\"() {\n                for (var columnKey in this.inlineEditing) {\n                    inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                }\n            },\n            \"RETURN\"() {\n                if (this.isInlineEditing) {\n                    if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                        inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                    }else{\n                        return false;\n                    }\n                } else {\n\n                    for (var k in this.focusedColumn) {\n                        let _column = this.focusedColumn[k],\n                            column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                            dindex = _column.dindex,\n                            doindex = _column.doindex,\n                            value = \"\",\n                            col = this.colGroup[_column.colIndex];\n\n                        if (column) {\n                            if (!this.list[dindex].__isGrouping) {\n                                value = DATA.getValue.call(this, dindex, doindex, column.key);\n                            }\n                        }\n\n                        if (col.editor && INLINE_EDITOR[col.editor.type].editMode === \"inline\") {\n                            if (_options && _options.moveFocus) {\n\n                            }\n                            else {\n                                if (column.editor && column.editor.type == \"checkbox\") {\n                                    value = DATA.getValue.call(this, dindex, doindex, column.key);\n\n                                    let checked, newValue;\n                                    if (column.editor.config && column.editor.config.trueValue) {\n                                        // console.log(value, column.editor.config.trueValue);\n\n                                        if (value != column.editor.config.trueValue) {\n                                            newValue = column.editor.config.trueValue;\n                                            checked = true;\n                                        } else {\n                                            newValue = column.editor.config.falseValue;\n                                            checked = false;\n                                        }\n                                    } else {\n                                        newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                    }\n\n                                    DATA.setValue.call(this, dindex, doindex, column.key, newValue);\n                                    updateRowState.call(this, [\"cellChecked\"], dindex, doindex, {\n                                        key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                        editorConfig: column.editor.config, checked: checked\n                                    });\n                                }\n                            }\n                        } else {\n                            inlineEdit.active.call(this, this.focusedColumn, null, value);\n                        }\n                    }\n                }\n                return true;\n            }\n        };\n\n        if (key in processor) {\n            processor[key].call(this, key, columnKey, _options);\n        }\n    }\n};\n\nconst getExcelString = function () {\n    let cfg = this.config,\n        list = this.list,\n        bodyRowData = this.bodyRowTable,\n        footSumData = this.footSumTable,\n        bodyGroupingData = this.bodyGroupingTable;\n\n    // body-scroll 의 포지션에 의존적이므로..\n    let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n        let SS = [],\n            di, dl,\n            tri, trl,\n            ci, cl,\n            col, val;\n\n        //SS.push('<table border=\"1\">');\n        for (di = 0, dl = _list.length; di < dl; di++) {\n            let isGroupingRow = false, rowTable;\n\n            if (_groupRow && \"__isGrouping\" in _list[di]) {\n                rowTable = _groupRow;\n                isGroupingRow = true;\n            } else {\n                rowTable = _bodyRow;\n            }\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, val, \"text\"), '&nbsp;</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n        }\n        //SS.push('</table>');\n        return SS.join('');\n    };\n    let getSum = function (_colGroup, _bodyRow, _list) {\n        let SS = [],\n            tri, trl,\n            ci, cl,\n            col;\n\n        //SS.push('<table border=\"1\">');\n        for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n            SS.push('\\n<tr>');\n            for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                col = _bodyRow.rows[tri].cols[ci];\n                SS.push('<td ',\n                    'colspan=\"' + col.colspan + '\" ',\n                    'rowspan=\"' + col.rowspan + '\" ',\n                    '>', getSumFieldValue.call(this, _list, col), '</td>');\n            }\n            SS.push('\\n</tr>');\n        }\n        //SS.push('</table>');\n\n        return SS.join('');\n    };\n\n    let po = [];\n    po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n    if (cfg.footSum) {\n        // 바닥 요약\n        po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n    }\n\n    // right\n    if (cfg.rightSum) {\n        // todo : right 표현 정리\n    }\n\n    return po.join('');\n};\n\nconst toggleCollapse = function (_dindex, _doindex, _collapse) {\n    if (DATA.toggleCollapse.call(this, _dindex, _doindex, _collapse)) {\n        this.proxyList = DATA.getProxyList.call(this, this.list);\n        repaint.call(this);\n    }\n};\n\nconst click = function (_dindex, _doindex) {\n    let that = {\n        self: this,\n        page: this.page,\n        list: this.list,\n        item: this.list[_dindex],\n        dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onClick) {\n        this.config.body.onClick.call(that);\n    }\n\n    that = null;\n    // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n};\n\nconst dblClick = function (_dindex, _doindex) {\n    let that = {\n        self: this,\n        page: this.page,\n        list: this.list,\n        item: this.list[_dindex],\n        dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onDBLClick) {\n        this.config.body.onDBLClick.call(that);\n    }\n\n    that = null;\n};\n\nexport default {\n    init: init,\n    repaint: repaint,\n    repaintCell: repaintCell,\n    repaintRow: repaintRow,\n    updateRowState: updateRowState,\n    updateRowStateAll: updateRowStateAll,\n    scrollTo: scrollTo,\n    blur: blur,\n    moveFocus: moveFocus,\n    inlineEdit: inlineEdit,\n    getExcelString: getExcelString,\n    toggleCollapse: toggleCollapse,\n    click: click,\n    dblClick: dblClick\n};"]}