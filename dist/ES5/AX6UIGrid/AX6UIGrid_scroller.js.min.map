{"version":3,"sources":["AX6UIGrid_scroller.js"],"names":["_jqmin","require","_AX6Util","_AX6Info","_AX6UIGrid_util","_AX6UIGrid_header","_AX6UIGrid_body","moveout_timer","Date","getTime","convertScrollPosition","vertical","css","_var","_content_height","_panel_height","_scroller_height","_vertical_scroller_height","verticalScrollBarHeight","top","horizontal","_content_width","_panel_width","_scroller_width","_horizontal_scroller_width","horizontalScrollBarWidth","left","convertScrollBarPosition","_top","scrollPositon","call","this","_AX6UIGrid_body2","default","scrollTo","self","type","_left","_AX6UIGrid_header2","scrollBarMover","click","track","bar","e","trackBox","width","innerWidth","height","innerHeight","$","xvar","scrollContentHeight","scrollContentWidth","outerHeight","outerWidth","newTop","_AX6UIGrid_util2","getMousePosition","clientY","trackOffset","barBox","clientX","getScrollerPosition","newLeft","mouseObj","on","__da","mousePosition","barOffset","_jqmin2","document","body","ENM","instanceId","off","removeAttr","scrollContentMover","wheel","delta","_body_scroll_position","position","body_panel_height","body_panel_width","isNaN","_left_is_end","x","y","_top_is_end","callback","resize","getContentPosition","__x_da","__y_da","touchmoved","noRepaint","_AX6Util2","stopEvent","originalEvent","attr","init","margin","config","scroller","trackPadding","size","bind","target","getAttribute","detail","wheelDelta","deltaX","E","deltaY","_AX6Info2","supportTouch","barMinSize"],"mappings":"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","file":"AX6UIGrid_scroller.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"../AX6Util\";\nimport info from \"../AX6Info\";\nimport UTIL from \"./AX6UIGrid_util\";\nimport HEADER from \"./AX6UIGrid_header\";\nimport BODY from \"./AX6UIGrid_body\";\n\nlet moveout_timer = (new Date()).getTime();\n\nconst convertScrollPosition = {\n    \"vertical\": function (css, _var) {\n        let _content_height = _var._content_height - _var._panel_height,\n            _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\n            top = (_content_height * css.top) / _scroller_height;\n\n        if (top < 0) top = 0;\n        else if (_content_height < top) {\n            top = _content_height;\n        }\n        return {\n            top: -top\n        }\n    },\n    \"horizontal\": function (css, _var) {\n        let _content_width = _var._content_width - _var._panel_width,\n            _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\n            left = (_content_width * css.left) / _scroller_width;\n\n        if (left < 0) left = 0;\n        else if (_content_width < left) {\n            left = _content_width;\n        }\n        return {\n            left: -left\n        }\n    }\n};\n\nconst convertScrollBarPosition = {\n    \"vertical\": function (_top, _var) {\n\n        let self = this,\n            type = \"vertical\",\n            _content_height = _var._content_height - _var._panel_height,\n            _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\n            top = (_scroller_height * _top) / _content_height,\n            scrollPositon;\n\n        if (-top > _scroller_height) {\n            top = -_scroller_height;\n\n            scrollPositon = convertScrollPosition[type].call(this, {top: -top}, {\n                _content_width: _var._content_width,\n                _content_height: _var._content_height,\n                _panel_width: _var._panel_width,\n                _panel_height: _var._panel_height,\n                _horizontal_scroller_width: _var._horizontal_scroller_width,\n                _vertical_scroller_height: _var._vertical_scroller_height,\n                verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n            });\n\n            BODY.scrollTo.call(self, scrollPositon);\n        }\n\n        return -top\n    },\n    \"horizontal\": function (_left, _var) {\n        let self = this,\n            type = \"horizontal\",\n            _content_width = _var._content_width - _var._panel_width,\n            _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\n            left = (_scroller_width * _left) / _content_width,\n            scrollPositon;\n\n        if (-left > _scroller_width) {\n            left = -_scroller_width;\n            scrollPositon = convertScrollPosition[type].call(this, {left: -left}, {\n                _content_width: _var._content_width,\n                _content_height: _var._content_height,\n                _panel_width: _var._panel_width,\n                _panel_height: _var._panel_height,\n                _horizontal_scroller_width: _var._horizontal_scroller_width,\n                _vertical_scroller_height: _var._vertical_scroller_height,\n                verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n            });\n\n            HEADER.scrollTo.call(self, scrollPositon);\n            BODY.scrollTo.call(self, scrollPositon);\n        }\n\n        return -left\n    }\n};\n\nconst scrollBarMover = {\n    \"click\": function (track, bar, type, e) {\n\n        // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\n        if ((new Date()).getTime() - moveout_timer < 20) {\n            return false;\n        }\n\n        let self = this,\n            trackOffset = track.offset(),\n            barBox = {\n                width: bar.outerWidth(), height: bar.outerHeight()\n            },\n            trackBox = {\n                width: track.innerWidth(), height: track.innerHeight()\n            },\n            _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n            _panel_height = self.$[\"panel\"][\"body\"].height(),\n            _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n            _panel_width = self.$[\"panel\"][\"body\"].width(),\n            _content_height = self.xvar.scrollContentHeight,\n            _content_width = self.xvar.scrollContentWidth,\n            verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n            horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n            getScrollerPosition = {\n                \"vertical\": function (e) {\n                    let mouseObj = UTIL.getMousePosition(e);\n                    // track을 벗어 나지 안도록 범위 체크\n                    let newTop = mouseObj.clientY - trackOffset.top;\n                    if (newTop < 0) {\n                        newTop = 0;\n                    }\n                    else if ((newTop + barBox.height) > trackBox.height) {\n                        newTop = trackBox.height - barBox.height;\n                    }\n                    return {top: newTop};\n                },\n                \"horizontal\": function (e) {\n                    let mouseObj = UTIL.getMousePosition(e);\n                    // track을 벗어 나지 안도록 범위 체크\n                    let newLeft = mouseObj.clientX - trackOffset.left;\n                    if (newLeft < 0) {\n                        newLeft = 0;\n                    }\n                    else if ((newLeft + barBox.width) > trackBox.width) {\n                        newLeft = trackBox.width - barBox.width;\n                    }\n                    return {left: newLeft};\n                }\n            },\n            css = getScrollerPosition[type](e);\n\n        bar.css(css);\n\n        let scrollPositon = convertScrollPosition[type].call(self, css, {\n            _content_width: _content_width,\n            _content_height: _content_height,\n            _panel_width: _panel_width,\n            _panel_height: _panel_height,\n            _horizontal_scroller_width: _horizontal_scroller_width,\n            _vertical_scroller_height: _vertical_scroller_height,\n            verticalScrollBarHeight: verticalScrollBarHeight,\n            horizontalScrollBarWidth: horizontalScrollBarWidth\n        });\n        if (type === \"horizontal\") HEADER.scrollTo.call(self, scrollPositon);\n        BODY.scrollTo.call(self, scrollPositon);\n\n        scrollPositon = null;\n    },\n    \"on\": function (track, bar, type, e) {\n        let self = this,\n            barOffset = bar.position(),\n            barBox = {\n                width: bar.outerWidth(), height: bar.outerHeight()\n            },\n            trackBox = {\n                width: track.innerWidth(), height: track.innerHeight()\n            },\n\n            _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n            _panel_height = self.$[\"panel\"][\"body\"].height(),\n            _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n            _panel_width = self.$[\"panel\"][\"body\"].width(),\n            _content_height = self.xvar.scrollContentHeight,\n            _content_width = self.xvar.scrollContentWidth,\n            verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n            horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n\n            getScrollerPosition = {\n                \"vertical\": function (e) {\n                    var mouseObj = UTIL.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newTop = barOffset.top + self.xvar.__da;\n                    if (newTop < 0) {\n                        newTop = 0;\n                    }\n                    else if ((newTop + barBox.height) > trackBox.height) {\n                        newTop = trackBox.height - barBox.height;\n                    }\n                    return {top: newTop};\n                },\n                \"horizontal\": function (e) {\n                    var mouseObj = UTIL.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newLeft = barOffset.left + self.xvar.__da;\n                    if (newLeft < 0) {\n                        newLeft = 0;\n                    }\n                    else if ((newLeft + barBox.width) > trackBox.width) {\n                        newLeft = trackBox.width - barBox.width;\n                    }\n                    return {left: newLeft};\n                }\n            };\n\n        self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n        jQuery(document.body)\n            .on(UTIL.ENM[\"mousemove\"] + \".ax6grid-\" + this.instanceId, function (e) {\n                let css = getScrollerPosition[type](e);\n                bar.css(css);\n\n                let scrollPositon = convertScrollPosition[type].call(self, css, {\n                    _content_width: _content_width,\n                    _content_height: _content_height,\n                    _panel_width: _panel_width,\n                    _panel_height: _panel_height,\n                    _horizontal_scroller_width: _horizontal_scroller_width,\n                    _vertical_scroller_height: _vertical_scroller_height,\n                    verticalScrollBarHeight: verticalScrollBarHeight,\n                    horizontalScrollBarWidth: horizontalScrollBarWidth\n                });\n\n                if (type === \"horizontal\") HEADER.scrollTo.call(self, scrollPositon);\n\n                BODY.scrollTo.call(self, scrollPositon);\n            })\n            .on(UTIL.ENM[\"mouseup\"] + \".ax6grid-\" + this.instanceId, function (e) {\n                scrollBarMover.off.call(self);\n            })\n            .on(\"mouseleave.ax6grid-\" + this.instanceId, function (e) {\n                scrollBarMover.off.call(self);\n            });\n\n        jQuery(document.body)\n            .attr('unselectable', 'on')\n            .css('user-select', 'none')\n            .on('selectstart', false);\n    },\n    \"off\": function () {\n        moveout_timer = (new Date()).getTime();\n\n        jQuery(document.body)\n            .off(UTIL.ENM[\"mousemove\"] + \".ax6grid-\" + this.instanceId)\n            .off(UTIL.ENM[\"mouseup\"] + \".ax6grid-\" + this.instanceId)\n            .off(\"mouseleave.ax6grid-\" + this.instanceId);\n\n        jQuery(document.body)\n            .removeAttr('unselectable')\n            .css('user-select', 'auto')\n            .off('selectstart');\n    }\n};\n\nconst scrollContentMover = {\n    \"wheel\": function (delta) {\n        let self = this,\n            _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n            _panel_height = self.xvar.body_panel_height,\n            _panel_width = self.xvar.body_panel_width,\n            _content_height = self.xvar.scrollContentHeight,\n            _content_width = self.xvar.scrollContentWidth;\n\n        if (isNaN(_content_height) || isNaN(_content_width)) {\n            return false;\n        }\n\n        let newLeft, newTop,\n            _top_is_end = false,\n            _left_is_end = false;\n\n        newLeft = _body_scroll_position.left - delta.x;\n        newTop = _body_scroll_position.top - delta.y;\n\n        // newTop이 범위를 넘었는지 체크\n        if (newTop >= 0) {\n            newTop = 0;\n            _top_is_end = true;\n        } else if (newTop <= _panel_height - _content_height) {\n            newTop = _panel_height - _content_height;\n            if (newTop >= 0) newTop = 0;\n            _top_is_end = true;\n        } else {\n            if (delta.y == 0) _top_is_end = true;\n        }\n\n        // newLeft이 범위를 넘었는지 체크\n        if (newLeft >= 0) {\n            newLeft = 0;\n            _left_is_end = true;\n        } else if (newLeft <= _panel_width - _content_width) {\n            newLeft = _panel_width - _content_width;\n            if (newLeft >= 0) newLeft = 0;\n            _left_is_end = true;\n        } else {\n            if (delta.x == 0) _left_is_end = true;\n        }\n\n        HEADER.scrollTo.call(self, {left: newLeft});\n        BODY.scrollTo.call(self, {left: newLeft, top: newTop}, {\n            callback: function () {\n                resize.call(self);\n            }\n        });\n\n        return !_top_is_end || !_left_is_end;\n    },\n    \"on\": function () {\n        let self = this,\n            _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n            _panel_height = self.xvar.body_panel_height,\n            _panel_width = self.xvar.body_panel_width,\n            _content_height = self.xvar.scrollContentHeight,\n            _content_width = self.xvar.scrollContentWidth,\n            getContentPosition = function (e) {\n                let mouseObj = UTIL.getMousePosition(e), newLeft, newTop;\n\n                self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n\n                newLeft = _body_scroll_position.left + self.xvar.__x_da;\n                newTop = _body_scroll_position.top + self.xvar.__y_da;\n\n                // newTop이 범위를 넘었는지 체크\n                if (newTop >= 0) {\n                    newTop = 0;\n                } else if (newTop <= _panel_height - _content_height) {\n                    newTop = _panel_height - _content_height;\n                    if (newTop >= 0) newTop = 0;\n                }\n\n                // newLeft이 범위를 넘었는지 체크\n                if (newLeft >= 0) {\n                    newLeft = 0;\n                } else if (newLeft <= _panel_width - _content_width) {\n                    newLeft = _panel_width - _content_width;\n                    if (newLeft >= 0) newLeft = 0;\n                }\n\n                return {\n                    left: newLeft, top: newTop\n                }\n            };\n\n        this.xvar.__x_da = 0; // 이동량 변수 초기화\n        this.xvar.__y_da = 0; // 계산이 잘못 될까바\n        this.xvar.touchmoved = false;\n\n        jQuery(document.body)\n            .on(\"touchmove\" + \".ax6grid-\" + this.instanceId, function (e) {\n                let css = getContentPosition(e);\n\n                resize.call(self);\n                HEADER.scrollTo.call(self, {left: css.left});\n                BODY.scrollTo.call(self, css, {noRepaint: \"noRepaint\"});\n                U.stopEvent(e.originalEvent);\n                self.xvar.touchmoved = true;\n            })\n            .on(\"touchend\" + \".ax6grid-\" + this.instanceId, function (e) {\n                if (self.xvar.touchmoved) {\n                    let css = getContentPosition(e);\n\n                    resize.call(self);\n                    HEADER.scrollTo.call(self, {left: css.left});\n                    BODY.scrollTo.call(self, css);\n                    U.stopEvent(e.originalEvent);\n                    scrollContentMover.off.call(self);\n                }\n            });\n\n        jQuery(document.body)\n            .attr('unselectable', 'on')\n            .css('user-select', 'none')\n            .on('selectstart', false);\n    },\n    \"off\": function () {\n\n        jQuery(document.body)\n            .off(\"touchmove\" + \".ax6grid-\" + this.instanceId)\n            .off(\"touchend\" + \".ax6grid-\" + this.instanceId);\n\n        jQuery(document.body)\n            .removeAttr('unselectable')\n            .css('user-select', 'auto')\n            .off('selectstart');\n    }\n};\n\nconst init = function () {\n    let self = this,\n        margin = this.config.scroller.trackPadding;\n\n    if (margin == 0) {\n        this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size, left: -1});\n        this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size, top: -1});\n    } else {\n        this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size - (margin + 1), left: margin / 2});\n        this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size - (margin + 1), top: margin / 2});\n    }\n\n    this.$[\"scroller\"][\"vertical-bar\"]\n        .on(UTIL.ENM[\"mousedown\"], (function (e) {\n            this.xvar.mousePosition = UTIL.getMousePosition(e);\n            scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n        }).bind(this))\n        .on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n    this.$[\"scroller\"][\"vertical\"]\n        .on(\"click\", (function (e) {\n            if (e.target.getAttribute(\"data-ax6grid-scroller\") == \"vertical\") {\n                scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n            }\n        }).bind(this));\n\n    this.$[\"scroller\"][\"horizontal-bar\"]\n        .on(UTIL.ENM[\"mousedown\"], (function (e) {\n            this.xvar.mousePosition = UTIL.getMousePosition(e);\n            scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n        }).bind(this))\n        .on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n    this.$[\"scroller\"][\"horizontal\"]\n        .on(\"click\", (function (e) {\n            if (e.target.getAttribute(\"data-ax6grid-scroller\") == \"horizontal\") {\n                scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n            }\n        }).bind(this));\n\n    this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', (function (e) {\n        let E = e.originalEvent, delta = {x: 0, y: 0};\n\n        if (E.detail) {\n            delta.y = E.detail * 10;\n        } else {\n            if (typeof E.deltaY === \"undefined\") {\n                delta.y = -E.wheelDelta;\n                delta.x = 0;\n            } else {\n                delta.y = E.deltaY;\n                delta.x = E.deltaX;\n            }\n        }\n\n        if (scrollContentMover.wheel.call(this, delta)) {\n            U.stopEvent(e);\n        }\n    }).bind(this));\n\n    if (info.supportTouch) {\n        this.$[\"container\"][\"body\"]\n            .on(\"touchstart\", '[data-ax6grid-panel]', function (e) {\n                self.xvar.mousePosition = UTIL.getMousePosition(e);\n                scrollContentMover.on.call(self);\n            });\n    }\n\n    this.xvar.body_panel_height = this.$[\"panel\"][\"body\"].height();\n    this.xvar.body_panel_width = this.$[\"panel\"][\"body\"].width();\n};\n\nconst resize = function () {\n    let _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\n        _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\n        _panel_height = this.$[\"panel\"][\"body\"].height(),\n        _panel_width = this.$[\"panel\"][\"body\"].width(),\n        _content_height = this.xvar.scrollContentHeight,\n        _content_width = this.xvar.scrollContentWidth,\n        verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\n        horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\n\n    if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\n    if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\n\n    this.$[\"scroller\"][\"vertical-bar\"].css({\n        top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\n            _content_width: _content_width,\n            _content_height: _content_height,\n            _panel_width: _panel_width,\n            _panel_height: _panel_height,\n            _horizontal_scroller_width: _horizontal_scroller_width,\n            _vertical_scroller_height: _vertical_scroller_height,\n            verticalScrollBarHeight: verticalScrollBarHeight,\n            horizontalScrollBarWidth: horizontalScrollBarWidth\n        }),\n        height: verticalScrollBarHeight\n    });\n\n    this.$[\"scroller\"][\"horizontal-bar\"].css({\n        left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\n            _content_width: _content_width,\n            _content_height: _content_height,\n            _panel_width: _panel_width,\n            _panel_height: _panel_height,\n            _horizontal_scroller_width: _horizontal_scroller_width,\n            _vertical_scroller_height: _vertical_scroller_height,\n            verticalScrollBarHeight: verticalScrollBarHeight,\n            horizontalScrollBarWidth: horizontalScrollBarWidth\n        }),\n        width: horizontalScrollBarWidth\n    });\n\n    this.xvar.body_panel_height = _panel_height;\n    this.xvar.body_panel_width = _panel_width;\n\n    _vertical_scroller_height = null;\n    _horizontal_scroller_width = null;\n    _panel_height = null;\n    _panel_width = null;\n    _content_height = null;\n    _content_width = null;\n    verticalScrollBarHeight = null;\n    horizontalScrollBarWidth = null;\n};\n\n\nexport default {\n    // 타이머\n    moveout_timer: moveout_timer,\n    init: init,\n    resize: resize\n};"]}