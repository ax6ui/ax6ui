{"version":3,"sources":["AX6UIGrid_data.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_page","_AX6UIGrid_util","init","clearGroupingData","_list","i","l","length","returnList","this","config","columnKeys","selected","selectedDataIndexs","push","_jqmin2","default","extend","initData","appendIndex","dataRealRowCount","lineNumber","body","groupingKeys","by","compareString","grouping","list","appendRow","ari","gi","deleted","gl","key","appendRowItem","keys","labels","ki","__isGrouping","__groupingList","__groupingBy","xvar","arrangeData4tree","deletedList","seq","li","tree","parentHash","selfHash","listIndexMap","selfKey","_AX6Util2","isNothing","parentKey","children","setDigit","hashDigit","depth","_parent","_parentHash","collapse","hidden","__origin_index__","set","data","page","use","getProxyList","call","sort","sortInfo","remoteSort","Object","needToPaintSum","frozenRowIndex","paintStartRowIndex","undefined","virtualPaintStartRowIndex","_AX6UIGrid_page2","navigationUpdate","get","_type","getList","concat","add","_row","_dindex","_options","processor","first","last","proxyList","isNumber","_l","_i","splice","remove","__list","treeKeys","substr","filter","deleteRow","ii","update","originIndex","updateChild","_updateData","item","dindex","_k","listIndex","_key","modified","Function","getValue","_doindex","getRealPathForDataItem","originalValue","_value","test","onDataChanged","self","_AX6UIGrid_util2","value","clearSelect","select","_selected","e","cfg","disableSelection","search","selectAll","doindex","_sortInfo","getKeyValue","sortInfoArray","_item","_a_val","_b_val","k","order","orderBy","_b","resetLineNumber","_a","_typeof","append","_callback","statusUpdate","appendDebounceTimes","clearTimeout","appendDebouncer","appendProgress","setTimeout","debounceTime","appendIdle","toggleCollapse","_collapse","_doindx"],"mappings":"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","file":"AX6UIGrid_data.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"../AX6Util\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport UTIL from \"./AX6UIGrid_util\";\n\nconst init = function () {\n\n};\n\nconst clearGroupingData = function (_list) {\n  let i = 0, l = _list.length, returnList = [];\n  for (; i < l; i++) {\n    if (_list[i] && !_list[i][\"__isGrouping\"]) {\n      if (_list[i][this.config.columnKeys.selected]) {\n        this.selectedDataIndexs.push(i);\n      }\n      returnList.push(jQuery.extend({}, _list[i]));\n    }\n  }\n  return returnList;\n};\n\nconst initData = function (_list) {\n  this.selectedDataIndexs = [];\n  // this.deletedList = [];\n  // todo : deletedList 초기화 시점이 언제로 하는게 좋은가. set 메소드에서 초기화 하는 것으로 수정\n\n  let i = 0, l = _list.length,\n    returnList = [],\n    appendIndex = 0,\n    dataRealRowCount = 0,\n    lineNumber = 0;\n\n  if (this.config.body.grouping) {\n\n    let groupingKeys = U.map(this.bodyGrouping.by, function () {\n      return {\n        key: this,\n        compareString: \"\",\n        grouping: false,\n        list: []\n      }\n    });\n\n    let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n    for (; i < l + 1; i++) {\n      gi = 0;\n\n      if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n        this.deletedList.push(_list[i]);\n      }\n      else {\n        compareString = \"\"; // 그룹핑 구문검사용\n        appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄\n\n        // 그룹핑 구문검사\n        for (; gi < gl; gi++) {\n          if (_list[i]) {\n            compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n          }\n\n          if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n            let appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n            for (let ki = 0; ki < gi + 1; ki++) {\n              appendRowItem.keys.push(groupingKeys[ki].key);\n              appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n            }\n            appendRow.push(appendRowItem);\n            groupingKeys[gi].list = [];\n          }\n\n          groupingKeys[gi].list.push(_list[i]);\n          groupingKeys[gi].compareString = compareString;\n        }\n\n        // 새로 추가해야할 그룹핑 row\n        ari = appendRow.length;\n        while (ari--) {\n          returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n        }\n        //~ 그룹핑 구문 검사 완료\n\n        if (_list[i]) {\n          if (_list[i][this.config.columnKeys.selected]) {\n            this.selectedDataIndexs.push(i);\n          }\n          // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.\n          _list[i][\"__original_index\"] = _list[i][\"__index\"] = lineNumber;\n          returnList.push(_list[i]);\n\n          dataRealRowCount++;\n          appendIndex++;\n          lineNumber++;\n        }\n      }\n    }\n  }\n  else {\n    for (; i < l; i++) {\n      if (_list[i]) {\n        if (_list[i][this.config.columnKeys.deleted]) {\n          this.deletedList.push(_list[i]);\n        } else {\n\n          if (_list[i][this.config.columnKeys.selected]) {\n            this.selectedDataIndexs.push(i);\n          }\n\n          // __original_index 인덱스 키가 없다면 추가.\n          if (typeof _list[i][\"__original_index\"] === \"undefined\") {\n            _list[i][\"__original_index\"] = lineNumber;\n          }\n          _list[i][\"__index\"] = lineNumber;\n          dataRealRowCount++;\n          lineNumber++;\n          returnList.push(_list[i]);\n        }\n      }\n    }\n  }\n\n  // 원본 데이터의 갯수\n  // grouping은 제외하고 수집됨.\n  this.xvar.dataRealRowCount = dataRealRowCount;\n  return returnList;\n};\n\nconst arrangeData4tree = function (_list) {\n  this.selectedDataIndexs = [];\n  this.deletedList = [];\n  let i = 0, seq = 0,\n    appendIndex = 0,\n    dataRealRowCount = 0,\n    lineNumber = 0;\n\n  let li = _list.length;\n  let keys = this.config.tree.columnKeys;\n  let hashDigit = this.config.tree.hashDigit;\n  let listIndexMap = {};\n\n  while (li--) {\n    delete _list[li][keys.parentHash];\n    delete _list[li][keys.selfHash];\n    //delete _list[li][keys.childrenLength];\n  }\n\n  /// 루트 아이템 수집\n  i = 0;\n  seq = 0;\n  li = _list.length;\n  for (; i < li; i++) {\n    if (_list[i]) {\n      listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\n\n      if (U.isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === \"top\") { // 최상위 아이템인 경우\n        _list[i][keys.parentKey] = \"top\";\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n        _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n        _list[i][keys.depth] = 0;\n        _list[i][keys.hidden] = false;\n\n        seq++;\n      }\n    }\n  }\n\n  /// 자식 아이템 수집\n  i = 0;\n  lineNumber = 0;\n  for (; i < li; i++) {\n    let _parent, _parentHash;\n    if (_list[i] && _list[i][keys.parentKey] !== \"top\" && typeof _list[i][keys.parentHash] === \"undefined\") {\n\n      if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\n        _parentHash = _parent[keys.selfHash];\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = _parentHash;\n        _list[i][keys.selfHash] = _parentHash + \".\" + U.setDigit(_parent[keys.children].length, hashDigit);\n        _list[i][keys.depth] = _parent[keys.depth] + 1;\n        if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\n        _parent[keys.children].push(_list[i][keys.selfKey]);\n      } else {\n        _list[i][keys.parentKey] = \"top\";\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n        _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n        _list[i][keys.hidden] = false;\n\n        seq++;\n      }\n    }\n\n    if (_list[i]) {\n      if (_list[i][this.config.columnKeys.deleted]) {\n        this.deletedList.push(_list[i]);\n        _list[i][keys.hidden] = true;\n      }\n      else if (_list[i][this.config.columnKeys.selected]) {\n        this.selectedDataIndexs.push(i);\n      }\n\n      _list[i][\"__index\"] = lineNumber;\n      dataRealRowCount++;\n      lineNumber++;\n    }\n  }\n\n  this.listIndexMap = listIndexMap;\n  this.xvar.dataRealRowCount = dataRealRowCount;\n\n  return _list;\n};\n\nconst getProxyList = function (_list) {\n  let i = 0, l = _list.length, returnList = [];\n  for (; i < l; i++) {\n\n    if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {\n      _list[i].__origin_index__ = i;\n      returnList.push(_list[i]);\n    }\n  }\n  return returnList;\n};\n\nconst set = function (data) {\n\n  let list;\n  if (U.isArray(data)) {\n    this.page = null;\n    list = data;\n  } else if (\"page\" in data) {\n    this.page = jQuery.extend({}, data.page);\n    list = data.list;\n  }\n\n  // console.log(this.list.length);\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  } else {\n    this.proxyList = null;\n    this.list = initData.call(this,\n      (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, list) : list\n    );\n  }\n  this.selectedDataIndexs = [];\n  this.deletedList = [];\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n\n  if (this.config.body.grouping) {\n\n  }\n  return this;\n};\n\nconst get = function (_type) {\n  return {\n    list: this.list,\n    page: this.page\n  };\n};\n\nconst getList = function (_type) {\n  let returnList = [];\n  //let list = (this.proxyList) ? this.proxyList : this.list;\n  let list = this.list;\n  let i = 0, l = list.length;\n  switch (_type) {\n    case \"modified\":\n      for (; i < l; i++) {\n        if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.modified]) {\n          returnList.push(jQuery.extend({}, list[i]));\n        }\n      }\n      break;\n    case \"selected\":\n      for (; i < l; i++) {\n        if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.selected]) {\n          returnList.push(jQuery.extend({}, list[i]));\n        }\n      }\n      break;\n    case \"deleted\":\n      //_list = clearGroupingData(this.list);\n      returnList = [].concat(this.deletedList);\n      break;\n    default:\n      returnList = clearGroupingData.call(this, list);\n  }\n  return returnList;\n};\n\nconst add = function (_row, _dindex, _options) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\"() {\n      list = [].concat(_row).concat(list);\n    },\n    \"last\"() {\n      list = list.concat([].concat(_row));\n    }\n  };\n\n  if (this.config.tree.use) {\n    let list = this.list.concat([].concat(_row));\n\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (typeof _dindex === \"undefined\") _dindex = \"last\";\n    if (_dindex in processor) {\n      _row[this.config.columnKeys.modified] = true;\n      processor[_dindex].call(this, _row);\n    } else {\n      if (!U.isNumber(_dindex)) {\n        throw 'invalid argument _dindex';\n      }\n      if (U.isArray(_row)) {\n        for (let _i = 0, _l = _row.length; _i < _l; _i++) {\n          list.splice(_dindex + _i, 0, _row[_i]);\n        }\n      } else {\n        list.splice(_dindex, 0, _row);\n      }\n    }\n\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    }\n    else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    }\n    else {\n      list = initData.call(this, list);\n    }\n\n    this.list = list;\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\n/**\n * list에서 완전 제거 하는 경우 사용.\n * ax5grid.data.remove\n */\nconst remove = function (_dindex) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, 0);\n      } else {\n        list.splice(0, 1);\n      }\n    },\n    \"last\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, list.length - 1);\n      } else {\n        list.splice(list.length - 1, 1);\n      }\n    },\n    \"index\": function (_dindex) {\n      if (this.config.tree.use) {\n        processor.tree.call(this, _dindex);\n      } else {\n        list.splice(_dindex, 1);\n      }\n    },\n    \"selected\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, \"selected\");\n      } else {\n        let __list = [], i, l;\n\n        for (i = 0, l = list.length; i < l; i++) {\n          if (!list[i][this.config.columnKeys.selected]) {\n            __list.push(list[i]);\n          }\n        }\n        list = __list;\n        __list = null;\n        i = null;\n      }\n    },\n    \"tree\": function (_dindex) {\n      let treeKeys = this.config.tree.columnKeys, selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];\n      list = U.filter(list, function () {\n        return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;\n      });\n      treeKeys = null;\n      selfHash = null;\n    },\n  };\n\n  if (typeof _dindex === \"undefined\") _dindex = \"last\";\n  if (_dindex in processor) {\n    processor[_dindex].call(this, _dindex);\n  } else {\n    if (!U.isNumber(_dindex)) {\n      throw 'invalid argument _dindex';\n    }\n    processor[\"index\"].call(this, _dindex);\n  }\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else if (Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else {\n      list = initData.call(this, list);\n    }\n    this.list = list;\n  }\n\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\n\n/**\n * list에서 deleted 처리 repaint\n * ax5grid.data.deleteRow\n */\nconst deleteRow = function (_dindex) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, 0);\n      } else {\n        list[0][this.config.columnKeys.deleted] = true;\n      }\n    },\n    \"last\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, list.length - 1);\n      } else {\n        list[list.length - 1][this.config.columnKeys.deleted] = true;\n      }\n    },\n    \"selected\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, \"selected\");\n      } else {\n        let i = list.length;\n        while (i--) {\n          if (list[i][this.config.columnKeys.selected]) {\n            list[i][this.config.columnKeys.deleted] = true;\n          }\n        }\n        i = null;\n      }\n    },\n    \"tree\": function (_dindex) {\n      let keys = this.config.columnKeys,\n        treeKeys = this.config.tree.columnKeys;\n\n      if (_dindex === \"selected\") {\n\n        let i = list.length;\n        while (i--) {\n          if (list[i][this.config.columnKeys.selected]) {\n            list[i][this.config.columnKeys.deleted] = true;\n\n            let selfHash = list[i][treeKeys.selfHash];\n            let ii = list.length;\n\n            while (ii--) {\n              if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {\n                list[ii][keys.deleted] = true;\n              }\n            }\n\n            selfHash = null;\n            ii = null;\n          }\n        }\n        i = null;\n\n      } else {\n        let selfHash = list[_dindex][treeKeys.selfHash];\n        let i = list.length;\n        while (i--) {\n          if (list[i][treeKeys.selfHash].substr(0, selfHash.length) !== selfHash) {\n            list[i][keys.deleted] = true;\n          }\n        }\n        selfHash = null;\n        i = null;\n      }\n\n      keys = null;\n      treeKeys = null;\n    },\n  };\n\n  if (typeof _dindex === \"undefined\") _dindex = \"last\";\n\n  if (_dindex in processor) {\n    processor[_dindex].call(this, _dindex);\n  } else {\n    if (!U.isNumber(_dindex)) {\n      throw 'invalid argument _dindex';\n    }\n    list[_dindex][this.config.columnKeys.deleted] = true;\n  }\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else if (Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else {\n      list = initData.call(this, list);\n    }\n\n    this.list = list;\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\nconst update = function (_row, _dindex) {\n  if (!U.isNumber(_dindex)) {\n    throw 'invalid argument _dindex';\n  }\n  //\n  this.needToPaintSum = true;\n  this.list.splice(_dindex, 1, _row);\n\n  if (this.config.body.grouping) {\n    this.list = initData.call(this, clearGroupingData.call(this, this.list));\n  }\n};\n\nconst updateChild = function (_dindex, _updateData, _options) {\n  let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n  if (typeof _dindex === \"undefined\") return false;\n  originIndex = this.proxyList[_dindex].__origin_index__;\n\n  if (this.list[originIndex][keys.children]) {\n    this.proxyList = []; // 리셋 프록시\n\n    if (_options && _options.filter) {\n      if (_options.filter.call({item: this.list[originIndex], dindex: originIndex}, this.list[originIndex])) {\n        for (let _k in _updateData) {\n          this.list[originIndex][_k] = _updateData[_k];\n        }\n      }\n    }\n    else {\n      for (let _k in _updateData) {\n        this.list[originIndex][_k] = _updateData[_k];\n      }\n    }\n\n    selfHash = this.list[originIndex][keys.selfHash];\n\n    let i = 0, l = this.list.length;\n    for (; i < l; i++) {\n      if (this.list[i]) {\n        if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n\n          if (_options && _options.filter) {\n            if (_options.filter.call({item: this.list[i], dindex: i}, this.list[i])) {\n              for (let _k in _updateData) {\n                this.list[i][_k] = _updateData[_k];\n              }\n            }\n          }\n          else {\n            for (let _k in _updateData) {\n              this.list[i][_k] = _updateData[_k];\n            }\n          }\n        }\n\n        if (!this.list[i][keys.hidden]) {\n          this.proxyList.push(this.list[i]);\n        }\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst setValue = function (_dindex, _doindex, _key, _value) {\n  let originalValue = getValue.call(this, _dindex, _doindex, _key);\n  let list = this.list;\n  let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n  this.needToPaintSum = true;\n\n  if (originalValue !== _value) {\n    if (/[\\.\\[\\]]/.test(_key)) {\n      try {\n        list[listIndex][this.config.columnKeys.modified] = true;\n        (Function(\"val\", \"this\" + UTIL.getRealPathForDataItem(_key) + \" = val;\")).call(list[listIndex], _value);\n      }\n      catch (e) {\n\n      }\n    } else {\n      list[listIndex][this.config.columnKeys.modified] = true;\n      list[listIndex][_key] = _value;\n    }\n\n    if (this.onDataChanged) {\n      this.onDataChanged.call({\n        self: this,\n        list: this.list,\n        dindex: _dindex,\n        doindex: _doindex,\n        item: this.list[_dindex],\n        key: _key,\n        value: _value\n      });\n    }\n  }\n\n  return true;\n};\n\nlet getValue = function (_dindex, _doindex, _key, _value) {\n  let list = this.list;\n  let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n\n  if (/[\\.\\[\\]]/.test(_key)) {\n    try {\n      _value = (Function(\"\", \"return this\" + UTIL.getRealPathForDataItem(_key) + \";\")).call(list[listIndex]);\n    }\n    catch (e) {\n\n    }\n  } else {\n    _value = list[listIndex][_key];\n  }\n  return _value;\n};\n\nconst clearSelect = function () {\n  this.selectedDataIndexs = [];\n};\n\nconst select = function (_dindex, _doindex, _selected, _options) {\n  let cfg = this.config;\n\n  if (typeof _doindex === \"undefined\") _doindex = _dindex;\n\n  if (!this.list[_doindex]) return false;\n  if (this.list[_doindex].__isGrouping) return false;\n  if (this.list[_doindex][cfg.columnKeys.disableSelection]) return false;\n\n  if (typeof _selected === \"undefined\") {\n    if (this.list[_doindex][cfg.columnKeys.selected] = !this.list[_doindex][cfg.columnKeys.selected]) {\n      this.selectedDataIndexs.push(_doindex);\n    } else {\n      this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n        return this == _doindex;\n      }), 1);\n    }\n  } else {\n    if (this.list[_doindex][cfg.columnKeys.selected] = _selected) {\n      this.selectedDataIndexs.push(_doindex);\n    } else {\n      this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n        return this == _doindex;\n      }), 1);\n    }\n  }\n\n  if (this.onDataChanged && _options && _options.internalCall) {\n    this.onDataChanged.call({\n      self: this,\n      list: this.list,\n      dindex: _dindex,\n      doindex: _doindex,\n      item: this.list[_doindex],\n      key: cfg.columnKeys.selected,\n      value: this.list[_doindex][cfg.columnKeys.selected]\n    });\n  }\n\n  return this.list[_doindex][cfg.columnKeys.selected];\n};\n\nconst selectAll = function (_selected, _options) {\n  let cfg = this.config,\n    dindex = this.list.length;\n\n  this.selectedDataIndexs = [];\n\n  if (typeof _selected === \"undefined\") {\n    while (dindex--) {\n      if (this.list[dindex].__isGrouping) continue;\n      if (_options && _options.filter) {\n        if (_options.filter.call(this.list[dindex]) !== true) {\n          continue;\n        }\n      }\n      if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n      if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n        this.selectedDataIndexs.push(dindex);\n      }\n    }\n  } else {\n    while (dindex--) {\n      if (this.list[dindex].__isGrouping) continue;\n      if (_options && _options.filter) {\n        if (_options.filter.call(this.list[dindex]) !== true) {\n          continue;\n        }\n      }\n      if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n      if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n        this.selectedDataIndexs.push(dindex);\n      }\n    }\n  }\n\n  if (this.onDataChanged && _options && _options.internalCall) {\n    this.onDataChanged.call({\n      self: this,\n      list: this.list\n    });\n  }\n\n  return this.list;\n};\n\nconst sort = function (_sortInfo, _list, _options) {\n  let self = this, list = _list || this.list, sortInfoArray = [], lineNumber = 0;\n  let getKeyValue = function (_item, _key, _value) {\n    if (/[\\.\\[\\]]/.test(_key)) {\n      try {\n        _value = (Function(\"\", \"return this\" + UTIL.getRealPathForDataItem(_key) + \";\")).call(_item);\n      }\n      catch (e) {\n      }\n    } else {\n      _value = _item[_key];\n    }\n    return _value;\n  };\n\n  for (let k in _sortInfo) {\n    sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n  }\n  sortInfoArray = U.filter(sortInfoArray, function () {\n    return typeof this !== \"undefined\";\n  });\n\n  // 정렬조건이 없으면 original_index값을 이용하여 정렬처리\n  if (_options && _options.resetLineNumber && sortInfoArray.length === 0) {\n    sortInfoArray[0] = {key: '__original_index', order: \"asc\"}\n  }\n\n  let i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n  list.sort(function (_a, _b) {\n    for (i = 0; i < l; i++) {\n      _a_val = getKeyValue(_a, sortInfoArray[i].key);\n      _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n      if (typeof _a_val !== typeof _b_val) {\n        _a_val = '' + _a_val;\n        _b_val = '' + _b_val;\n      }\n      if (_a_val < _b_val) {\n        return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n      } else if (_a_val > _b_val) {\n        return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n      }\n    }\n  });\n\n  if (_options && _options.resetLineNumber) {\n    i = 0, l = list.length, lineNumber = 0;\n    for (; i < l; i++) {\n      if (_list[i] && !_list[i][\"__isGrouping\"]) {\n        _list[i][\"__index\"] = lineNumber++;\n      }\n    }\n  }\n\n  if (_list) {\n    return list;\n  } else {\n    this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    PAGE.navigationUpdate.call(this);\n    return this;\n  }\n};\n\nconst append = function (_list, _callback) {\n  let self = this;\n\n  if (this.config.tree.use) {\n    let list = this.list.concat([].concat(_list));\n\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n    list = null;\n  } else {\n    this.list = this.list.concat([].concat(_list));\n  }\n\n  this.appendProgress = true;\n  PAGE.statusUpdate.call(this);\n\n  if (this.appendDebouncer) {\n    if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n      clearTimeout(this.appendDebouncer);\n      self.appendDebounceTimes++;\n    } else {\n      self.appendDebounceTimes = 0;\n      appendIdle.call(self);\n      _callback();\n      return false;\n    }\n  }\n\n  this.appendDebouncer = setTimeout(function () {\n    self.appendDebounceTimes = 0;\n    appendIdle.call(self);\n    _callback();\n  }, this.config.debounceTime);\n\n  // todo : append bounce animation\n};\n\nconst appendIdle = function () {\n  this.appendProgress = false;\n  if (this.config.body.grouping) {\n    this.list = initData.call(this,\n      sort.call(this,\n        this.sortInfo,\n        this.list\n      )\n    );\n  } else {\n    this.list = initData.call(this, this.list);\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n};\n\nconst toggleCollapse = function (_dindex, _doindx, _collapse) {\n  let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n  if (typeof _dindex === \"undefined\") return false;\n  originIndex = this.proxyList[_dindex].__origin_index__;\n\n  if (this.list[originIndex][keys.children]) {\n    this.proxyList = []; // 리셋 프록시\n    if (typeof _collapse == \"undefined\") {\n      _collapse = !(this.list[originIndex][keys.collapse] || false);\n    }\n\n    this.list[originIndex][keys.collapse] = _collapse;\n    selfHash = this.list[originIndex][keys.selfHash];\n\n    let i = this.list.length;\n    while (i--) {\n      if (this.list[i]) {\n        // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);\n        if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n          this.list[i][keys.hidden] = _collapse;\n        }\n\n        if (!this.list[i][keys.hidden]) {\n          this.proxyList.push(this.list[i]);\n        }\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport default {\n  init: init,\n  set: set,\n  get: get,\n  getList: getList,\n  getProxyList: getProxyList,\n  setValue: setValue,\n  getValue: getValue,\n  clearSelect: clearSelect,\n  select: select,\n  selectAll: selectAll,\n  add: add,\n  remove: remove,\n  deleteRow: deleteRow,\n  update: update,\n  updateChild: updateChild,\n  sort: sort,\n  initData: initData,\n  clearGroupingData: clearGroupingData,\n  append: append,\n  toggleCollapse: toggleCollapse\n};"]}