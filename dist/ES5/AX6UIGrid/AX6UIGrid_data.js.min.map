{"version":3,"sources":["AX6UIGrid_data.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_page","_AX6UIGrid_util","init","clearGroupingData","_list","i","l","length","returnList","this","config","columnKeys","selected","selectedDataIndexs","push","_jqmin2","default","extend","initData","body","groupingKeys","by","compareString","grouping","appendRow","ari","gi","deleted","appendIndex","dataRealRowCount","lineNumber","gl","key","appendRowItem","keys","labels","list","ki","__isGrouping","__groupingList","__groupingBy","xvar","arrangeData4tree","deletedList","seq","li","tree","parentHash","selfHash","selfKey","_AX6Util2","isNothing","parentKey","children","setDigit","hashDigit","depth","hidden","_parent","_parentHash","listIndexMap","collapse","__origin_index__","set","data","page","use","getProxyList","proxyList","call","sort","sortInfo","remoteSort","Object","needToPaintSum","frozenRowIndex","paintStartRowIndex","undefined","virtualPaintStartRowIndex","_AX6UIGrid_page2","navigationUpdate","get","_type","getList","concat","add","_row","_dindex","_options","processor","first","last","isNumber","isArray","_i","_l","splice","remove","__list","treeKeys","substr","filter","deleteRow","ii","update","originIndex","updateChild","_updateData","item","dindex","_k","listIndex","_doindex","Function","_key","originalValue","_value","test","onDataChanged","modified","self","_AX6UIGrid_util2","getRealPathForDataItem","value","doindex","getValue","select","e","clearSelect","_selected","cfg","disableSelection","search","internalCall","selectAll","sortInfoArray","getKeyValue","_sortInfo","_item","k","order","orderBy","_a_val","_b_val","_b","_a","_typeof","resetLineNumber","append","_callback","statusUpdate","appendDebouncer","clearTimeout","appendDebounceTimes","appendIdle","debounceTime","setTimeout","appendProgress","_collapse","toggleCollapse","_doindx"],"mappings":"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","file":"AX6UIGrid_data.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"../AX6Util\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport UTIL from \"./AX6UIGrid_util\";\n\nconst init = function () {\n\n};\n\nconst clearGroupingData = function (_list) {\n    let i = 0, l = _list.length, returnList = [];\n    for (; i < l; i++) {\n        if (_list[i] && !_list[i][\"__isGrouping\"]) {\n            if (_list[i][this.config.columnKeys.selected]) {\n                this.selectedDataIndexs.push(i);\n            }\n            returnList.push(jQuery.extend({}, _list[i]));\n        }\n    }\n    return returnList;\n};\n\nconst initData = function (_list) {\n    this.selectedDataIndexs = [];\n    // this.deletedList = [];\n    // todo : deletedList 초기화 시점이 언제로 하는게 좋은가. set 메소드에서 초기화 하는 것으로 수정\n\n    let i = 0, l = _list.length,\n        returnList = [],\n        appendIndex = 0,\n        dataRealRowCount = 0,\n        lineNumber = 0;\n\n    if (this.config.body.grouping) {\n\n        let groupingKeys = U.map(this.bodyGrouping.by, function () {\n            return {\n                key: this,\n                compareString: \"\",\n                grouping: false,\n                list: []\n            }\n        });\n\n        let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n        for (; i < l + 1; i++) {\n            gi = 0;\n\n            if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                this.deletedList.push(_list[i]);\n            }\n            else {\n                compareString = \"\"; // 그룹핑 구문검사용\n                appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄\n\n                // 그룹핑 구문검사\n                for (; gi < gl; gi++) {\n                    if (_list[i]) {\n                        compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n                    }\n\n                    if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n                        let appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n                        for (let ki = 0; ki < gi + 1; ki++) {\n                            appendRowItem.keys.push(groupingKeys[ki].key);\n                            appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n                        }\n                        appendRow.push(appendRowItem);\n                        groupingKeys[gi].list = [];\n                    }\n\n                    groupingKeys[gi].list.push(_list[i]);\n                    groupingKeys[gi].compareString = compareString;\n                }\n\n                // 새로 추가해야할 그룹핑 row\n                ari = appendRow.length;\n                while (ari--) {\n                    returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n                }\n                //~ 그룹핑 구문 검사 완료\n\n                if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n                    // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.\n                    _list[i][\"__original_index\"] = _list[i][\"__index\"] = lineNumber;\n                    returnList.push(_list[i]);\n\n                    dataRealRowCount++;\n                    appendIndex++;\n                    lineNumber++;\n                }\n            }\n        }\n    }\n    else {\n        for (; i < l; i++) {\n            if (_list[i]) {\n                if (_list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else {\n\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n\n                    // __original_index 인덱스 키가 없다면 추가.\n                    if(typeof _list[i][\"__original_index\"] === \"undefined\"){\n                        _list[i][\"__original_index\"] = lineNumber;\n                    }\n                    _list[i][\"__index\"] = lineNumber;\n                    dataRealRowCount++;\n                    lineNumber++;\n                    returnList.push(_list[i]);\n                }\n            }\n        }\n    }\n\n    // 원본 데이터의 갯수\n    // grouping은 제외하고 수집됨.\n    this.xvar.dataRealRowCount = dataRealRowCount;\n    return returnList;\n};\n\nconst arrangeData4tree = function (_list) {\n    this.selectedDataIndexs = [];\n    this.deletedList = [];\n    let i = 0, seq = 0,\n        appendIndex = 0,\n        dataRealRowCount = 0,\n        lineNumber = 0;\n\n    let li = _list.length;\n    let keys = this.config.tree.columnKeys;\n    let hashDigit = this.config.tree.hashDigit;\n    let listIndexMap = {};\n\n    while (li--) {\n        delete _list[li][keys.parentHash];\n        delete _list[li][keys.selfHash];\n        //delete _list[li][keys.childrenLength];\n    }\n\n    /// 루트 아이템 수집\n    i = 0;\n    seq = 0;\n    li = _list.length;\n    for (; i < li; i++) {\n        if (_list[i]) {\n            listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\n\n            if (U.isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === \"top\") { // 최상위 아이템인 경우\n                _list[i][keys.parentKey] = \"top\";\n                _list[i][keys.children] = [];\n                _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                _list[i][keys.depth] = 0;\n                _list[i][keys.hidden] = false;\n\n                seq++;\n            }\n        }\n    }\n\n    /// 자식 아이템 수집\n    i = 0;\n    lineNumber = 0;\n    for (; i < li; i++) {\n        let _parent, _parentHash;\n        if (_list[i] && _list[i][keys.parentKey] !== \"top\" && typeof _list[i][keys.parentHash] === \"undefined\") {\n\n            if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\n                _parentHash = _parent[keys.selfHash];\n                _list[i][keys.children] = [];\n                _list[i][keys.parentHash] = _parentHash;\n                _list[i][keys.selfHash] = _parentHash + \".\" + U.setDigit(_parent[keys.children].length, hashDigit);\n                _list[i][keys.depth] = _parent[keys.depth] + 1;\n                if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\n                _parent[keys.children].push(_list[i][keys.selfKey]);\n            } else {\n                _list[i][keys.parentKey] = \"top\";\n                _list[i][keys.children] = [];\n                _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                _list[i][keys.hidden] = false;\n\n                seq++;\n            }\n        }\n\n        if (_list[i]) {\n            if (_list[i][this.config.columnKeys.deleted]) {\n                this.deletedList.push(_list[i]);\n                _list[i][keys.hidden] = true;\n            }\n            else if (_list[i][this.config.columnKeys.selected]) {\n                this.selectedDataIndexs.push(i);\n            }\n\n            _list[i][\"__index\"] = lineNumber;\n            dataRealRowCount++;\n            lineNumber++;\n        }\n    }\n\n    this.listIndexMap = listIndexMap;\n    this.xvar.dataRealRowCount = dataRealRowCount;\n\n    return _list;\n};\n\nconst getProxyList = function (_list) {\n    let i = 0, l = _list.length, returnList = [];\n    for (; i < l; i++) {\n\n        if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {\n            _list[i].__origin_index__ = i;\n            returnList.push(_list[i]);\n        }\n    }\n    return returnList;\n};\n\nconst set = function (data) {\n\n    let list;\n    if (U.isArray(data)) {\n        this.page = null;\n        list = data;\n    } else if (\"page\" in data) {\n        this.page = jQuery.extend({}, data.page);\n        list = data.list;\n    }\n\n    // console.log(this.list.length);\n\n    if (this.config.tree.use) {\n        this.list = arrangeData4tree.call(this, list);\n        this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n    } else {\n        this.proxyList = null;\n        this.list = initData.call(this,\n            (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, list) : list\n        );\n    }\n    this.selectedDataIndexs = [];\n    this.deletedList = [];\n\n    this.needToPaintSum = true;\n    this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    PAGE.navigationUpdate.call(this);\n\n    if (this.config.body.grouping) {\n\n    }\n    return this;\n};\n\nconst get = function (_type) {\n    return {\n        list: this.list,\n        page: this.page\n    };\n};\n\nconst getList = function (_type) {\n    let returnList = [];\n    //let list = (this.proxyList) ? this.proxyList : this.list;\n    let list = this.list;\n    let i = 0, l = list.length;\n    switch (_type) {\n        case \"modified\":\n            for (; i < l; i++) {\n                if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.modified]) {\n                    returnList.push(jQuery.extend({}, list[i]));\n                }\n            }\n            break;\n        case \"selected\":\n            for (; i < l; i++) {\n                if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.selected]) {\n                    returnList.push(jQuery.extend({}, list[i]));\n                }\n            }\n            break;\n        case \"deleted\":\n            //_list = clearGroupingData(this.list);\n            returnList = [].concat(this.deletedList);\n            break;\n        default:\n            returnList = clearGroupingData.call(this, list);\n    }\n    return returnList;\n};\n\nconst add = function (_row, _dindex, _options) {\n    let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n    let processor = {\n        \"first\"() {\n            list = [].concat(_row).concat(list);\n        },\n        \"last\"() {\n            list = list.concat([].concat(_row));\n        }\n    };\n\n    if (this.config.tree.use) {\n        let list = this.list.concat([].concat(_row));\n\n        this.list = arrangeData4tree.call(this, list);\n        this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n    }\n    else {\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            _row[this.config.columnKeys.modified] = true;\n            processor[_dindex].call(this, _row);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            if (U.isArray(_row)) {\n                for (let _i = 0, _l = _row.length; _i < _l; _i++) {\n                    list.splice(_dindex + _i, 0, _row[_i]);\n                }\n            } else {\n                list.splice(_dindex, 0, _row);\n            }\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        }\n        else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        }\n        else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n    }\n\n    this.needToPaintSum = true;\n    this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    PAGE.navigationUpdate.call(this);\n    return this;\n};\n\n/**\n * list에서 완전 제거 하는 경우 사용.\n * ax5grid.data.remove\n */\nconst remove = function (_dindex) {\n    let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n    let processor = {\n        \"first\": function () {\n            if (this.config.tree.use) {\n                processor.tree.call(this, 0);\n            } else {\n                list.splice(0, 1);\n            }\n        },\n        \"last\": function () {\n            if (this.config.tree.use) {\n                processor.tree.call(this, list.length - 1);\n            } else {\n                list.splice(list.length - 1, 1);\n            }\n        },\n        \"index\": function (_dindex) {\n            if (this.config.tree.use) {\n                processor.tree.call(this, _dindex);\n            } else {\n                list.splice(_dindex, 1);\n            }\n        },\n        \"selected\": function () {\n            if (this.config.tree.use) {\n                processor.tree.call(this, \"selected\");\n            } else {\n                let __list = [], i, l;\n\n                for (i = 0, l = list.length; i < l; i++) {\n                    if (!list[i][this.config.columnKeys.selected]) {\n                        __list.push(list[i]);\n                    }\n                }\n                list = __list;\n                __list = null;\n                i = null;\n            }\n        },\n        \"tree\": function (_dindex) {\n            let treeKeys = this.config.tree.columnKeys, selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];\n            list = U.filter(list, function () {\n                return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;\n            });\n            treeKeys = null;\n            selfHash = null;\n        },\n    };\n\n    if (typeof _dindex === \"undefined\") _dindex = \"last\";\n    if (_dindex in processor) {\n        processor[_dindex].call(this, _dindex);\n    } else {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        processor[\"index\"].call(this, _dindex);\n    }\n\n    if (this.config.tree.use) {\n        this.list = arrangeData4tree.call(this, list);\n        this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n    }\n    else {\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n        this.list = list;\n    }\n\n\n    this.needToPaintSum = true;\n    this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    PAGE.navigationUpdate.call(this);\n    return this;\n};\n\n\n/**\n * list에서 deleted 처리 repaint\n * ax5grid.data.deleteRow\n */\nconst deleteRow = function (_dindex) {\n    let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n    let processor = {\n        \"first\": function () {\n            if (this.config.tree.use) {\n                processor.tree.call(this, 0);\n            } else {\n                list[0][this.config.columnKeys.deleted] = true;\n            }\n        },\n        \"last\": function () {\n            if (this.config.tree.use) {\n                processor.tree.call(this, list.length - 1);\n            } else {\n                list[list.length - 1][this.config.columnKeys.deleted] = true;\n            }\n        },\n        \"selected\": function () {\n            if (this.config.tree.use) {\n                processor.tree.call(this, \"selected\");\n            } else {\n                let i = list.length;\n                while (i--) {\n                    if (list[i][this.config.columnKeys.selected]) {\n                        list[i][this.config.columnKeys.deleted] = true;\n                    }\n                }\n                i = null;\n            }\n        },\n        \"tree\": function (_dindex) {\n            let keys = this.config.columnKeys,\n                treeKeys = this.config.tree.columnKeys;\n\n            if (_dindex === \"selected\") {\n\n                let i = list.length;\n                while (i--) {\n                    if (list[i][this.config.columnKeys.selected]) {\n                        list[i][this.config.columnKeys.deleted] = true;\n\n                        let selfHash = list[i][treeKeys.selfHash];\n                        let ii = list.length;\n\n                        while (ii--) {\n                            if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {\n                                list[ii][keys.deleted] = true;\n                            }\n                        }\n\n                        selfHash = null;\n                        ii = null;\n                    }\n                }\n                i = null;\n\n            } else {\n                let selfHash = list[_dindex][treeKeys.selfHash];\n                let i = list.length;\n                while (i--) {\n                    if (list[i][treeKeys.selfHash].substr(0, selfHash.length) !== selfHash) {\n                        list[i][keys.deleted] = true;\n                    }\n                }\n                selfHash = null;\n                i = null;\n            }\n\n            keys = null;\n            treeKeys = null;\n        },\n    };\n\n    if (typeof _dindex === \"undefined\") _dindex = \"last\";\n\n    if (_dindex in processor) {\n        processor[_dindex].call(this, _dindex);\n    } else {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        list[_dindex][this.config.columnKeys.deleted] = true;\n    }\n\n    if (this.config.tree.use) {\n        this.list = arrangeData4tree.call(this, list);\n        this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n    }\n    else {\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n    }\n\n    this.needToPaintSum = true;\n    this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    PAGE.navigationUpdate.call(this);\n    return this;\n};\n\nconst update = function (_row, _dindex) {\n    if (!U.isNumber(_dindex)) {\n        throw 'invalid argument _dindex';\n    }\n    //\n    this.needToPaintSum = true;\n    this.list.splice(_dindex, 1, _row);\n\n    if (this.config.body.grouping) {\n        this.list = initData.call(this, clearGroupingData.call(this, this.list));\n    }\n};\n\nconst updateChild = function (_dindex, _updateData, _options) {\n    let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n    if (typeof _dindex === \"undefined\") return false;\n    originIndex = this.proxyList[_dindex].__origin_index__;\n\n    if (this.list[originIndex][keys.children]) {\n        this.proxyList = []; // 리셋 프록시\n\n        if (_options && _options.filter) {\n            if (_options.filter.call({item: this.list[originIndex], dindex: originIndex}, this.list[originIndex])) {\n                for (let _k in _updateData) {\n                    this.list[originIndex][_k] = _updateData[_k];\n                }\n            }\n        }\n        else {\n            for (let _k in _updateData) {\n                this.list[originIndex][_k] = _updateData[_k];\n            }\n        }\n\n        selfHash = this.list[originIndex][keys.selfHash];\n\n        let i = 0, l = this.list.length;\n        for (; i < l; i++) {\n            if (this.list[i]) {\n                if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n\n                    if (_options && _options.filter) {\n                        if (_options.filter.call({item: this.list[i], dindex: i}, this.list[i])) {\n                            for (let _k in _updateData) {\n                                this.list[i][_k] = _updateData[_k];\n                            }\n                        }\n                    }\n                    else {\n                        for (let _k in _updateData) {\n                            this.list[i][_k] = _updateData[_k];\n                        }\n                    }\n                }\n\n                if (!this.list[i][keys.hidden]) {\n                    this.proxyList.push(this.list[i]);\n                }\n            }\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst setValue = function (_dindex, _doindex, _key, _value) {\n    let originalValue = getValue.call(this, _dindex, _doindex, _key);\n    let list = this.list;\n    let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n    this.needToPaintSum = true;\n\n    if (originalValue !== _value) {\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                list[listIndex][this.config.columnKeys.modified] = true;\n                (Function(\"val\", \"this\" + UTIL.getRealPathForDataItem(_key) + \" = val;\")).call(list[listIndex], _value);\n            } catch (e) {\n\n            }\n        } else {\n            list[listIndex][this.config.columnKeys.modified] = true;\n            list[listIndex][_key] = _value;\n        }\n\n        if (this.onDataChanged) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list,\n                dindex: _dindex,\n                doindex: _doindex,\n                item: this.list[_dindex],\n                key: _key,\n                value: _value\n            });\n        }\n    }\n\n    return true;\n};\n\nlet getValue = function (_dindex, _doindex, _key, _value) {\n    let list = this.list;\n    let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n\n    if (/[\\.\\[\\]]/.test(_key)) {\n        try {\n            _value = (Function(\"\", \"return this\" + UTIL.getRealPathForDataItem(_key) + \";\")).call(list[listIndex]);\n        } catch (e) {\n\n        }\n    } else {\n        _value = list[listIndex][_key];\n    }\n    return _value;\n};\n\nconst clearSelect = function () {\n    this.selectedDataIndexs = [];\n};\n\nconst select = function (_dindex, _doindex, _selected, _options) {\n    let cfg = this.config;\n\n    if(typeof _doindex === \"undefined\") _doindex = _dindex;\n\n    if (!this.list[_doindex]) return false;\n    if (this.list[_doindex].__isGrouping) return false;\n    if (this.list[_doindex][cfg.columnKeys.disableSelection]) return false;\n\n    if (typeof _selected === \"undefined\") {\n        if (this.list[_doindex][cfg.columnKeys.selected] = !this.list[_doindex][cfg.columnKeys.selected]) {\n            this.selectedDataIndexs.push(_doindex);\n        } else {\n            this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n                return this == _doindex;\n            }), 1);\n        }\n    } else {\n        if (this.list[_doindex][cfg.columnKeys.selected] = _selected) {\n            this.selectedDataIndexs.push(_doindex);\n        } else {\n            this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n                return this == _doindex;\n            }), 1);\n        }\n    }\n\n    if (this.onDataChanged && _options && _options.internalCall) {\n        this.onDataChanged.call({\n            self: this,\n            list: this.list,\n            dindex: _dindex,\n            doindex: _doindex,\n            item: this.list[_doindex],\n            key: cfg.columnKeys.selected,\n            value: this.list[_doindex][cfg.columnKeys.selected]\n        });\n    }\n\n    return this.list[_doindex][cfg.columnKeys.selected];\n};\n\nconst selectAll = function (_selected, _options) {\n    let cfg = this.config,\n        dindex = this.list.length;\n\n    this.selectedDataIndexs = [];\n\n    if (typeof _selected === \"undefined\") {\n        while (dindex--) {\n            if (this.list[dindex].__isGrouping) continue;\n            if (_options && _options.filter) {\n                if (_options.filter.call(this.list[dindex]) !== true) {\n                    continue;\n                }\n            }\n            if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n            if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n                this.selectedDataIndexs.push(dindex);\n            }\n        }\n    } else {\n        while (dindex--) {\n            if (this.list[dindex].__isGrouping) continue;\n            if (_options && _options.filter) {\n                if (_options.filter.call(this.list[dindex]) !== true) {\n                    continue;\n                }\n            }\n            if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n            if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n                this.selectedDataIndexs.push(dindex);\n            }\n        }\n    }\n\n    if (this.onDataChanged && _options && _options.internalCall) {\n        this.onDataChanged.call({\n            self: this,\n            list: this.list\n        });\n    }\n\n    return this.list;\n};\n\nconst sort = function (_sortInfo, _list, _options) {\n    let self = this, list = _list || this.list, sortInfoArray = [], lineNumber = 0;\n    let getKeyValue = function (_item, _key, _value) {\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                _value = (Function(\"\", \"return this\" + UTIL.getRealPathForDataItem(_key) + \";\")).call(_item);\n            } catch (e) {\n            }\n        } else {\n            _value = _item[_key];\n        }\n        return _value;\n    };\n\n    for (let k in _sortInfo) {\n        sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n    }\n    sortInfoArray = U.filter(sortInfoArray, function () {\n        return typeof this !== \"undefined\";\n    });\n\n    // 정렬조건이 없으면 original_index값을 이용하여 정렬처리\n    if(_options && _options.resetLineNumber && sortInfoArray.length === 0) {\n        sortInfoArray[0] = {key: '__original_index', order: \"asc\"}\n    }\n\n    let i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n    list.sort(function (_a, _b) {\n        for (i = 0; i < l; i++) {\n            _a_val = getKeyValue(_a, sortInfoArray[i].key);\n            _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n            if (typeof _a_val !== typeof _b_val) {\n                _a_val = '' + _a_val;\n                _b_val = '' + _b_val;\n            }\n            if (_a_val < _b_val) {\n                return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n            } else if (_a_val > _b_val) {\n                return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n            }\n        }\n    });\n\n    if(_options && _options.resetLineNumber) {\n        i = 0, l = list.length, lineNumber = 0;\n        for (; i < l; i++) {\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                _list[i][\"__index\"] = lineNumber++;\n            }\n        }\n    }\n\n    if (_list) {\n        return list;\n    } else {\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        PAGE.navigationUpdate.call(this);\n        return this;\n    }\n};\n\nconst append = function (_list, _callback) {\n    let self = this;\n\n    if (this.config.tree.use) {\n        let list = this.list.concat([].concat(_list));\n\n        this.list = arrangeData4tree.call(this, list);\n        this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        list = null;\n    } else {\n        this.list = this.list.concat([].concat(_list));\n    }\n\n    this.appendProgress = true;\n    PAGE.statusUpdate.call(this);\n\n    if (this.appendDebouncer) {\n        if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n            clearTimeout(this.appendDebouncer);\n            self.appendDebounceTimes++;\n        } else {\n            self.appendDebounceTimes = 0;\n            appendIdle.call(self);\n            _callback();\n            return false;\n        }\n    }\n\n    this.appendDebouncer = setTimeout(function () {\n        self.appendDebounceTimes = 0;\n        appendIdle.call(self);\n        _callback();\n    }, this.config.debounceTime);\n\n    // todo : append bounce animation\n};\n\nconst appendIdle = function () {\n    this.appendProgress = false;\n    if (this.config.body.grouping) {\n        this.list = initData.call(this,\n            sort.call(this,\n                this.sortInfo,\n                this.list\n            )\n        );\n    } else {\n        this.list = initData.call(this, this.list);\n    }\n\n    this.needToPaintSum = true;\n    this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    PAGE.navigationUpdate.call(this);\n};\n\nconst toggleCollapse = function (_dindex, _doindx, _collapse) {\n    let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n    if (typeof _dindex === \"undefined\") return false;\n    originIndex = this.proxyList[_dindex].__origin_index__;\n\n    if (this.list[originIndex][keys.children]) {\n        this.proxyList = []; // 리셋 프록시\n        if (typeof _collapse == \"undefined\") {\n            _collapse = !(this.list[originIndex][keys.collapse] || false);\n        }\n\n        this.list[originIndex][keys.collapse] = _collapse;\n        selfHash = this.list[originIndex][keys.selfHash];\n\n        let i = this.list.length;\n        while (i--) {\n            if (this.list[i]) {\n                // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);\n                if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n                    this.list[i][keys.hidden] = _collapse;\n                }\n\n                if (!this.list[i][keys.hidden]) {\n                    this.proxyList.push(this.list[i]);\n                }\n            }\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n};\n\nexport default {\n    init: init,\n    set: set,\n    get: get,\n    getList: getList,\n    getProxyList: getProxyList,\n    setValue: setValue,\n    getValue: getValue,\n    clearSelect: clearSelect,\n    select: select,\n    selectAll: selectAll,\n    add: add,\n    remove: remove,\n    deleteRow: deleteRow,\n    update: update,\n    updateChild: updateChild,\n    sort: sort,\n    initData: initData,\n    clearGroupingData: clearGroupingData,\n    append: append,\n    toggleCollapse: toggleCollapse\n};"]}