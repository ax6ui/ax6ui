{"version":3,"sources":["AX6UIGrid_body.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_util","_AX6UIGrid_data","_AX6UIGrid_page","_AX6UIGrid_header","_AX6UIGrid_inline_editor","_AX6UIGrid_collector","_AX6UIGrid_formatter","_AX6UIGrid_scroller","columnSelect","focusClear","self","this","_column","c","focusedColumn","$","panel","panelName","find","dindex","rowIndex","colIndex","removeAttr","clear","selectedColumn","init","column","isInlineEditing","editKey","inlineEditing","call","doindex","colspan","start","update","trl","end","r","s","Math","min","xvar","selectedRange","e","max","range","inlineEdit","deActive","_panels","frozenRowIndex","push","frozenColumnIndex","join","attr","cell","on","instanceId","getAttribute","Number","columnSelector","off","_jqmin2","default","document","css","cfg","config","bodyRowTable","label","asideBodyRowData","body","data","rows","i","l","dataTable","length","cols","col","rowspan","resetFrozenColumn","dividedBodyRowObj","_col","extend","lineNumberColumnWidth","columnAttr","key","rowSelectorColumnWidth","_width","width","dividedBodyGroupingObj","_AX6UIGrid_util2","divideTableByFrozenColumnIndex","bodyGroupingTable","leftBodyRowData","showLineNumber","grouping","asideBodyGroupingData","leftData","bodyGroupingData","rightData","bodyGroupingMap","showRowSelector","dividedFootSumObj","footSumTable","footSumData","getFieldValue","_list","_item","_index","_value","_returnPlainText","_key","leftBodyGroupingData","<",">","leftFootSumData","editor","_editor","type","_AX6UIGrid_inline_editor2","tagsToReplace","_AX6UIGrid_data2","getValue","__origin_index__","_AX6Util2","isFunction","disabled","list","item","getHtml","valueProcessor","formatter","value","caller","customFormatter","_AX6UIGrid_formatter2","that","returnValue","test","replace","tag","__value","keys","tree","columnKeys","indentNodeHtml","arrowWidth","depth","indentWidth","collapse","icons","openedArrow","children","collapsedGroupIcon","groupIcon","itemIcon","treeControl","getGroupingValue","_label","__groupingBy","__groupingList","groupBy","collector","customCollector","_AX6UIGrid_collector2","getSumFieldValue","active","_focusedColumn","_e","_initValue","colGroup","_type","editMode","checked","newValue","trueValue","falseValue","updateRowState","__isGrouping","columnKey","useReturnToSave","originalValue","__editor","isNothing","money","initValue","$inlineEditorCell","$inlineEditor","bodyRowMap","editorValue","get","tagName","_msg","number","action","CANCEL","_dindex","_newValue","setValue","_doindex","repaintCell","bindedAx5ui","ax5picker","ax5select","remove","undefined","keydown","_options","ESC","RETURN","k","moveFocus","editorConfig","processor","_reset","proxyList","repaint","paintStartRowIndex","paintStartColumnIndex","virtualPaintStartRowIndex","floor","position","top","bodyTrHeight","paintRowCountTopMargin","virtualScrollY","paintEndColumnIndex","nopaintLeftColumnsWidth","nopaintRightColumnsWidth","bodyScrollLeft","left","isNaN","ci","_ex","_sx","virtualScrollX","bodyWidth","padding-left","padding-right","isFirstPaint","headerColGroup","bodyRowData","virtualPaintRowCount","paintRowCount","bodyHeight","abs","dataRowCount","concat","splice","getTableByStartEndColumnIndex","needToPaintSum","scrollContentHeight","livePanelKeys","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","tri","cellHeight","colAlign","isScrolled","cgl","di","dl","columnHeight","columnBorderWidth","stripeString","len","isGroupingRow","rowTable","odi","trStyleClass","selected","disableSelection","align","bodyAlign","attrs","_selectedColumn","styleClass","tdCSS_class","_cellHeight","index","cl","lineHeight","multiLine","columnPadding","innerHTML","isFootSum","empty","mergeCellsBody","token","hasMergeTd","tableTrs","ri","tableTrTds","tdObj","tblRowMaps","trMaps","rl","childNodes","mergeCells","text","prevTokenColIndexs","hasFalse","forEach","ti","_loop2","frozenScrollConfig","scrollConfig","repaintSum","asideColGroup","slice","footSum","leftHeaderColGroup","_states","_AX6UIGrid_page2","statusUpdate","pi","_data","doi","_state","__original_index__","cellChecked","toggleCollapse","_collapse","getProxyList","row","targetDBLClick","page","onDBLClick","isObject","lineNumber","stopEvent","targetClick","onClick","clearSelect","internalCall","rowSelector","selectedDataIndexs","_el","target","param","gridSelf","onContextMenu","touchmoved","paintRowCountMargin","opts","callback","virtualScrollYCountMargin","__throttledScroll","virtualScrollAccelerated","throttle","noRepaint","virtualScrollAcceleratedDelayTime","updateColumnKey","_rowIndex","_colIndex","updateCell","_panelName","updateWithCell","html","findPanelByColumnIndex","height","ceil","replaceGroupTr","repaintRow","replaceTr","updateRowStateAll","scrollTo","moveResult","while_i","_position","focus","UD","nPanelInfo","resize","originalColumn","_dy","isScrollPanel","containerPanelName","_dx","newTop","timeoutUnUse","_AX6UIGrid_scroller2","LR","scrollLeft","$column","isScrollTo","newLeft","_AX6UIGrid_header2","outerWidth","INDEX","UP","DOWN","getBody","LEFT","po","getSum","RIGHT","HOME","END","click","val","rightSum","dblClick"],"mappings":"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","file":"AX6UIGrid_body.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"../AX6Util\";\nimport UTIL from \"./AX6UIGrid_util\";\nimport DATA from \"./AX6UIGrid_data\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport HEADER from \"./AX6UIGrid_header\";\n\nimport INLINE_EDITOR from \"./AX6UIGrid_inline_editor\";\nimport COLLECTOR from \"./AX6UIGrid_collector\";\nimport FORMATTER from \"./AX6UIGrid_formatter\";\nimport SCROLLER from \"./AX6UIGrid_scroller\";\n\nconst columnSelect = {\n  focusClear: function () {\n    let self = this, _column;\n    for (let c in self.focusedColumn) {\n      _column = self.focusedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .removeAttr('data-ax6grid-column-focused');\n      }\n    }\n    self.focusedColumn = {};\n  },\n  clear: function () {\n    let self = this, _column;\n    for (let c in self.selectedColumn) {\n      _column = self.selectedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .removeAttr('data-ax6grid-column-selected');\n      }\n    }\n    self.selectedColumn = {};\n  },\n  init: function (column) {\n    let self = this;\n    if (this.isInlineEditing) {\n      for (let editKey in this.inlineEditing) {\n        if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n          return this;\n        }\n      }\n    }\n\n    // focus\n    columnSelect.focusClear.call(self);\n    self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n      panelName: column.panelName,\n      dindex: column.dindex,\n      doindex: column.doindex,\n      rowIndex: column.rowIndex,\n      colIndex: column.colIndex,\n      colspan: column.colspan\n    };\n\n    // select\n    columnSelect.clear.call(self);\n    self.xvar.selectedRange = {\n      start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n      end: null\n    };\n    self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n      if (data) {\n        return false;\n      } else {\n        return {\n          panelName: column.panelName,\n          dindex: column.dindex,\n          doindex: column.doindex,\n          rowIndex: column.rowIndex,\n          colIndex: column.colIndex,\n          colspan: column.colspan\n        }\n      }\n    })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n    this.$.panel[column.panelName]\n      .find('[data-ax6grid-tr-data-index=\"' + column.dindex + '\"]')\n      .find('[data-ax6grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + column.colIndex + '\"]')\n      .attr('data-ax6grid-column-focused', \"true\")\n      .attr('data-ax6grid-column-selected', \"true\");\n\n    if (this.isInlineEditing) {\n      inlineEdit.deActive.call(this, \"RETURN\");\n    }\n  },\n  update: function (column) {\n    const self = this;\n    let dindex, doindex, colIndex, rowIndex, trl;\n\n    self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n    columnSelect.clear.call(self);\n\n    let range = {\n      r: {\n        s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n        e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n      },\n      c: {\n        s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n        e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n      }\n    };\n\n    dindex = range.r.s;\n    for (; dindex <= range.r.e; dindex++) {\n\n\n      trl = this.bodyRowTable.rows.length;\n      rowIndex = 0;\n      for (; rowIndex < trl; rowIndex++) {\n        colIndex = range.c.s;\n        for (; colIndex <= range.c.e; colIndex++) {\n          var _panels   = [],\n              panelName = \"\";\n\n          if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n          if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n          _panels.push(\"body\");\n          if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n          panelName = _panels.join(\"-\");\n\n          self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n            panelName: panelName,\n            dindex: dindex,\n            rowIndex: rowIndex,\n            colIndex: colIndex,\n            colspan: column.colspan\n          };\n\n          _panels = null;\n          panelName = null;\n        }\n      }\n    }\n    dindex = null;\n    doindex = null;\n    colIndex = null;\n    rowIndex = null;\n\n    for (var c in self.selectedColumn) {\n      var _column = self.selectedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .attr('data-ax6grid-column-selected', 'true');\n      }\n    }\n\n  }\n};\n\nconst columnSelector = {\n  \"on\": function (cell) {\n    let self = this;\n\n    if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n      return;\n    }\n\n    columnSelect.init.call(self, cell);\n\n    this.$[\"container\"][\"body\"]\n      .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax6grid-column-attr=\"default\"]', function (e) {\n        if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n          columnSelect.update.call(self, {\n            panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n            dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n            doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n            rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n            colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n            colspan: Number(this.getAttribute(\"colspan\"))\n          });\n          U.stopEvent(e);\n        }\n      })\n      .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n        columnSelector.off.call(self);\n      })\n      .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n        columnSelector.off.call(self);\n      });\n\n    jQuery(document.body)\n      .attr('unselectable', 'on')\n      .css('user-select', 'none')\n      .on('selectstart', false);\n  },\n  \"off\": function () {\n\n    this.$[\"container\"][\"body\"]\n      .off(\"mousemove.ax5grid-\" + this.instanceId)\n      .off(\"mouseup.ax5grid-\" + this.instanceId)\n      .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n    jQuery(document.body)\n      .removeAttr('unselectable')\n      .css('user-select', 'auto')\n      .off('selectstart');\n  }\n};\n\nconst resetFrozenColumn = function () {\n  let cfg               = this.config,\n      dividedBodyRowObj = UTIL.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n  this.asideBodyRowData = (function (dataTable) {\n    let data = {rows: []};\n    for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n      data.rows[i] = {cols: []};\n      if (i === 0) {\n        let col = {\n          label: \"\",\n          colspan: 1,\n          rowspan: dataTable.rows.length,\n          colIndex: null\n        }, _col = {};\n\n        if (cfg.showLineNumber) {\n          _col = jQuery.extend({}, col, {\n            width: cfg.lineNumberColumnWidth,\n            _width: cfg.lineNumberColumnWidth,\n            columnAttr: \"lineNumber\",\n            label: \"&nbsp;\", key: \"__d-index__\"\n          });\n          data.rows[i].cols.push(_col);\n        }\n        if (cfg.showRowSelector) {\n          _col = jQuery.extend({}, col, {\n            width: cfg.rowSelectorColumnWidth,\n            _width: cfg.rowSelectorColumnWidth,\n            columnAttr: \"rowSelector\",\n            label: \"\", key: \"__d-checkbox__\"\n          });\n          data.rows[i].cols.push(_col);\n        }\n      }\n    }\n\n    return data;\n  }).call(this, this.bodyRowTable);\n\n  //console.log(dividedBodyRowObj);\n\n  this.leftBodyRowData = dividedBodyRowObj.leftData;\n  this.bodyRowData = dividedBodyRowObj.rightData;\n\n  if (cfg.body.grouping) {\n    let dividedBodyGroupingObj = UTIL.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n    this.asideBodyGroupingData = (function (dataTable) {\n      let data = {rows: []};\n      for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n        data.rows[i] = {cols: []};\n        if (i === 0) {\n          let col = {\n            label: \"\",\n            colspan: 1,\n            rowspan: dataTable.rows.length,\n            colIndex: null\n          }, _col = {};\n\n          if (cfg.showLineNumber) {\n            _col = jQuery.extend({}, col, {\n              width: cfg.lineNumberColumnWidth,\n              _width: cfg.lineNumberColumnWidth,\n              columnAttr: \"lineNumber\",\n              label: \"&nbsp;\", key: \"__d-index__\"\n            });\n            data.rows[i].cols.push(_col);\n          }\n          if (cfg.showRowSelector) {\n            _col = jQuery.extend({}, col, {\n              width: cfg.rowSelectorColumnWidth,\n              _width: cfg.rowSelectorColumnWidth,\n              columnAttr: \"rowSelector\",\n              label: \"\", key: \"__d-checkbox__\"\n            });\n            data.rows[i].cols.push(_col);\n          }\n        }\n      }\n\n      return data;\n    }).call(this, this.bodyGroupingTable);\n    this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n    this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n    this.bodyGroupingMap = UTIL.makeBodyRowMap.call(this, this.bodyGroupingTable);\n  }\n\n  this.leftFootSumData = {};\n  this.footSumData = {};\n  if (this.config.footSum) {\n    let dividedFootSumObj = UTIL.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n    this.leftFootSumData = dividedFootSumObj.leftData;\n    this.footSumData = dividedFootSumObj.rightData;\n  }\n};\n\nconst getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n\n  let _key = _col.key, tagsToReplace = {\n    '<': '&lt;',\n    '>': '&gt;'\n  };\n\n  if (_key === \"__d-index__\") {\n    return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n  }\n  else if (_key === \"__d-checkbox__\") {\n    return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n  }\n  else {\n    if (_col.editor && (function (_editor) {\n        if (_editor.type in INLINE_EDITOR) {\n          return (INLINE_EDITOR[_editor.type].editMode == \"inline\");\n        }\n        return false;\n      })(_col.editor)) { // editor가 inline타입이라면\n\n      _value = _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n\n      if (U.isFunction(_col.editor.disabled)) {\n        if (_col.editor.disabled.call({\n            list: _list,\n            dindex: _index,\n            item: _list[_index],\n            key: _key,\n            value: _value\n          })) {\n          return _value;\n        }\n      }\n\n      // print editor\n      return _returnPlainText ? _value : INLINE_EDITOR[_col.editor.type].getHtml(this, _col.editor, _value);\n    }\n\n    const valueProcessor = {\n      \"formatter\": function () {\n        let that = {\n          key: _key,\n          value: _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key),\n          dindex: _index,\n          item: _item,\n          list: _list\n        };\n\n        let caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n        return caller ? caller.call(that) : that.value;\n      },\n      \"default\": function () {\n        let returnValue = \"\";\n\n        if (typeof _value !== \"undefined\") {\n          returnValue = _value;\n        } else {\n          if (/[\\.\\[\\]]/.test(_key)) {\n            _value = DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n          } else {\n            _value = _item[_key];\n          }\n\n          if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n        }\n\n        // 키값이 Boolean일때 오류 발생하여 수정.\n        return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n          return tagsToReplace[tag] || tag;\n        });\n      },\n      \"treeControl\": function (__value) {\n        let cfg            = this.config,\n            keys           = this.config.tree.columnKeys,\n            indentNodeHtml = '';\n\n        if (_item[keys.children].length) {\n          indentNodeHtml += '<a ' +\n            'data-ax6grid-data-index=\"' + _index + '\" ' +\n            'data-ax6grid-column-attr=\"tree-control\" ' +\n            'data-ax6grid-tnode-arrow=\"\" ' +\n            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n            '>';\n          indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n          indentNodeHtml += '</a>';\n        } else {\n          indentNodeHtml += '<span ' +\n            'data-ax6grid-tnode-arrow=\"\" ' +\n            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n            '>&nbsp;</span>';\n        }\n\n        indentNodeHtml += '<span ' +\n          'data-ax6grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n          'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n          '>';\n        indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n        indentNodeHtml += '</span>';\n\n        return indentNodeHtml + __value;\n      }\n    };\n\n    let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n    if (this.config.tree.use && _col.treeControl) {\n      returnValue = valueProcessor.treeControl.call(this, returnValue);\n    }\n\n    return returnValue;\n  }\n\n};\n\nconst getGroupingValue = function (_item, _index, _col) {\n  let value, that, caller, _key = _col.key, _label = _col.label;\n\n  if (typeof _key === \"undefined\") {\n    that = {\n      key: _key,\n      list: _item.__groupingList,\n      groupBy: _item.__groupingBy\n    };\n    if (U.isFunction(_label)) {\n      value = _label.call(that);\n    } else {\n      value = _label;\n    }\n    _item[_col.colIndex] = value;\n    return value;\n  }\n  else if (_key === \"__d-index__\") {\n    return '';\n  }\n  else if (_key === \"__d-checkbox__\") {\n    return '';\n  }\n  else {\n    if (_col.collector) {\n      that = {\n        key: _key,\n        list: _item.__groupingList\n      };\n      _item[_col.colIndex] = value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n      if (_col.formatter) {\n        that.value = value;\n        caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n        return caller ? caller.call(that) : value;\n      } else {\n        return value;\n      }\n    } else {\n      return \"&nbsp;\";\n    }\n  }\n};\n\nconst getSumFieldValue = function (_list, _col) {\n  let _key = _col.key, _label = _col.label;\n  //, _collector, _formatter\n  if (typeof _key === \"undefined\") {\n    return _label;\n  }\n  else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n    return '&nbsp;';\n  }\n  else {\n    if (_col.collector) {\n      let that = {\n        key: _key,\n        list: _list\n      };\n      let value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n      that.value = value;\n\n      if (_col.formatter) {\n        return (U.isFunction(_col.formatter) ? _col.formatter : this.config.formatter[_col.formatter] || FORMATTER[_col.formatter]).call(that);\n      } else {\n        return value;\n      }\n    } else {\n      return \"&nbsp;\";\n    }\n  }\n};\n\nconst inlineEdit = {\n  active(_focusedColumn, _e, _initValue) {\n    let self = this,\n        dindex, doindex, colIndex, rowIndex, panelName, colspan,\n        col, editor;\n\n    for (var key in _focusedColumn) {\n      panelName = _focusedColumn[key].panelName;\n      dindex = _focusedColumn[key].dindex;\n      doindex = _focusedColumn[key].doindex;\n      colIndex = _focusedColumn[key].colIndex;\n      rowIndex = _focusedColumn[key].rowIndex;\n      colspan = _focusedColumn[key].colspan;\n\n      // 인라인 에디팅을 멈춰야 하는 경우 조건\n      col = this.colGroup[colIndex];\n      if (!(editor = col.editor)) return this;\n\n      // editor disabled 체크\n      if (U.isFunction(editor.disabled)) {\n        if (editor.disabled.call({\n            list: this.list,\n            dindex: dindex,\n            item: this.list[dindex],\n            key: col.key,\n            value: _initValue\n          })) {\n          return this;\n        }\n      }\n\n      // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n      if (!(function (_editor, _type) {\n          if (_editor.type in INLINE_EDITOR) {\n            return (INLINE_EDITOR[_editor.type].editMode == \"popup\");\n          }\n        })(editor)) {\n        // 체크 박스 타입이면 값 변경 시도\n        if (editor.type == \"checkbox\") {\n          let checked, newValue;\n          if (editor.config && editor.config.trueValue) {\n            if (checked = !(_initValue == editor.config.trueValue)) {\n              newValue = editor.config.trueValue;\n            } else {\n              newValue = editor.config.falseValue;\n            }\n          } else {\n            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n          }\n\n          DATA.setValue.call(self, dindex, doindex, col.key, newValue);\n          updateRowState.call(self, [\"cellChecked\"], dindex, doindex, {\n            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n            editorConfig: col.editor.config, checked: checked\n          });\n        }\n        return this;\n      }\n\n      if (this.list[dindex].__isGrouping) {\n        return false;\n      }\n      if (key in this.inlineEditing) {\n        return false;\n      }\n\n      this.inlineEditing[key] = {\n        editor: editor,\n        panelName: panelName,\n        columnKey: key,\n        column: _focusedColumn[key],\n        useReturnToSave: INLINE_EDITOR[editor.type].useReturnToSave\n      };\n      this.isInlineEditing = true;\n    }\n    if (this.isInlineEditing) {\n\n      let originalValue = DATA.getValue.call(self, dindex, doindex, col.key),\n          initValue     = (function (__value, __editor) {\n            if (U.isNothing(__value)) {\n              __value = U.isNothing(originalValue) ? \"\" : originalValue;\n            }\n\n            if (__editor.type == \"money\") {\n              return U.number(__value, {\"money\": true});\n            }\n            else {\n              return __value;\n            }\n          }).call(this, _initValue, editor);\n\n      this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n        .find('[data-ax6grid-tr-data-index=\"' + dindex + '\"]')\n        .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n        .find('[data-ax6grid-cellholder]');\n\n      this.inlineEditing[key].$inlineEditor = INLINE_EDITOR[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n      return true;\n    }\n  },\n  deActive(_msg, _key, _value) {\n    // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n    if (!this.inlineEditing[_key]) return this;\n\n    let panelName   = this.inlineEditing[_key].panelName,\n        dindex      = this.inlineEditing[_key].column.dindex,\n        doindex     = this.inlineEditing[_key].column.doindex,\n        rowIndex    = this.inlineEditing[_key].column.rowIndex,\n        colIndex    = this.inlineEditing[_key].column.colIndex,\n        column      = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n        editorValue = (function ($inlineEditor) {\n          if (typeof _value === \"undefined\") {\n            if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n              return $inlineEditor.val();\n            } else {\n              _msg = \"CANCEL\";\n              return false;\n            }\n          } else {\n            return _value;\n          }\n        })(this.inlineEditing[_key].$inlineEditor),\n        newValue    = (function (__value, __editor) {\n          if (__editor.type == \"money\") {\n            return U.number(__value);\n          }\n          else {\n            return __value;\n          }\n        }).call(this, editorValue, column.editor);\n\n    let action = {\n      \"CANCEL\"(_dindex, _column, _newValue) {\n        action[\"__clear\"].call(this);\n      },\n      \"RETURN\"(_dindex, _doindex, _column, _newValue) {\n        if (DATA.setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {\n          action[\"__clear\"].call(this);\n          repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);\n        } else {\n          action[\"__clear\"].call(this);\n        }\n      },\n      \"__clear\"() {\n        this.isInlineEditing = false;\n        let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n        if (bindedAx5ui == \"ax5picker\") {\n          this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n        } else if (bindedAx5ui == \"ax5select\") {\n          this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n        }\n\n        this.inlineEditing[_key].$inlineEditor.remove();\n        this.inlineEditing[_key].$inlineEditor = null;\n        this.inlineEditing[_key].$inlineEditorCell = null;\n        this.inlineEditing[_key] = undefined;\n        delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n      }\n    };\n\n    if (_msg in action) {\n      action[_msg || \"RETURN\"].call(this, dindex, doindex, column, newValue);\n    } else {\n      action[\"__clear\"].call(this);\n    }\n  },\n  keydown(key, columnKey, _options) {\n    let processor = {\n      \"ESC\"() {\n        for (var columnKey in this.inlineEditing) {\n          inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n        }\n      },\n      \"RETURN\"() {\n        if (this.isInlineEditing) {\n          if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n          } else {\n            return false;\n          }\n        } else {\n\n          for (var k in this.focusedColumn) {\n            let _column = this.focusedColumn[k],\n                column  = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                dindex  = _column.dindex,\n                doindex = _column.doindex,\n                value   = \"\",\n                col     = this.colGroup[_column.colIndex];\n\n            if (column) {\n              if (!this.list[dindex].__isGrouping) {\n                value = DATA.getValue.call(this, dindex, doindex, column.key);\n              }\n            }\n\n            if (col.editor && INLINE_EDITOR[col.editor.type].editMode === \"inline\") {\n              if (_options && _options.moveFocus) {\n\n              }\n              else {\n                if (column.editor && column.editor.type == \"checkbox\") {\n                  value = DATA.getValue.call(this, dindex, doindex, column.key);\n\n                  let checked, newValue;\n                  if (column.editor.config && column.editor.config.trueValue) {\n                    // console.log(value, column.editor.config.trueValue);\n\n                    if (value != column.editor.config.trueValue) {\n                      newValue = column.editor.config.trueValue;\n                      checked = true;\n                    } else {\n                      newValue = column.editor.config.falseValue;\n                      checked = false;\n                    }\n                  } else {\n                    newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                  }\n\n                  DATA.setValue.call(this, dindex, doindex, column.key, newValue);\n                  updateRowState.call(this, [\"cellChecked\"], dindex, doindex, {\n                    key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                    editorConfig: column.editor.config, checked: checked\n                  });\n                }\n              }\n            } else {\n              inlineEdit.active.call(this, this.focusedColumn, null, value);\n            }\n          }\n        }\n        return true;\n      }\n    };\n\n    if (key in processor) {\n      processor[key].call(this, key, columnKey, _options);\n    }\n  }\n};\n\nconst repaint = function (_reset) {\n  // debugger;\n  let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n  /// repaint reset 타입이면 고정컬럼을 재조정\n  if (_reset) {\n    resetFrozenColumn.call(this);\n    // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n    this.xvar.paintStartRowIndex = undefined;\n    this.xvar.paintStartColumnIndex = undefined;\n  }\n\n  /// 출력시작 인덱스\n  let paintStartRowIndex, virtualPaintStartRowIndex;\n\n  if (this.config.virtualScrollY) {\n    virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n    if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n      paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n    }\n  }\n  else {\n    paintStartRowIndex = this.xvar.frozenRowIndex;\n  }\n\n  if (isNaN(paintStartRowIndex)) return this;\n\n  let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n  let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n  if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n    for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n      // bodyScrollLeft\n      this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n      this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n      if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n        paintStartColumnIndex = ci;\n      }\n      if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n        paintEndColumnIndex = ci;\n\n        if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n        if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n      }\n    }\n\n    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n    this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n  }\n\n  let isFirstPaint          = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n      headerColGroup        = this.headerColGroup,\n      asideBodyRowData      = this.asideBodyRowData,\n      leftBodyRowData       = this.leftBodyRowData,\n      bodyRowData           = this.bodyRowData,\n      leftFootSumData       = this.leftFootSumData,\n      footSumData           = this.footSumData,\n      asideBodyGroupingData = this.asideBodyGroupingData,\n      leftBodyGroupingData  = this.leftBodyGroupingData,\n      bodyGroupingData      = this.bodyGroupingData,\n      bodyAlign             = cfg.body.align,\n      paintRowCount, virtualPaintRowCount;\n\n  if (!this.config.virtualScrollY) {\n    virtualPaintRowCount = paintRowCount = list.length;\n  } else {\n    virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n    paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n  }\n\n  // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n  if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n    paintStartRowIndex = this.xvar.paintStartRowIndex;\n  }\n\n  if (\n    this.xvar.dataRowCount === list.length\n    && this.xvar.paintStartRowIndex === paintStartRowIndex\n    && this.xvar.paintRowCount === paintRowCount\n    && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n    && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n  ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n  // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n  if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n    headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n    bodyRowData = UTIL.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n    if (cfg.body.grouping) {\n      bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n    }\n    if (cfg.footSum) {\n      footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n    }\n    if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n      this.needToPaintSum = true;\n    }\n  }\n\n  /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n  this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (list.length - this.xvar.frozenRowIndex);\n  if (this.xvar.scrollContentHeight < 0) this.xvar.scrollContentHeight = 0;\n\n  /// 사용된 패널들의 키 모음\n  this.$.livePanelKeys = [];\n\n  // 그리드 바디 영역 페인트 함수\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _groupRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey];\n\n    if (!isFirstPaint && !_scrollConfig) {\n      this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n      return false;\n    }\n\n    let SS           = [],\n        cgi, cgl, di, dl, tri, trl, ci, cl, col,\n        cellHeight,\n        colAlign,\n        isScrolled   = (function () {\n          // 스크롤값이 변경되거나 처음 호출되었습니까?\n          if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n            _scrollConfig = {\n              paintStartRowIndex: 0,\n              paintRowCount: _list.length\n            };\n            return false;\n          } else {\n            return true;\n          }\n        })(),\n        stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight) + 'px';\n\n    if (isScrolled) {\n      SS.push('<div style=\"background:repeating-linear-gradient(to top, ' + stripeString + ');' +\n        'font-size:0;' +\n        'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n    }\n\n    SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n    SS.push('<colgroup>');\n    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n      SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n    }\n    SS.push('<col  />');\n    SS.push('</colgroup>');\n\n    di = _scrollConfig.paintStartRowIndex;\n\n    for (dl = (function () {\n      let len;\n      len = _list.length;\n      if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n        len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n      }\n      return len;\n    })(); di < dl; di++) {\n\n      if (_list[di]) {\n        let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n        if (_groupRow && \"__isGrouping\" in _list[di]) {\n          rowTable = _groupRow;\n          isGroupingRow = true;\n        } else {\n          rowTable = _bodyRow;\n        }\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n          SS.push('<tr class=\"tr-' + (di % 4) + '', (cfg.body.trStyleClass) ? (U.isFunction(cfg.body.trStyleClass)) ? ' ' + cfg.body.trStyleClass.call({\n              item: _list[di],\n              index: di\n            }, _list[di], di) : ' ' + cfg.body.trStyleClass : '', '\"',\n\n            (isGroupingRow) ? ' data-ax6grid-grouping-tr=\"true\"' : '',\n            ' data-ax6grid-tr-data-index=\"' + di + '\"',\n            ' data-ax6grid-tr-data-o-index=\"' + odi + '\"',\n            ' data-ax6grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n            ' data-ax6grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n            '>');\n          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n            col = rowTable.rows[tri].cols[ci];\n            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n            colAlign = col.align || bodyAlign;\n\n            SS.push('<td ',\n              'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-data-o-index=\"' + odi + '\" ',\n              'data-ax6grid-column-row=\"' + tri + '\" ',\n              'data-ax6grid-column-col=\"' + ci + '\" ',\n              'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n              'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n              'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n              (function (_focusedColumn, _selectedColumn) {\n                let attrs = \"\";\n                if (_focusedColumn) {\n                  attrs += 'data-ax6grid-column-focused=\"true\" ';\n                }\n                if (_selectedColumn) {\n                  attrs += 'data-ax6grid-column-selected=\"true\" ';\n                }\n                return attrs;\n              })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n              'colspan=\"' + col.colspan + '\" ',\n              'rowspan=\"' + col.rowspan + '\" ',\n              'class=\"' + (function (_col) {\n                let tdCSS_class = \"\";\n                if (_col.styleClass) {\n                  if (U.isFunction(_col.styleClass)) {\n                    tdCSS_class += _col.styleClass.call({\n                      column: _col,\n                      key: _col.key,\n                      item: _list[di],\n                      index: di\n                    }) + \" \";\n                  } else {\n                    tdCSS_class += _col.styleClass + \" \";\n                  }\n                }\n                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                return tdCSS_class;\n              }).call(this, col) + '\" ',\n              'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n            SS.push((function (_cellHeight) {\n              let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n              if (!col.multiLine) {\n                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n              }\n\n              return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n            })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n            SS.push('</td>');\n          }\n          SS.push('<td ',\n            'data-ax6grid-column-row=\"null\" ',\n            'data-ax6grid-column-col=\"null\" ',\n            'data-ax6grid-data-index=\"' + di + '\" ',\n            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n            'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n            '></td>');\n          SS.push('</tr>');\n        }\n      }\n    }\n    SS.push('</table>');\n\n    if (isScrolled && _list.length) {\n      SS.push('<div style=\"background:repeating-linear-gradient(to bottom, ' + stripeString + ');' +\n        'font-size:0;' +\n        'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n    }\n\n\n    _elTarget.empty();\n    SS = SS.join('');\n\n    _elTarget.get(0).innerHTML = SS;\n\n    this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n    return true;\n  };\n\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey];\n\n    if (!isFirstPaint && !_scrollConfig) {\n      this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n      return false;\n    }\n\n    let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n    SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n    SS.push('<colgroup>');\n    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n      SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n    }\n    SS.push('<col  />');\n    SS.push('</colgroup>');\n\n    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n      SS.push('<tr class=\"tr-sum\">');\n      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n        col = _bodyRow.rows[tri].cols[ci];\n        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n        colAlign = col.align || bodyAlign;\n\n        SS.push('<td ',\n          'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n          'data-ax6grid-column-row=\"' + tri + '\" ',\n          'data-ax6grid-column-col=\"' + ci + '\" ',\n          'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n          'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n          'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n          (function (_focusedColumn, _selectedColumn) {\n            var attrs = \"\";\n            if (_focusedColumn) {\n              attrs += 'data-ax6grid-column-focused=\"true\" ';\n            }\n            if (_selectedColumn) {\n              attrs += 'data-ax6grid-column-selected=\"true\" ';\n            }\n            return attrs;\n          })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n          'colspan=\"' + col.colspan + '\" ',\n          'rowspan=\"' + col.rowspan + '\" ',\n          'class=\"' + (function (_col) {\n            var tdCSS_class = \"\";\n            if (_col.styleClass) {\n              if (U.isFunction(_col.styleClass)) {\n                tdCSS_class += _col.styleClass.call({\n                  column: _col,\n                  key: _col.key,\n                  isFootSum: true\n                }) + \" \";\n              } else {\n                tdCSS_class += _col.styleClass + \" \";\n              }\n            }\n            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n            return tdCSS_class;\n          }).call(this, col) + '\" ',\n          'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n        SS.push((function (_cellHeight) {\n          let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n          if (!col.multiLine) {\n            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n          }\n\n          return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n            ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n        })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n        SS.push('</td>');\n      }\n      SS.push('<td ',\n        'data-ax6grid-column-row=\"null\" ',\n        'data-ax6grid-column-col=\"null\" ',\n        'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n        '></td>');\n      SS.push('</tr>');\n    }\n\n    SS.push('</table>');\n\n    _elTarget.empty();\n    SS = SS.join('');\n\n    _elTarget.get(0).innerHTML = SS;\n\n    this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n    return true;\n  };\n\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n    let tblRowMaps = [];\n    let _elTarget = this.$.panel[_elTargetKey];\n    let token = {}, hasMergeTd;\n\n    // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n    let tableTrs = _elTarget.find(\"tr\");\n    for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n      let tableTrTds, trMaps;\n      tableTrTds = tableTrs[ri].childNodes;\n      trMaps = [];\n\n      for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n        let tdObj = {\n          \"$\": jQuery(tableTrTds[ci])\n        };\n\n        if (tdObj[\"$\"].attr(\"data-ax6grid-column-col\") != \"null\") {\n          tdObj.dindex = tdObj[\"$\"].attr(\"data-ax6grid-data-index\");\n          tdObj.tri = tdObj[\"$\"].attr(\"data-ax6grid-column-row\");\n          tdObj.ci = tdObj[\"$\"].attr(\"data-ax6grid-column-col\");\n          tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-rowIndex\");\n          tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-colIndex\");\n          tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n          tdObj.text = tdObj[\"$\"].text();\n          trMaps.push(tdObj);\n        }\n\n        tdObj = null;\n      }\n      tblRowMaps.push(trMaps);\n    }\n\n    // 두줄이상 일 때 의미가 있으니.\n    if (tblRowMaps.length > 1) {\n      hasMergeTd = false;\n      for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n        let prevTokenColIndexs = [];\n\n        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n          // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n\n          if (!_colGroup[ci].editor && (() => {\n              if (U.isArray(cfg.body.mergeCells)) {\n                return U.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n              } else {\n                return true;\n              }\n            })()) {\n\n            // 앞줄과 값이 같다면.\n            if (token[ci] && (() => {\n                if (prevTokenColIndexs.length > 0) {\n                  let hasFalse = true;\n                  prevTokenColIndexs.forEach(function (ti) {\n                    if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                      hasFalse = false;\n                    }\n                  });\n                  return hasFalse;\n                } else {\n                  return true;\n                }\n              })() && token[ci].text == tblRowMaps[ri][ci].text) {\n              tblRowMaps[ri][ci].rowspan = 0;\n              tblRowMaps[token[ci].ri][ci].rowspan++;\n              hasMergeTd = true;\n            } else {\n              token[ci] = {\n                ri: ri,\n                ci: ci,\n                text: tblRowMaps[ri][ci].text\n              };\n            }\n\n            prevTokenColIndexs.push(ci);\n          }\n        }\n      }\n\n      // rowspan을 다 구했으면 적용합니다.\n      if (hasMergeTd) {\n        for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n          for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n            if (tblRowMaps[ri][ci].rowspan == 0) {\n              tblRowMaps[ri][ci][\"$\"].remove();\n            } else if (tblRowMaps[ri][ci].rowspan > 1) {\n              tblRowMaps[ri][ci][\"$\"]\n                .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                .addClass(\"merged\");\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let scrollConfig = {\n    paintStartRowIndex: paintStartRowIndex,\n    paintRowCount: paintRowCount,\n    paintStartColumnIndex: paintStartColumnIndex,\n    paintEndColumnIndex: paintEndColumnIndex,\n    nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n    nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n    bodyTrHeight: this.xvar.bodyTrHeight,\n    virtualScrollX: this.config.virtualScrollX,\n    virtualScrollY: this.config.virtualScrollY,\n  };\n  let frozenScrollConfig = jQuery.extend({}, scrollConfig, {\n    paintStartRowIndex: 0,\n    paintRowCount: this.xvar.frozenRowIndex\n  });\n\n  // aside\n  if (cfg.asidePanelWidth > 0) {\n    if (this.xvar.frozenRowIndex > 0) {\n      // 상단 행고정\n      repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n\n    repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n    if (cfg.footSum) {\n      // 바닥 요약 (footSum에 대한 aside 사용안함)\n      repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n    }\n  }\n\n  // left\n  if (this.xvar.frozenColumnIndex > 0) {\n    if (this.xvar.frozenRowIndex > 0) {\n      // 상단 행고정\n      repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n\n    repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n    }\n  }\n\n  // body\n  if (this.xvar.frozenRowIndex > 0) {\n    // 상단 행고정\n    repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n  }\n  repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n  // 바닥 요약\n  if (cfg.footSum && this.needToPaintSum) {\n    repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n  }\n  // right\n  if (cfg.rightSum) {\n    // todo : right 표현 정리\n  }\n\n  /// mergeCells\n  if (cfg.body.mergeCells && list.length) {\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n        // console.log(this.leftHeaderColGroup, leftBodyRowData);\n        mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n      }\n      mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n      mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n    }\n    mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n  }\n\n  this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n  this.xvar.paintStartRowIndex = paintStartRowIndex;\n  this.xvar.paintRowCount = paintRowCount;\n  this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n  this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n  this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n  this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n  this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n  this.xvar.dataRowCount = list.length;\n  this.needToPaintSum = false;\n\n  PAGE.statusUpdate.call(this);\n};\n\nconst updateRowState = function (_states, _dindex, _doindex, _data) {\n  let self      = this,\n      cfg       = this.config,\n      processor = {\n        \"selected\": function (_dindex, _doindex) {\n          if (this.list[_doindex]) {\n            let i = this.$.livePanelKeys.length;\n            while (i--) {\n              this.$.panel[this.$.livePanelKeys[i]]\n                .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                .attr(\"data-ax6grid-selected\", this.list[_doindex][cfg.columnKeys.selected]);\n            }\n          }\n        },\n        \"selectedClear\": function () {\n          let di = this.list.length;\n          let pi;\n\n          if (!this.proxyList) {\n            while (di--) {\n              if (this.list[di][cfg.columnKeys.selected]) {\n                pi = this.$.livePanelKeys.length;\n                while (pi--) {\n                  this.$.panel[this.$.livePanelKeys[pi]]\n                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                    .attr(\"data-ax6grid-selected\", false);\n                }\n              }\n              this.list[di][cfg.columnKeys.selected] = false;\n            }\n          } else {\n            while (di--) {\n              this.list[di][cfg.columnKeys.selected] = false;\n            }\n            di = this.proxyList.length;\n            while (di--) {\n              if (this.list[doi][cfg.columnKeys.selected]) {\n                pi = this.$.livePanelKeys.length;\n                while (pi--) {\n                  this.$.panel[this.$.livePanelKeys[pi]]\n                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                    .attr(\"data-ax6grid-selected\", false);\n                }\n              }\n\n              this.proxyList[di][cfg.columnKeys.selected] = false;\n              let doi = this.proxyList[di].__original_index__;\n            }\n          }\n        },\n        \"cellChecked\": function (_dindex, _doindex, _data) {\n          let key      = _data.key,\n              rowIndex = _data.rowIndex,\n              colIndex = _data.colIndex;\n\n          let panelName = (function () {\n            let _panels = [];\n            if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n            if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n            _panels.push(\"body\");\n            if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n            return _panels.join(\"-\");\n          }).call(this);\n\n          this.$.panel[panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n            .find('[data-ax6grid-column-rowIndex=\"' + rowIndex + '\"][data-ax6grid-column-colIndex=\"' + colIndex + '\"]')\n            .find('[data-ax6grid-editor=\"checkbox\"]')\n            .attr(\"data-ax6grid-checked\", '' + _data.checked);\n        }\n      };\n\n  if (typeof _doindex === \"undefined\") _doindex = _dindex;\n\n  _states.forEach(function (_state) {\n    if (!processor[_state]) throw 'invaild state name';\n    processor[_state].call(self, _dindex, _doindex, _data);\n  });\n};\n\nconst toggleCollapse = function (_dindex, _doindex, _collapse) {\n  if (DATA.toggleCollapse.call(this, _dindex, _doindex, _collapse)) {\n    this.proxyList = DATA.getProxyList.call(this, this.list);\n    this.align();\n  }\n};\n\n/**\n * @module AX6UIGrid_body\n */\nexport default {\n  /**\n   *\n   */\n  init: function () {\n    let self = this;\n\n    this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax6grid-column-attr]', function (e) {\n      let panelName, attr,\n          row, col, dindex, doindex, rowIndex, colIndex,\n          targetDBLClick = {\n            \"default\": function (_column) {\n              if (self.isInlineEditing) {\n                for (let columnKey in self.inlineEditing) {\n                  if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                    return this;\n                  }\n                }\n              }\n\n              let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n              if (column) {\n                if (!self.list[dindex].__isGrouping) {\n                  value = DATA.getValue.call(self, dindex, doindex, column.key);\n                }\n              }\n\n              let editor = self.colGroup[_column.colIndex].editor;\n              if (U.isObject(editor)) {\n                inlineEdit.active.call(self, self.focusedColumn, e, value);\n              } else {\n                // 더블클릭 실행\n                if (self.config.body.onDBLClick) {\n                  let that = {\n                    self: self,\n                    page: self.page,\n                    list: self.list,\n                    item: self.list[_column.dindex],\n                    dindex: _column.dindex,\n                    doindex: _column.doindex,\n                    rowIndex: _column.rowIndex,\n                    colIndex: _column.colIndex,\n                    column: column,\n                    value: self.list[_column.dindex][column.key]\n                  };\n                  self.config.body.onDBLClick.call(that);\n                }\n              }\n            },\n            \"rowSelector\": function (_column) {\n\n            },\n            \"lineNumber\": function (_column) {\n\n            }\n          };\n\n      panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n      attr = this.getAttribute(\"data-ax6grid-column-attr\");\n      row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n      col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n      rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n      colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n      dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n      doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n      if (attr in targetDBLClick) {\n        targetDBLClick[attr]({\n          panelName: panelName,\n          attr: attr,\n          row: row,\n          col: col,\n          dindex: dindex,\n          doindex: doindex,\n          rowIndex: rowIndex,\n          colIndex: colIndex\n        });\n\n        U.stopEvent(e);\n      }\n    });\n\n    this.$[\"container\"][\"body\"].on(\"click\", '[data-ax6grid-column-attr]', function (e) {\n      let panelName, attr,\n          row, col, dindex, doindex, rowIndex, colIndex, disableSelection,\n          targetClick = {\n            \"default\": function (_column) {\n              let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                  that   = {\n                    self: self,\n                    page: self.page,\n                    list: self.list,\n                    item: self.list[_column.doindex],\n                    dindex: _column.dindex,\n                    doindex: _column.doindex,\n                    rowIndex: _column.rowIndex,\n                    colIndex: _column.colIndex,\n                    column: column,\n                    value: self.list[_column.dindex][column.key]\n                  };\n\n              if (column.editor && column.editor.type == \"checkbox\") { // todo : INLINE_EDITOR에서 처리 할수 있도록 구문 변경 필요.\n                let value = DATA.getValue.call(self, _column.dindex, _column.doindex, column.key),\n                    checked, newValue;\n\n                if (column.editor.config && column.editor.config.trueValue) {\n                  if (checked = !(value == column.editor.config.trueValue)) {\n                    newValue = column.editor.config.trueValue;\n                  } else {\n                    newValue = column.editor.config.falseValue;\n                  }\n                } else {\n                  newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                }\n\n                DATA.setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);\n\n                updateRowState.call(self, [\"cellChecked\"], _column.dindex, _column.doindex, {\n                  key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                  editorConfig: column.editor.config, checked: checked\n                });\n              } else {\n                if (self.config.body.onClick) {\n                  self.config.body.onClick.call(that);\n                }\n              }\n            },\n            \"rowSelector\": function (_column) {\n              let item = self.list[_column.doindex];\n              if (item[self.config.columnKeys.disableSelection]) {\n                return false;\n              }\n\n              if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {\n                updateRowState.call(self, [\"selectedClear\"]);\n                DATA.clearSelect.call(self);\n              }\n\n              DATA.select.call(self, _column.dindex, _column.doindex, undefined, {\n                internalCall: true\n              });\n              updateRowState.call(self, [\"selected\"], _column.dindex, _column.doindex);\n            },\n            \"lineNumber\": function (_column) {\n\n            },\n            \"tree-control\": function (_column, _el) {\n              //console.log(_column);\n              toggleCollapse.call(self, _column.dindex, _column.doindex);\n            }\n          };\n\n      panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n      attr = this.getAttribute(\"data-ax6grid-column-attr\");\n      row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n      col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n      rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n      colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n      dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n      doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n      if (attr in targetClick) {\n        targetClick[attr]({\n          panelName: panelName,\n          attr: attr,\n          row: row,\n          col: col,\n          dindex: dindex,\n          doindex: doindex,\n          rowIndex: rowIndex,\n          colIndex: colIndex\n        }, this);\n      }\n    });\n\n    this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n      let target, dindex, doindex, rowIndex, colIndex, item, column, param = {};\n\n      target = U.findParentNode(e.target, function (t) {\n        if (t.getAttribute(\"data-ax6grid-column-attr\")) {\n          return true;\n        }\n      });\n\n      if (target) {\n        // item 찾기\n        rowIndex = Number(target.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(target.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(target.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(target.getAttribute(\"data-ax6grid-data-o-index\"));\n        column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n        item = self.list[dindex];\n      }\n\n      if (self.config.body.onContextMenu) {\n        param = {\n          element: target,\n          dindex: dindex,\n          doindex: doindex,\n          rowIndex: rowIndex,\n          colIndex: colIndex,\n          item: item,\n          column: column,\n          gridSelf: self\n        };\n        self.config.body.onContextMenu.call({\n          self: self,\n          item: item,\n          column: column,\n          dindex: dindex,\n          doindex: doindex,\n          rowIndex: rowIndex,\n          colIndex: colIndex\n        }, e, param);\n      }\n\n      U.stopEvent(e.originalEvent);\n      target = null;\n      dindex = null;\n      doindex = null;\n      rowIndex = null;\n      colIndex = null;\n      item = null;\n      column = null;\n      param = null;\n    });\n\n    this.$[\"container\"][\"body\"]\n      .on(\"mousedown\", '[data-ax6grid-column-attr=\"default\"]', function (e) {\n        if (self.xvar.touchmoved) return false;\n        if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n          columnSelector.on.call(self, {\n            panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n            dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n            doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n            rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n            colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n            colspan: Number(this.getAttribute(\"colspan\"))\n          });\n        }\n      })\n      .on(\"dragstart\", function (e) {\n        U.stopEvent(e);\n        return false;\n      });\n\n    resetFrozenColumn.call(this);\n\n    // 그리드 바디에 출력할 여유 카운트\n    this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n    this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n\n    if (this.config.virtualScrollAccelerated) {\n      this.__throttledScroll = U.throttle(function (css, opts) {\n        if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n          repaint.call(this);\n        } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n          repaint.call(this);\n        }\n        if (opts.callback) {\n          opts.callback();\n        }\n      }, this.config.virtualScrollAcceleratedDelayTime);\n    } else {\n      this.__throttledScroll = false;\n    }\n  },\n  /**\n   *\n   * @param _reset\n   * @return {module:AX6UIGrid_body}\n   */\n  repaint: repaint,\n  /**\n   *\n   * @param _panelName\n   * @param _dindex\n   * @param _doindex\n   * @param _rowIndex\n   * @param _colIndex\n   * @param _newValue\n   */\n  repaintCell: function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {\n    let self = this,\n        cfg  = this.config,\n        list = this.list;\n\n    let updateCell = this.$[\"panel\"][_panelName]\n      .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n      .find('[data-ax6grid-column-rowindex=\"' + _rowIndex + '\"][data-ax6grid-column-colindex=\"' + _colIndex + '\"]')\n      .find('[data-ax6grid-cellholder]'),\n        colGroup   = this.colGroup,\n        col        = colGroup[_colIndex];\n\n    updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n    if (col.editor && col.editor.updateWith) {\n      col.editor.updateWith.forEach(function (updateColumnKey) {\n        colGroup.forEach(function (col) {\n          if (col.key == updateColumnKey) {\n            let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                panelName                         = UTIL.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                updateWithCell                    = self.$[\"panel\"][panelName]\n                  .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                  .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                  .find('[data-ax6grid-cellholder]');\n\n            updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n          }\n        });\n      });\n    }\n\n    /// ~~~~~~\n\n    let paintStartRowIndex   = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        headerColGroup       = this.headerColGroup,\n        leftFootSumData      = this.leftFootSumData,\n        footSumData          = this.footSumData,\n        leftBodyGroupingData = this.leftBodyGroupingData,\n        bodyGroupingData     = this.bodyGroupingData,\n        bodyAlign            = cfg.body.align,\n        paintRowCount        = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig         = {\n          paintStartRowIndex: paintStartRowIndex,\n          paintRowCount: paintRowCount,\n          bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n      headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n      if (cfg.body.grouping) {\n        bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n      }\n      if (cfg.footSum) {\n        footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n      }\n    }\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n      let _elTarget = this.$.panel[_elTargetKey],\n          SS        = [],\n          cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n      SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n      SS.push('<colgroup>');\n      for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n        SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n      }\n      SS.push('<col  />');\n      SS.push('</colgroup>');\n\n      for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n        SS.push('<tr class=\"tr-sum\">');\n        for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n          col = _bodyRow.rows[tri].cols[ci];\n          cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n          colAlign = col.align || bodyAlign;\n\n          SS.push('<td ',\n            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n            'data-ax6grid-column-row=\"' + tri + '\" ',\n            'data-ax6grid-column-col=\"' + ci + '\" ',\n            'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n            (function (_focusedColumn, _selectedColumn) {\n              var attrs = \"\";\n              if (_focusedColumn) {\n                attrs += 'data-ax6grid-column-focused=\"true\" ';\n              }\n              if (_selectedColumn) {\n                attrs += 'data-ax6grid-column-selected=\"true\" ';\n              }\n              return attrs;\n            })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            'class=\"' + (function (_col) {\n              let tdCSS_class = \"\";\n              if (_col.styleClass) {\n                if (U.isFunction(_col.styleClass)) {\n                  tdCSS_class += _col.styleClass.call({\n                    column: _col,\n                    key: _col.key,\n                    isFootSum: true\n                  }) + \" \";\n                } else {\n                  tdCSS_class += _col.styleClass + \" \";\n                }\n              }\n              if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n              if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n              return tdCSS_class;\n            }).call(this, col) + '\" ',\n            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n          SS.push((function (_cellHeight) {\n            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n            if (!col.multiLine) {\n              _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n            }\n\n            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n              ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n              '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n          })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n          SS.push('</td>');\n        }\n        SS.push('<td ',\n          'data-ax6grid-column-row=\"null\" ',\n          'data-ax6grid-column-col=\"null\" ',\n          'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n          'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n          '></td>');\n        SS.push('</tr>');\n      }\n\n      SS.push('</table>');\n\n      _elTarget.empty().get(0).innerHTML = SS.join('');\n      return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n      let _elTarget = this.$.panel[_elTargetKey],\n          SS        = [],\n          di, dl, tri, trl, ci, cl,\n          col, cellHeight, colAlign;\n\n      for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n        let len;\n        len = _list.length;\n        if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n          len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n        }\n        return len;\n      })(); di < dl; di++) {\n        if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n          let rowTable = _groupRow;\n          SS = [];\n          for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n            for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n              col = rowTable.rows[tri].cols[ci];\n              cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n              colAlign = col.align || bodyAlign;\n\n              SS.push('<td ',\n                'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                'data-ax6grid-data-index=\"' + di + '\" ',\n                'data-ax6grid-column-row=\"' + tri + '\" ',\n                'data-ax6grid-column-col=\"' + ci + '\" ',\n                'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                (function (_focusedColumn, _selectedColumn) {\n                  let attrs = \"\";\n                  if (_focusedColumn) {\n                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                  }\n                  if (_selectedColumn) {\n                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                  }\n                  return attrs;\n                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                'colspan=\"' + col.colspan + '\" ',\n                'rowspan=\"' + col.rowspan + '\" ',\n                'class=\"' + (function (_col) {\n                  let tdCSS_class = \"\";\n                  if (_col.styleClass) {\n                    if (U.isFunction(_col.styleClass)) {\n                      tdCSS_class += _col.styleClass.call({\n                        column: _col,\n                        key: _col.key,\n                        item: _list[di],\n                        index: di\n                      }) + \" \";\n                    } else {\n                      tdCSS_class += _col.styleClass + \" \";\n                    }\n                  }\n                  if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                  if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                  return tdCSS_class;\n                }).call(this, col) + '\" ',\n                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n              SS.push((function (_cellHeight) {\n                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                if (!col.multiLine) {\n                  _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                }\n\n                return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                  ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                  '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n              })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n              SS.push('</td>');\n            }\n            SS.push('<td ',\n              'data-ax6grid-column-row=\"null\" ',\n              'data-ax6grid-column-col=\"null\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n              'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n              '></td>');\n          }\n          _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        }\n      }\n    };\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n      // left\n      if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n          // 상단 행고정\n          replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n            paintStartRowIndex: 0,\n            paintRowCount: this.xvar.frozenRowIndex,\n            bodyTrHeight: this.xvar.bodyTrHeight\n          });\n        }\n        replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n      }\n\n      // body\n      if (this.xvar.frozenRowIndex > 0) {\n        // 상단 행고정\n        replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n          paintStartRowIndex: 0,\n          paintRowCount: this.xvar.frozenRowIndex,\n          bodyTrHeight: this.xvar.bodyTrHeight\n        });\n      }\n\n      replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n      }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n  },\n  /**\n   *\n   * @param _dindex\n   */\n  repaintRow: function (_dindex) {\n    let self = this,\n        cfg  = this.config,\n        list = this.list;\n    /// ~~~~~~\n\n    let paintStartRowIndex    = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n        asideBodyRowData      = this.asideBodyRowData,\n        leftBodyRowData       = this.leftBodyRowData,\n        bodyRowData           = this.bodyRowData,\n        leftFootSumData       = this.leftFootSumData,\n        footSumData           = this.footSumData,\n        asideBodyGroupingData = this.asideBodyGroupingData,\n        leftBodyGroupingData  = this.leftBodyGroupingData,\n        bodyGroupingData      = this.bodyGroupingData,\n        bodyAlign             = cfg.body.align,\n        paintRowCount         = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n        scrollConfig          = {\n          paintStartRowIndex: paintStartRowIndex,\n          paintRowCount: paintRowCount,\n          bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n      let _elTarget = this.$.panel[_elTargetKey],\n          SS        = [],\n          cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n      SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n      SS.push('<colgroup>');\n      for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n        SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n      }\n      SS.push('<col  />');\n      SS.push('</colgroup>');\n\n      for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n        SS.push('<tr class=\"tr-sum\">');\n        for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n          col = _bodyRow.rows[tri].cols[ci];\n          cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n          colAlign = col.align || bodyAlign;\n\n          SS.push('<td ',\n            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n            'data-ax6grid-column-row=\"' + tri + '\" ',\n            'data-ax6grid-column-col=\"' + ci + '\" ',\n            'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n            (function (_focusedColumn, _selectedColumn) {\n              var attrs = \"\";\n              if (_focusedColumn) {\n                attrs += 'data-ax6grid-column-focused=\"true\" ';\n              }\n              if (_selectedColumn) {\n                attrs += 'data-ax6grid-column-selected=\"true\" ';\n              }\n              return attrs;\n            })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            'class=\"' + (function (_col) {\n              var tdCSS_class = \"\";\n              if (_col.styleClass) {\n                if (U.isFunction(_col.styleClass)) {\n                  tdCSS_class += _col.styleClass.call({\n                    column: _col,\n                    key: _col.key,\n                    isFootSum: true\n                  }) + \" \";\n                } else {\n                  tdCSS_class += _col.styleClass + \" \";\n                }\n              }\n              if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n              if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n              return tdCSS_class;\n            }).call(this, col) + '\" ',\n            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n          SS.push((function (_cellHeight) {\n            var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n            if (!col.multiLine) {\n              _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n            }\n\n            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n              ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n              '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n          })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n          SS.push('</td>');\n        }\n        SS.push('<td ',\n          'data-ax6grid-column-row=\"null\" ',\n          'data-ax6grid-column-col=\"null\" ',\n          'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n          'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n          '></td>');\n        SS.push('</tr>');\n      }\n\n      SS.push('</table>');\n\n      _elTarget.empty().get(0).innerHTML = SS.join('');\n      return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n      let _elTarget = this.$.panel[_elTargetKey],\n          SS        = [],\n          di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n      if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n        _scrollConfig = {\n          paintStartRowIndex: 0,\n          paintRowCount: _list.length\n        };\n      }\n\n      for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n        let len;\n        len = _list.length;\n        if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n          len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n        }\n        return len;\n      })(); di < dl; di++) {\n        if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n          let rowTable = _groupRow;\n          SS = [];\n          for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n            for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n              col = rowTable.rows[tri].cols[ci];\n              cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n              colAlign = col.align || bodyAlign;\n\n              SS.push('<td ',\n                'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                'data-ax6grid-data-index=\"' + di + '\" ',\n                'data-ax6grid-column-row=\"' + tri + '\" ',\n                'data-ax6grid-column-col=\"' + ci + '\" ',\n                'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                (function (_focusedColumn, _selectedColumn) {\n                  let attrs = \"\";\n                  if (_focusedColumn) {\n                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                  }\n                  if (_selectedColumn) {\n                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                  }\n                  return attrs;\n                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                'colspan=\"' + col.colspan + '\" ',\n                'rowspan=\"' + col.rowspan + '\" ',\n                'class=\"' + (function (_col) {\n                  let tdCSS_class = \"\";\n                  if (_col.styleClass) {\n                    if (U.isFunction(_col.styleClass)) {\n                      tdCSS_class += _col.styleClass.call({\n                        column: _col,\n                        key: _col.key,\n                        item: _list[di],\n                        index: di\n                      }) + \" \";\n                    } else {\n                      tdCSS_class += _col.styleClass + \" \";\n                    }\n                  }\n                  if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                  if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                  return tdCSS_class;\n                }).call(this, col) + '\" ',\n                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n              SS.push((function (_cellHeight) {\n                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                if (!col.multiLine) {\n                  _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                }\n\n                return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                  ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                  '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n              })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n              SS.push('</td>');\n            }\n            SS.push('<td ',\n              'data-ax6grid-column-row=\"null\" ',\n              'data-ax6grid-column-col=\"null\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n              'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n              '></td>');\n          }\n          _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        }\n      }\n    };\n    let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n      let _elTarget                                             = this.$.panel[_elTargetKey],\n          SS                                                    = [],\n          tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow,\n          odi                                                   = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n\n      for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n          col = rowTable.rows[tri].cols[ci];\n          cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n          colAlign = col.align || bodyAlign;\n\n          SS.push('<td ',\n            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n            'data-ax6grid-data-index=\"' + di + '\" ',\n            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n            'data-ax6grid-column-row=\"' + tri + '\" ',\n            'data-ax6grid-column-col=\"' + ci + '\" ',\n            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n            (function (_focusedColumn, _selectedColumn) {\n              let attrs = \"\";\n              if (_focusedColumn) {\n                attrs += 'data-ax6grid-column-focused=\"true\" ';\n              }\n              if (_selectedColumn) {\n                attrs += 'data-ax6grid-column-selected=\"true\" ';\n              }\n              return attrs;\n            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            'class=\"' + (function (_col) {\n              let tdCSS_class = \"\";\n              if (_col.styleClass) {\n                if (U.isFunction(_col.styleClass)) {\n                  tdCSS_class += _col.styleClass.call({\n                    column: _col,\n                    key: _col.key,\n                    item: _list[di],\n                    index: di\n                  }) + \" \";\n                } else {\n                  tdCSS_class += _col.styleClass + \" \";\n                }\n              }\n              if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n              if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n              return tdCSS_class;\n            }).call(this, col) + '\" ',\n            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n          SS.push((function (_cellHeight) {\n            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n            if (!col.multiLine) {\n              _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n            }\n\n            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n              ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n              '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n          })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n          SS.push('</td>');\n        }\n        SS.push('<td ',\n          'data-ax6grid-column-row=\"null\" ',\n          'data-ax6grid-column-col=\"null\" ',\n          'data-ax6grid-data-index=\"' + di + '\" ',\n          'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n          'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n          '></td>');\n      }\n\n      _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n    };\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n      } else {\n        replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n      }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > _dindex) {\n      // 상단 행고정\n      replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n    } else {\n      replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n    }\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n      // left\n      if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > _dindex) {\n          // 상단 행고정\n          replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        else {\n          replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n        }\n      }\n\n      // body\n      if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n      }\n      else {\n        replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n      }\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n      }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n    }\n  },\n  /**\n   *\n   * @param _states\n   * @param _dindex\n   * @param _doindex\n   * @param _data\n   */\n  updateRowState: updateRowState,\n  /**\n   *\n   * @param _states\n   * @param _data\n   */\n  updateRowStateAll: function (_states, _data) {\n    let self      = this,\n        cfg       = this.config,\n        processor = {\n          \"selected\": function (_dindex) {\n            repaint.call(this, true);\n          }\n        };\n\n    _states.forEach(function (_state) {\n      if (!processor[_state]) throw 'invaild state name';\n      processor[_state].call(self, _data);\n    });\n  },\n  /**\n   *\n   * @param css\n   * @param opts\n   */\n  scrollTo: function (css, opts) {\n    let self = this;\n    if (typeof opts === \"undefined\") opts = {timeoutUnUse: false};\n    if (this.isInlineEditing) {\n      for (var key in this.inlineEditing) {\n        //if(this.inlineEditing[key].editor.type === \"select\") {}\n        // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n        inlineEdit.deActive.call(this, \"ESC\", key);\n      }\n    }\n\n    if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n      this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n      this.$.panel[\"left-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n      this.$.panel[\"top-body-scroll\"].css({left: css.left});\n    }\n\n    this.$.panel[\"body-scroll\"].css(css);\n\n    if (this.config.footSum && \"left\" in css) {\n      this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n    }\n\n    // 바디 리페인팅 this.__throttledScroll 은 body init 에서 초기화\n    if (this.__throttledScroll) {\n      this.__throttledScroll(css, opts);\n    } else {\n      if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n        repaint.call(this);\n      } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n        repaint.call(this);\n      }\n      if (opts.callback) {\n        opts.callback();\n      }\n    }\n  },\n  /**\n   *\n   */\n  blur: function () {\n    columnSelect.focusClear.call(this);\n    columnSelect.clear.call(this);\n    if (this.isInlineEditing) {\n      inlineEdit.deActive.call(this);\n    }\n  },\n  /**\n   *\n   * @param _position\n   * @return {*}\n   */\n  moveFocus: function (_position) {\n    let focus = {\n      \"UD\": function (_dy) {\n        let moveResult = true,\n            focusedColumn, originalColumn, while_i,\n            nPanelInfo;\n\n        for (let c in this.focusedColumn) {\n          focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n          break;\n        }\n\n        if (!focusedColumn) return false;\n\n        originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n\n        if (_dy > 0) {\n          // 아래로\n          if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n            focusedColumn.dindex = focusedColumn.dindex + _dy;\n            focusedColumn.doindex = focusedColumn.doindex + _dy;\n            focusedColumn.rowIndex = 0;\n            if (focusedColumn.dindex > this.list.length - 1) {\n              focusedColumn.dindex = focusedColumn.doindex = this.list.length - 1;\n              moveResult = false;\n            }\n          } else {\n            focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n          }\n        }\n        else {\n          // 위로\n          if (focusedColumn.rowIndex + _dy < 0) {\n            focusedColumn.dindex = focusedColumn.dindex + _dy;\n            focusedColumn.doindex = focusedColumn.doindex + _dy;\n            focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n            if (focusedColumn.dindex < 0) {\n              focusedColumn.dindex = focusedColumn.doindex = 0;\n              moveResult = false;\n            }\n          } else {\n            focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n          }\n        }\n\n        while_i = 0;\n        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n          if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n            focusedColumn.colIndex--;\n          } else {\n            focusedColumn.rowIndex--;\n          }\n\n          if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n            // find fail\n            moveResult = false;\n            break;\n          }\n          while_i++;\n        }\n\n        nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n        // if mergeCells\n        if (this.config.body.mergeCells && this.list.length) {\n          while (!this.$.panel[nPanelInfo.panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n            if (_dy > 0) {\n              focusedColumn.dindex++;\n            } else {\n              focusedColumn.dindex--;\n            }\n\n            if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n              break;\n            }\n          }\n          nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n        }\n\n        focusedColumn.panelName = nPanelInfo.panelName;\n\n        // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n\n        if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n          if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n            let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;\n            if (newTop < 0) newTop = 0;\n            scrollTo.call(this, {top: -newTop, timeoutUnUse: false});\n            SCROLLER.resize.call(this);\n          }\n          else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n            scrollTo.call(this, {top: (this.xvar.virtualPaintRowCount - 2 - focusedColumn.dindex) * this.xvar.bodyTrHeight, timeoutUnUse: false});\n            SCROLLER.resize.call(this);\n          }\n        }\n\n        this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n        this.$.panel[focusedColumn.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n          .attr('data-ax6grid-column-focused', \"true\");\n\n        return moveResult;\n      },\n      \"LR\": function (_dx) {\n        let moveResult                                             = true,\n            focusedColumn, originalColumn,\n            while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n        for (var c in this.focusedColumn) {\n          focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n          break;\n        }\n        if (!focusedColumn) return false;\n\n        originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n\n        if (_dx < 0) {\n          focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n          if (focusedColumn.colIndex < 0) {\n            focusedColumn.colIndex = 0;\n            moveResult = false;\n          }\n        }\n        else {\n          focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n          if (focusedColumn.colIndex > this.colGroup.length - 1) {\n            focusedColumn.colIndex = this.colGroup.length - 1;\n            moveResult = false;\n          }\n        }\n\n        if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n          focusedColumn.rowIndex = 0;\n        }\n\n        if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n          if (_dx < 0) {\n            while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n              focusedColumn.colIndex--;\n              if (focusedColumn.colIndex <= 0) {\n                // find fail\n                moveResult = false;\n                break;\n              }\n            }\n          } else {\n            while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n              focusedColumn.colIndex++;\n              if (focusedColumn.colIndex >= this.colGroup.length) {\n                // find fail\n                moveResult = false;\n                break;\n              }\n            }\n          }\n        }\n        else {\n          if (_dx < 0) {\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n              focusedColumn.colIndex--;\n              if (focusedColumn.colIndex <= 0) {\n                // find fail\n                moveResult = false;\n                break;\n              }\n            }\n          } else {\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n              focusedColumn.colIndex++;\n              if (focusedColumn.colIndex >= this.colGroup.length) {\n                // find fail\n                moveResult = false;\n                break;\n              }\n            }\n          }\n        }\n\n        nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n        // if mergeCells\n        if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n          while (!this.$.panel[nPanelInfo.panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n            focusedColumn.dindex--;\n\n            if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n              break;\n            }\n          }\n          nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n        }\n\n        focusedColumn.panelName = nPanelInfo.panelName;\n\n        // 포커스 컬럼의 위치에 따라 스크롤 처리\n        let isScrollTo = (function () {\n          if (!this.config.virtualScrollX) return false;\n          let scrollLeft = 0;\n          if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n            if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n              scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n              scrollTo.call(this, {left: scrollLeft});\n              HEADER.scrollTo.call(this, {left: scrollLeft});\n              SCROLLER.resize.call(this);\n              return true;\n            }\n            else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n              if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                scrollTo.call(this, {left: -scrollLeft});\n                HEADER.scrollTo.call(this, {left: -scrollLeft});\n                SCROLLER.resize.call(this);\n              }\n              return true;\n            }\n          }\n          scrollLeft = null;\n          return false;\n        }).call(this);\n\n        containerPanelName = nPanelInfo.containerPanelName;\n        isScrollPanel = nPanelInfo.isScrollPanel;\n\n        this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n        var $column = this.$.panel[focusedColumn.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n          .attr('data-ax6grid-column-focused', \"true\");\n\n        if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n          // todo : 컬럼이동할 때에도 scrollTo 체크\n          var newLeft = (function () {\n            if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n              return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n            } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n              return $column.position().left;\n            } else {\n              return;\n            }\n          }).call(this);\n\n          if (typeof newLeft !== \"undefined\") {\n            HEADER.scrollTo.call(this, {left: -newLeft});\n            scrollTo.call(this, {left: -newLeft});\n            SCROLLER.resize.call(this);\n          }\n        }\n\n        return moveResult;\n      },\n      \"INDEX\": function (_dindex) {\n        let moveResult = true,\n            focusedColumn, originalColumn,\n            while_i;\n\n        for (let c in this.focusedColumn) {\n          focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n          break;\n        }\n        if (!focusedColumn) {\n          focusedColumn = {\n            rowIndex: 0,\n            colIndex: 0\n          }\n        }\n        originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n\n\n        if (_dindex == \"end\") {\n          _dindex = this.list.length - 1;\n        }\n\n        focusedColumn.dindex = _dindex;\n        focusedColumn.rowIndex = 0;\n\n        while_i = 0;\n        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n          if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n            focusedColumn.colIndex--;\n          } else {\n            focusedColumn.rowIndex--;\n          }\n\n          if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n            // find fail\n            break;\n          }\n          while_i++;\n        }\n\n        let nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n        focusedColumn.panelName = nPanelInfo.panelName;\n\n        // 포커스 컬럼의 위치에 따라 스크롤 처리.\n        (function () {\n          if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n            if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n              scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n              SCROLLER.resize.call(this);\n            }\n            else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n              scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n              SCROLLER.resize.call(this);\n            }\n          }\n        }).call(this);\n\n        this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n        this.$.panel[focusedColumn.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n          .attr('data-ax6grid-column-focused', \"true\");\n\n        return moveResult;\n      }\n    };\n\n    let processor = {\n      \"UP\": function () {\n        return focus[\"UD\"].call(this, -1);\n      },\n      \"DOWN\": function () {\n        return focus[\"UD\"].call(this, 1);\n      },\n      \"LEFT\": function () {\n        return focus[\"LR\"].call(this, -1);\n      },\n      \"RIGHT\": function () {\n        return focus[\"LR\"].call(this, 1);\n      },\n      \"HOME\": function () {\n        return focus[\"INDEX\"].call(this, 0);\n      },\n      \"END\": function () {\n        return focus[\"INDEX\"].call(this, \"end\");\n      },\n      \"position\": function (_position) {\n        return focus[\"INDEX\"].call(this, _position);\n      }\n    };\n\n    if (_position in processor) {\n      return processor[_position].call(this);\n    } else {\n      return processor[\"position\"].call(this, _position);\n    }\n  },\n  inlineEdit: inlineEdit,\n  /**\n   *\n   * @return {string}\n   */\n  getExcelString: function () {\n    let cfg              = this.config,\n        list             = this.list,\n        bodyRowData      = this.bodyRowTable,\n        footSumData      = this.footSumTable,\n        bodyGroupingData = this.bodyGroupingTable;\n\n    // body-scroll 의 포지션에 의존적이므로..\n    let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n      let SS = [],\n          di, dl,\n          tri, trl,\n          ci, cl,\n          col, val;\n\n      //SS.push('<table border=\"1\">');\n      for (di = 0, dl = _list.length; di < dl; di++) {\n        let isGroupingRow = false, rowTable;\n\n        if (_groupRow && \"__isGrouping\" in _list[di]) {\n          rowTable = _groupRow;\n          isGroupingRow = true;\n        } else {\n          rowTable = _bodyRow;\n        }\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n          SS.push('\\n<tr>');\n          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n            col = rowTable.rows[tri].cols[ci];\n\n            SS.push('<td ',\n              'colspan=\"' + col.colspan + '\" ',\n              'rowspan=\"' + col.rowspan + '\" ',\n              '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, val, \"text\"), '&nbsp;</td>');\n          }\n          SS.push('\\n</tr>');\n        }\n      }\n      //SS.push('</table>');\n      return SS.join('');\n    };\n    let getSum = function (_colGroup, _bodyRow, _list) {\n      let SS = [],\n          tri, trl,\n          ci, cl,\n          col;\n\n      //SS.push('<table border=\"1\">');\n      for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n        SS.push('\\n<tr>');\n        for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n          col = _bodyRow.rows[tri].cols[ci];\n          SS.push('<td ',\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            '>', getSumFieldValue.call(this, _list, col), '</td>');\n        }\n        SS.push('\\n</tr>');\n      }\n      //SS.push('</table>');\n\n      return SS.join('');\n    };\n\n    let po = [];\n    po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n    if (cfg.footSum) {\n      // 바닥 요약\n      po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n    }\n\n    // right\n    if (cfg.rightSum) {\n      // todo : right 표현 정리\n    }\n\n    return po.join('');\n  },\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   * @param _collapse\n   */\n  toggleCollapse: toggleCollapse,\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   */\n  click: function (_dindex, _doindex) {\n    let that = {\n      self: this,\n      page: this.page,\n      list: this.list,\n      item: this.list[_dindex],\n      dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onClick) {\n      this.config.body.onClick.call(that);\n    }\n\n    that = null;\n    // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n  },\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   */\n  dblClick: function (_dindex, _doindex) {\n    let that = {\n      self: this,\n      page: this.page,\n      list: this.list,\n      item: this.list[_dindex],\n      dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onDBLClick) {\n      this.config.body.onDBLClick.call(that);\n    }\n\n    that = null;\n  }\n};"]}