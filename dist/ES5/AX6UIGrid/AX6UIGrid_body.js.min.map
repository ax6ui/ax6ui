{"version":3,"sources":["AX6UIGrid_body.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_util","_AX6UIGrid_data","_AX6UIGrid_page","_AX6UIGrid_header","_AX6UIGrid_inline_editor","_AX6UIGrid_collector","_AX6UIGrid_formatter","_AX6UIGrid_scroller","columnSelect","focusClear","self","this","_column","c","focusedColumn","$","panel","panelName","find","dindex","rowIndex","colIndex","removeAttr","clear","selectedColumn","init","column","isInlineEditing","editKey","inlineEditing","call","doindex","colspan","start","update","trl","end","r","s","Math","min","xvar","selectedRange","e","max","range","inlineEdit","deActive","_panels","frozenRowIndex","push","frozenColumnIndex","join","attr","cell","on","instanceId","getAttribute","Number","columnSelector","off","_jqmin2","default","document","css","cfg","config","_AX6UIGrid_util2","divideTableByFrozenColumnIndex","bodyRowTable","label","asideBodyRowData","body","data","rows","i","l","dataTable","length","cols","col","rowspan","resetFrozenColumn","dividedBodyRowObj","_col","extend","lineNumberColumnWidth","columnAttr","key","rowSelectorColumnWidth","_width","width","dividedBodyGroupingObj","bodyGroupingTable","leftBodyRowData","showLineNumber","grouping","asideBodyGroupingData","leftData","bodyGroupingData","rightData","bodyGroupingMap","showRowSelector","dividedFootSumObj","footSumTable","footSumData","getFieldValue","_list","_item","_index","_value","_returnPlainText","_key","leftBodyGroupingData","<",">","leftFootSumData","editor","_editor","type","_AX6UIGrid_inline_editor2","tagsToReplace","_AX6UIGrid_data2","getValue","__origin_index__","_AX6Util2","isFunction","disabled","list","item","getHtml","valueProcessor","formatter","value","caller","customFormatter","_AX6UIGrid_formatter2","that","returnValue","test","replace","tag","__value","keys","tree","columnKeys","indentNodeHtml","arrowWidth","depth","indentWidth","collapse","icons","openedArrow","children","collapsedGroupIcon","groupIcon","itemIcon","treeControl","getGroupingValue","_label","__groupingBy","__groupingList","groupBy","collector","customCollector","_AX6UIGrid_collector2","getSumFieldValue","active","_focusedColumn","_e","_initValue","colGroup","_type","editMode","checked","newValue","trueValue","falseValue","updateRowState","__isGrouping","columnKey","useReturnToSave","originalValue","__editor","isNothing","money","initValue","$inlineEditorCell","$inlineEditor","editorValue","tagName","get","_msg","number","action","CANCEL","_dindex","_newValue","setValue","_doindex","repaintCell","bindedAx5ui","ax5picker","ax5select","remove","undefined","keydown","_options","ESC","RETURN","k","bodyRowMap","moveFocus","editorConfig","processor","_reset","proxyList","repaint","paintStartRowIndex","paintStartColumnIndex","virtualPaintStartRowIndex","floor","position","top","bodyTrHeight","paintRowCountTopMargin","virtualScrollY","paintEndColumnIndex","nopaintLeftColumnsWidth","nopaintRightColumnsWidth","bodyScrollLeft","left","isNaN","ci","_ex","_sx","virtualScrollX","bodyWidth","padding-left","padding-right","isFirstPaint","headerColGroup","bodyRowData","bodyAlign","align","paintRowCount","virtualPaintRowCount","bodyHeight","abs","dataRowCount","concat","splice","getTableByStartEndColumnIndex","needToPaintSum","livePanelKeys","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","cellHeight","colAlign","isScrolled","cgl","di","dl","stripeString","columnHeight","columnBorderWidth","len","isGroupingRow","rowTable","odi","tri","trStyleClass","selected","disableSelection","attrs","_selectedColumn","styleClass","tdCSS_class","_cellHeight","index","cl","lineHeight","multiLine","columnPadding","innerHTML","isFootSum","empty","mergeCellsBody","token","hasMergeTd","tableTrs","ri","tableTrTds","tdObj","tblRowMaps","trMaps","rl","childNodes","mergeCells","text","prevTokenColIndexs","hasFalse","forEach","ti","_loop2","frozenScrollConfig","scrollConfig","repaintSum","asideColGroup","slice","footSum","leftHeaderColGroup","row","_AX6UIGrid_page2","statusUpdate","targetDBLClick","onDBLClick","page","rowSelector","stopEvent","onClick","clearSelect","multipleSelect","selectedDataIndexs","select","toggleCollapse","_el","targetClick","target","findParentNode","param","t","element","onContextMenu","gridSelf","originalEvent","touchmoved","__throttledScroll","virtualScrollYCountMargin","opts","noRepaint","virtualScrollAccelerated","throttle","callback","virtualScrollAcceleratedDelayTime","_panelName","_rowIndex","_colIndex","updateCell","html","updateWithCell","updateWith","updateColumnKey","findPanelByColumnIndex","ceil","height","replaceGroupTr","repaintRow","replaceTr","_states","_data","pi","_state","selectedClear","scrollTo","doi","__original_index__","timeoutUnUse","focus","_dy","moveResult","while_i","_position","UD","originalColumn","nPanelInfo","resize","isScrollPanel","containerPanelName","_dx","newTop","_AX6UIGrid_scroller2","LR","scrollLeft","$column","isScrollTo","newLeft","_AX6UIGrid_header2","outerWidth","INDEX","UP","DOWN","getBody","LEFT","po","getSum","RIGHT","HOME","END","click","dblClick","val","rightSum","_collapse","getProxyList"],"mappings":"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","file":"AX6UIGrid_body.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"../AX6Util\";\nimport UTIL from \"./AX6UIGrid_util\";\nimport DATA from \"./AX6UIGrid_data\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport HEADER from \"./AX6UIGrid_header\";\n\nimport INLINE_EDITOR from \"./AX6UIGrid_inline_editor\";\nimport COLLECTOR from \"./AX6UIGrid_collector\";\nimport FORMATTER from \"./AX6UIGrid_formatter\";\nimport SCROLLER from \"./AX6UIGrid_scroller\";\n\nconst columnSelect = {\n  focusClear: function () {\n    let self = this, _column;\n    for (let c in self.focusedColumn) {\n      _column = self.focusedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .removeAttr('data-ax6grid-column-focused');\n      }\n    }\n    self.focusedColumn = {};\n  },\n  clear: function () {\n    let self = this, _column;\n    for (let c in self.selectedColumn) {\n      _column = self.selectedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .removeAttr('data-ax6grid-column-selected');\n      }\n    }\n    self.selectedColumn = {};\n  },\n  init: function (column) {\n    let self = this;\n    if (this.isInlineEditing) {\n      for (let editKey in this.inlineEditing) {\n        if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n          return this;\n        }\n      }\n    }\n\n    // focus\n    columnSelect.focusClear.call(self);\n    self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n      panelName: column.panelName,\n      dindex: column.dindex,\n      doindex: column.doindex,\n      rowIndex: column.rowIndex,\n      colIndex: column.colIndex,\n      colspan: column.colspan\n    };\n\n    // select\n    columnSelect.clear.call(self);\n    self.xvar.selectedRange = {\n      start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n      end: null\n    };\n    self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n      if (data) {\n        return false;\n      } else {\n        return {\n          panelName: column.panelName,\n          dindex: column.dindex,\n          doindex: column.doindex,\n          rowIndex: column.rowIndex,\n          colIndex: column.colIndex,\n          colspan: column.colspan\n        }\n      }\n    })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n    this.$.panel[column.panelName]\n      .find('[data-ax6grid-tr-data-index=\"' + column.dindex + '\"]')\n      .find('[data-ax6grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + column.colIndex + '\"]')\n      .attr('data-ax6grid-column-focused', \"true\")\n      .attr('data-ax6grid-column-selected', \"true\");\n\n    if (this.isInlineEditing) {\n      inlineEdit.deActive.call(this, \"RETURN\");\n    }\n  },\n  update: function (column) {\n    const self = this;\n    let dindex, doindex, colIndex, rowIndex, trl;\n\n    self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n    columnSelect.clear.call(self);\n\n    let range = {\n      r: {\n        s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n        e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n      },\n      c: {\n        s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n        e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n      }\n    };\n\n    dindex = range.r.s;\n    for (; dindex <= range.r.e; dindex++) {\n\n\n      trl = this.bodyRowTable.rows.length;\n      rowIndex = 0;\n      for (; rowIndex < trl; rowIndex++) {\n        colIndex = range.c.s;\n        for (; colIndex <= range.c.e; colIndex++) {\n          var _panels = [],\n            panelName = \"\";\n\n          if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n          if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n          _panels.push(\"body\");\n          if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n          panelName = _panels.join(\"-\");\n\n          self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n            panelName: panelName,\n            dindex: dindex,\n            rowIndex: rowIndex,\n            colIndex: colIndex,\n            colspan: column.colspan\n          };\n\n          _panels = null;\n          panelName = null;\n        }\n      }\n    }\n    dindex = null;\n    doindex = null;\n    colIndex = null;\n    rowIndex = null;\n\n    for (var c in self.selectedColumn) {\n      var _column = self.selectedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .attr('data-ax6grid-column-selected', 'true');\n      }\n    }\n\n  }\n};\n\nconst columnSelector = {\n  \"on\": function (cell) {\n    let self = this;\n\n    if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n      return;\n    }\n\n    columnSelect.init.call(self, cell);\n\n    this.$[\"container\"][\"body\"]\n      .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax6grid-column-attr=\"default\"]', function (e) {\n        if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n          columnSelect.update.call(self, {\n            panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n            dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n            doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n            rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n            colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n            colspan: Number(this.getAttribute(\"colspan\"))\n          });\n          U.stopEvent(e);\n        }\n      })\n      .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n        columnSelector.off.call(self);\n      })\n      .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n        columnSelector.off.call(self);\n      });\n\n    jQuery(document.body)\n      .attr('unselectable', 'on')\n      .css('user-select', 'none')\n      .on('selectstart', false);\n  },\n  \"off\": function () {\n\n    this.$[\"container\"][\"body\"]\n      .off(\"mousemove.ax5grid-\" + this.instanceId)\n      .off(\"mouseup.ax5grid-\" + this.instanceId)\n      .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n    jQuery(document.body)\n      .removeAttr('unselectable')\n      .css('user-select', 'auto')\n      .off('selectstart');\n  }\n};\n\nconst resetFrozenColumn = function () {\n  let cfg = this.config,\n    dividedBodyRowObj = UTIL.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n  this.asideBodyRowData = (function (dataTable) {\n    let data = {rows: []};\n    for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n      data.rows[i] = {cols: []};\n      if (i === 0) {\n        let col = {\n          label: \"\",\n          colspan: 1,\n          rowspan: dataTable.rows.length,\n          colIndex: null\n        }, _col = {};\n\n        if (cfg.showLineNumber) {\n          _col = jQuery.extend({}, col, {\n            width: cfg.lineNumberColumnWidth,\n            _width: cfg.lineNumberColumnWidth,\n            columnAttr: \"lineNumber\",\n            label: \"&nbsp;\", key: \"__d-index__\"\n          });\n          data.rows[i].cols.push(_col);\n        }\n        if (cfg.showRowSelector) {\n          _col = jQuery.extend({}, col, {\n            width: cfg.rowSelectorColumnWidth,\n            _width: cfg.rowSelectorColumnWidth,\n            columnAttr: \"rowSelector\",\n            label: \"\", key: \"__d-checkbox__\"\n          });\n          data.rows[i].cols.push(_col);\n        }\n      }\n    }\n\n    return data;\n  }).call(this, this.bodyRowTable);\n\n  //console.log(dividedBodyRowObj);\n\n  this.leftBodyRowData = dividedBodyRowObj.leftData;\n  this.bodyRowData = dividedBodyRowObj.rightData;\n\n  if (cfg.body.grouping) {\n    let dividedBodyGroupingObj = UTIL.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n    this.asideBodyGroupingData = (function (dataTable) {\n      let data = {rows: []};\n      for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n        data.rows[i] = {cols: []};\n        if (i === 0) {\n          let col = {\n            label: \"\",\n            colspan: 1,\n            rowspan: dataTable.rows.length,\n            colIndex: null\n          }, _col = {};\n\n          if (cfg.showLineNumber) {\n            _col = jQuery.extend({}, col, {\n              width: cfg.lineNumberColumnWidth,\n              _width: cfg.lineNumberColumnWidth,\n              columnAttr: \"lineNumber\",\n              label: \"&nbsp;\", key: \"__d-index__\"\n            });\n            data.rows[i].cols.push(_col);\n          }\n          if (cfg.showRowSelector) {\n            _col = jQuery.extend({}, col, {\n              width: cfg.rowSelectorColumnWidth,\n              _width: cfg.rowSelectorColumnWidth,\n              columnAttr: \"rowSelector\",\n              label: \"\", key: \"__d-checkbox__\"\n            });\n            data.rows[i].cols.push(_col);\n          }\n        }\n      }\n\n      return data;\n    }).call(this, this.bodyGroupingTable);\n    this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n    this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n    this.bodyGroupingMap = UTIL.makeBodyRowMap.call(this, this.bodyGroupingTable);\n  }\n\n  this.leftFootSumData = {};\n  this.footSumData = {};\n  if (this.config.footSum) {\n    let dividedFootSumObj = UTIL.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n    this.leftFootSumData = dividedFootSumObj.leftData;\n    this.footSumData = dividedFootSumObj.rightData;\n  }\n};\n\nconst getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n\n  let _key = _col.key, tagsToReplace = {\n    '<': '&lt;',\n    '>': '&gt;'\n  };\n\n  if (_key === \"__d-index__\") {\n    return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n  }\n  else if (_key === \"__d-checkbox__\") {\n    return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n  }\n  else {\n    if (_col.editor && (function (_editor) {\n        if (_editor.type in INLINE_EDITOR) {\n          return (INLINE_EDITOR[_editor.type].editMode == \"inline\");\n        }\n        return false;\n      })(_col.editor)) { // editor가 inline타입이라면\n\n      _value = _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n\n      if (U.isFunction(_col.editor.disabled)) {\n        if (_col.editor.disabled.call({\n            list: _list,\n            dindex: _index,\n            item: _list[_index],\n            key: _key,\n            value: _value\n          })) {\n          return _value;\n        }\n      }\n\n      // print editor\n      return _returnPlainText ? _value : INLINE_EDITOR[_col.editor.type].getHtml(this, _col.editor, _value);\n    }\n\n    const valueProcessor = {\n      \"formatter\": function () {\n        let that = {\n          key: _key,\n          value: _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key),\n          dindex: _index,\n          item: _item,\n          list: _list\n        };\n\n        let caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n        return caller ? caller.call(that) : that.value;\n      },\n      \"default\": function () {\n        let returnValue = \"\";\n\n        if (typeof _value !== \"undefined\") {\n          returnValue = _value;\n        } else {\n          if (/[\\.\\[\\]]/.test(_key)) {\n            _value = DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n          } else {\n            _value = _item[_key];\n          }\n\n          if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n        }\n\n        // 키값이 Boolean일때 오류 발생하여 수정.\n        return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n          return tagsToReplace[tag] || tag;\n        });\n      },\n      \"treeControl\": function (__value) {\n        let cfg = this.config,\n          keys = this.config.tree.columnKeys,\n          indentNodeHtml = '';\n\n        if (_item[keys.children].length) {\n          indentNodeHtml += '<a ' +\n            'data-ax6grid-data-index=\"' + _index + '\" ' +\n            'data-ax6grid-column-attr=\"tree-control\" ' +\n            'data-ax6grid-tnode-arrow=\"\" ' +\n            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n            '>';\n          indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n          indentNodeHtml += '</a>';\n        } else {\n          indentNodeHtml += '<span ' +\n            'data-ax6grid-tnode-arrow=\"\" ' +\n            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n            '>&nbsp;</span>';\n        }\n\n        indentNodeHtml += '<span ' +\n          'data-ax6grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n          'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n          '>';\n        indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n        indentNodeHtml += '</span>';\n\n        return indentNodeHtml + __value;\n      }\n    };\n\n    let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n    if (this.config.tree.use && _col.treeControl) {\n      returnValue = valueProcessor.treeControl.call(this, returnValue);\n    }\n\n    return returnValue;\n  }\n\n};\n\nconst getGroupingValue = function (_item, _index, _col) {\n  let value, that, caller, _key = _col.key, _label = _col.label;\n\n  if (typeof _key === \"undefined\") {\n    that = {\n      key: _key,\n      list: _item.__groupingList,\n      groupBy: _item.__groupingBy\n    };\n    if (U.isFunction(_label)) {\n      value = _label.call(that);\n    } else {\n      value = _label;\n    }\n    _item[_col.colIndex] = value;\n    return value;\n  }\n  else if (_key === \"__d-index__\") {\n    return '';\n  }\n  else if (_key === \"__d-checkbox__\") {\n    return '';\n  }\n  else {\n    if (_col.collector) {\n      that = {\n        key: _key,\n        list: _item.__groupingList\n      };\n      _item[_col.colIndex] = value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n      if (_col.formatter) {\n        that.value = value;\n        caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n        return caller ? caller.call(that) : value;\n      } else {\n        return value;\n      }\n    } else {\n      return \"&nbsp;\";\n    }\n  }\n};\n\nconst getSumFieldValue = function (_list, _col) {\n  let _key = _col.key, _label = _col.label;\n  //, _collector, _formatter\n  if (typeof _key === \"undefined\") {\n    return _label;\n  }\n  else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n    return '&nbsp;';\n  }\n  else {\n    if (_col.collector) {\n      let that = {\n        key: _key,\n        list: _list\n      };\n      let value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n      that.value = value;\n\n      if (_col.formatter) {\n        return (U.isFunction(_col.formatter) ? _col.formatter : this.config.formatter[_col.formatter] || FORMATTER[_col.formatter]).call(that);\n      } else {\n        return value;\n      }\n    } else {\n      return \"&nbsp;\";\n    }\n  }\n};\n\nconst inlineEdit = {\n  active(_focusedColumn, _e, _initValue) {\n    let self = this,\n      dindex, doindex, colIndex, rowIndex, panelName, colspan,\n      col, editor;\n\n    for (var key in _focusedColumn) {\n      panelName = _focusedColumn[key].panelName;\n      dindex = _focusedColumn[key].dindex;\n      doindex = _focusedColumn[key].doindex;\n      colIndex = _focusedColumn[key].colIndex;\n      rowIndex = _focusedColumn[key].rowIndex;\n      colspan = _focusedColumn[key].colspan;\n\n      // 인라인 에디팅을 멈춰야 하는 경우 조건\n      col = this.colGroup[colIndex];\n      if (!(editor = col.editor)) return this;\n\n      // editor disabled 체크\n      if (U.isFunction(editor.disabled)) {\n        if (editor.disabled.call({\n            list: this.list,\n            dindex: dindex,\n            item: this.list[dindex],\n            key: col.key,\n            value: _initValue\n          })) {\n          return this;\n        }\n      }\n\n      // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n      if (!(function (_editor, _type) {\n          if (_editor.type in INLINE_EDITOR) {\n            return (INLINE_EDITOR[_editor.type].editMode == \"popup\");\n          }\n        })(editor)) {\n        // 체크 박스 타입이면 값 변경 시도\n        if (editor.type == \"checkbox\") {\n          let checked, newValue;\n          if (editor.config && editor.config.trueValue) {\n            if (checked = !(_initValue == editor.config.trueValue)) {\n              newValue = editor.config.trueValue;\n            } else {\n              newValue = editor.config.falseValue;\n            }\n          } else {\n            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n          }\n\n          DATA.setValue.call(self, dindex, doindex, col.key, newValue);\n          updateRowState.call(self, [\"cellChecked\"], dindex, doindex, {\n            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n            editorConfig: col.editor.config, checked: checked\n          });\n        }\n        return this;\n      }\n\n      if (this.list[dindex].__isGrouping) {\n        return false;\n      }\n      if (key in this.inlineEditing) {\n        return false;\n      }\n\n      this.inlineEditing[key] = {\n        editor: editor,\n        panelName: panelName,\n        columnKey: key,\n        column: _focusedColumn[key],\n        useReturnToSave: INLINE_EDITOR[editor.type].useReturnToSave\n      };\n      this.isInlineEditing = true;\n    }\n    if (this.isInlineEditing) {\n\n      let originalValue = DATA.getValue.call(self, dindex, doindex, col.key),\n        initValue = (function (__value, __editor) {\n          if (U.isNothing(__value)) {\n            __value = U.isNothing(originalValue) ? \"\" : originalValue;\n          }\n\n          if (__editor.type == \"money\") {\n            return U.number(__value, {\"money\": true});\n          }\n          else {\n            return __value;\n          }\n        }).call(this, _initValue, editor);\n\n      this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n        .find('[data-ax6grid-tr-data-index=\"' + dindex + '\"]')\n        .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n        .find('[data-ax6grid-cellholder]');\n\n      this.inlineEditing[key].$inlineEditor = INLINE_EDITOR[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n      return true;\n    }\n  },\n  deActive(_msg, _key, _value) {\n    // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n    if (!this.inlineEditing[_key]) return this;\n\n    let panelName = this.inlineEditing[_key].panelName,\n      dindex = this.inlineEditing[_key].column.dindex,\n      doindex = this.inlineEditing[_key].column.doindex,\n      rowIndex = this.inlineEditing[_key].column.rowIndex,\n      colIndex = this.inlineEditing[_key].column.colIndex,\n      column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n      editorValue = (function ($inlineEditor) {\n        if (typeof _value === \"undefined\") {\n          if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n            return $inlineEditor.val();\n          } else {\n            _msg = \"CANCEL\";\n            return false;\n          }\n        } else {\n          return _value;\n        }\n      })(this.inlineEditing[_key].$inlineEditor),\n      newValue = (function (__value, __editor) {\n        if (__editor.type == \"money\") {\n          return U.number(__value);\n        }\n        else {\n          return __value;\n        }\n      }).call(this, editorValue, column.editor);\n\n    let action = {\n      \"CANCEL\"(_dindex, _column, _newValue) {\n        action[\"__clear\"].call(this);\n      },\n      \"RETURN\"(_dindex, _doindex, _column, _newValue) {\n        if (DATA.setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {\n          action[\"__clear\"].call(this);\n          repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);\n        } else {\n          action[\"__clear\"].call(this);\n        }\n      },\n      \"__clear\"() {\n        this.isInlineEditing = false;\n        let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n        if (bindedAx5ui == \"ax5picker\") {\n          this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n        } else if (bindedAx5ui == \"ax5select\") {\n          this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n        }\n\n        this.inlineEditing[_key].$inlineEditor.remove();\n        this.inlineEditing[_key].$inlineEditor = null;\n        this.inlineEditing[_key].$inlineEditorCell = null;\n        this.inlineEditing[_key] = undefined;\n        delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n      }\n    };\n\n    if (_msg in action) {\n      action[_msg || \"RETURN\"].call(this, dindex, doindex, column, newValue);\n    } else {\n      action[\"__clear\"].call(this);\n    }\n  },\n  keydown(key, columnKey, _options) {\n    let processor = {\n      \"ESC\"() {\n        for (var columnKey in this.inlineEditing) {\n          inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n        }\n      },\n      \"RETURN\"() {\n        if (this.isInlineEditing) {\n          if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n          } else {\n            return false;\n          }\n        } else {\n\n          for (var k in this.focusedColumn) {\n            let _column = this.focusedColumn[k],\n              column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n              dindex = _column.dindex,\n              doindex = _column.doindex,\n              value = \"\",\n              col = this.colGroup[_column.colIndex];\n\n            if (column) {\n              if (!this.list[dindex].__isGrouping) {\n                value = DATA.getValue.call(this, dindex, doindex, column.key);\n              }\n            }\n\n            if (col.editor && INLINE_EDITOR[col.editor.type].editMode === \"inline\") {\n              if (_options && _options.moveFocus) {\n\n              }\n              else {\n                if (column.editor && column.editor.type == \"checkbox\") {\n                  value = DATA.getValue.call(this, dindex, doindex, column.key);\n\n                  let checked, newValue;\n                  if (column.editor.config && column.editor.config.trueValue) {\n                    // console.log(value, column.editor.config.trueValue);\n\n                    if (value != column.editor.config.trueValue) {\n                      newValue = column.editor.config.trueValue;\n                      checked = true;\n                    } else {\n                      newValue = column.editor.config.falseValue;\n                      checked = false;\n                    }\n                  } else {\n                    newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                  }\n\n                  DATA.setValue.call(this, dindex, doindex, column.key, newValue);\n                  updateRowState.call(this, [\"cellChecked\"], dindex, doindex, {\n                    key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                    editorConfig: column.editor.config, checked: checked\n                  });\n                }\n              }\n            } else {\n              inlineEdit.active.call(this, this.focusedColumn, null, value);\n            }\n          }\n        }\n        return true;\n      }\n    };\n\n    if (key in processor) {\n      processor[key].call(this, key, columnKey, _options);\n    }\n  }\n};\n\nconst repaint = function (_reset) {\n  // debugger;\n  let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n  /// repaint reset 타입이면 고정컬럼을 재조정\n  if (_reset) {\n    resetFrozenColumn.call(this);\n    // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n    this.xvar.paintStartRowIndex = undefined;\n    this.xvar.paintStartColumnIndex = undefined;\n  }\n\n  /// 출력시작 인덱스\n  let paintStartRowIndex, virtualPaintStartRowIndex;\n\n  if (this.config.virtualScrollY) {\n    virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n    if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n      paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n    }\n  }\n  else {\n    paintStartRowIndex = this.xvar.frozenRowIndex;\n  }\n\n  if (isNaN(paintStartRowIndex)) return this;\n\n  let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n  let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n  if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n    for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n      // bodyScrollLeft\n      this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n      this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n      if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n        paintStartColumnIndex = ci;\n      }\n      if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n        paintEndColumnIndex = ci;\n\n        if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n        if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n      }\n    }\n\n    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n    this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n  }\n\n  let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n    headerColGroup = this.headerColGroup,\n    asideBodyRowData = this.asideBodyRowData,\n    leftBodyRowData = this.leftBodyRowData,\n    bodyRowData = this.bodyRowData,\n    leftFootSumData = this.leftFootSumData,\n    footSumData = this.footSumData,\n    asideBodyGroupingData = this.asideBodyGroupingData,\n    leftBodyGroupingData = this.leftBodyGroupingData,\n    bodyGroupingData = this.bodyGroupingData,\n    bodyAlign = cfg.body.align,\n    paintRowCount, virtualPaintRowCount;\n\n  if (!this.config.virtualScrollY) {\n    virtualPaintRowCount = paintRowCount = list.length;\n  } else {\n    virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n    paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n  }\n\n  // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n  if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n    paintStartRowIndex = this.xvar.paintStartRowIndex;\n  }\n\n  if (\n    this.xvar.dataRowCount === list.length\n    && this.xvar.paintStartRowIndex === paintStartRowIndex\n    && this.xvar.paintRowCount === paintRowCount\n    && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n    && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n  ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n  // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n  if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n    headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n    bodyRowData = UTIL.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n    if (cfg.body.grouping) {\n      bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n    }\n    if (cfg.footSum) {\n      footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n    }\n    if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n      this.needToPaintSum = true;\n    }\n  }\n\n  /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n  this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n  /// 사용된 패널들의 키 모음\n  this.$.livePanelKeys = [];\n\n  // 그리드 바디 영역 페인트 함수\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _groupRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey];\n\n    if (!isFirstPaint && !_scrollConfig) {\n      this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n      return false;\n    }\n\n    let SS = [],\n      cgi, cgl, di, dl, tri, trl, ci, cl, col,\n      cellHeight,\n      colAlign,\n      isScrolled = (function () {\n        // 스크롤값이 변경되거나 처음 호출되었습니까?\n        if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n          _scrollConfig = {\n            paintStartRowIndex: 0,\n            paintRowCount: _list.length\n          };\n          return false;\n        } else {\n          return true;\n        }\n      })(),\n      stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight) + 'px';\n\n    if (isScrolled) {\n      SS.push('<div style=\"background:repeating-linear-gradient(to top, ' + stripeString + ');' +\n        'font-size:0;' +\n        'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n    }\n\n    SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n    SS.push('<colgroup>');\n    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n      SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n    }\n    SS.push('<col  />');\n    SS.push('</colgroup>');\n\n    di = _scrollConfig.paintStartRowIndex;\n\n    for (dl = (function () {\n      let len;\n      len = _list.length;\n      if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n        len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n      }\n      return len;\n    })(); di < dl; di++) {\n\n      if (_list[di]) {\n        let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n        if (_groupRow && \"__isGrouping\" in _list[di]) {\n          rowTable = _groupRow;\n          isGroupingRow = true;\n        } else {\n          rowTable = _bodyRow;\n        }\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n          SS.push('<tr class=\"tr-' + (di % 4) + '', (cfg.body.trStyleClass) ? (U.isFunction(cfg.body.trStyleClass)) ? ' ' + cfg.body.trStyleClass.call({\n              item: _list[di],\n              index: di\n            }, _list[di], di) : ' ' + cfg.body.trStyleClass : '', '\"',\n\n            (isGroupingRow) ? ' data-ax6grid-grouping-tr=\"true\"' : '',\n            ' data-ax6grid-tr-data-index=\"' + di + '\"',\n            ' data-ax6grid-tr-data-o-index=\"' + odi + '\"',\n            ' data-ax6grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n            ' data-ax6grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n            '>');\n          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n            col = rowTable.rows[tri].cols[ci];\n            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n            colAlign = col.align || bodyAlign;\n\n            SS.push('<td ',\n              'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-data-o-index=\"' + odi + '\" ',\n              'data-ax6grid-column-row=\"' + tri + '\" ',\n              'data-ax6grid-column-col=\"' + ci + '\" ',\n              'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n              'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n              'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n              (function (_focusedColumn, _selectedColumn) {\n                let attrs = \"\";\n                if (_focusedColumn) {\n                  attrs += 'data-ax6grid-column-focused=\"true\" ';\n                }\n                if (_selectedColumn) {\n                  attrs += 'data-ax6grid-column-selected=\"true\" ';\n                }\n                return attrs;\n              })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n              'colspan=\"' + col.colspan + '\" ',\n              'rowspan=\"' + col.rowspan + '\" ',\n              'class=\"' + (function (_col) {\n                let tdCSS_class = \"\";\n                if (_col.styleClass) {\n                  if (U.isFunction(_col.styleClass)) {\n                    tdCSS_class += _col.styleClass.call({\n                      column: _col,\n                      key: _col.key,\n                      item: _list[di],\n                      index: di\n                    }) + \" \";\n                  } else {\n                    tdCSS_class += _col.styleClass + \" \";\n                  }\n                }\n                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                return tdCSS_class;\n              }).call(this, col) + '\" ',\n              'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n            SS.push((function (_cellHeight) {\n              let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n              if (!col.multiLine) {\n                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n              }\n\n              return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n            })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n            SS.push('</td>');\n          }\n          SS.push('<td ',\n            'data-ax6grid-column-row=\"null\" ',\n            'data-ax6grid-column-col=\"null\" ',\n            'data-ax6grid-data-index=\"' + di + '\" ',\n            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n            'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n            '></td>');\n          SS.push('</tr>');\n        }\n      }\n    }\n    SS.push('</table>');\n\n    if (isScrolled && _list.length) {\n      SS.push('<div style=\"background:repeating-linear-gradient(to bottom, ' + stripeString + ');' +\n        'font-size:0;' +\n        'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n    }\n\n\n    _elTarget.empty();\n    SS = SS.join('');\n\n    _elTarget.get(0).innerHTML = SS;\n\n    this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n    return true;\n  };\n\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey];\n\n    if (!isFirstPaint && !_scrollConfig) {\n      this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n      return false;\n    }\n\n    let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n    SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n    SS.push('<colgroup>');\n    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n      SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n    }\n    SS.push('<col  />');\n    SS.push('</colgroup>');\n\n    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n      SS.push('<tr class=\"tr-sum\">');\n      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n        col = _bodyRow.rows[tri].cols[ci];\n        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n        colAlign = col.align || bodyAlign;\n\n        SS.push('<td ',\n          'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n          'data-ax6grid-column-row=\"' + tri + '\" ',\n          'data-ax6grid-column-col=\"' + ci + '\" ',\n          'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n          'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n          'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n          (function (_focusedColumn, _selectedColumn) {\n            var attrs = \"\";\n            if (_focusedColumn) {\n              attrs += 'data-ax6grid-column-focused=\"true\" ';\n            }\n            if (_selectedColumn) {\n              attrs += 'data-ax6grid-column-selected=\"true\" ';\n            }\n            return attrs;\n          })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n          'colspan=\"' + col.colspan + '\" ',\n          'rowspan=\"' + col.rowspan + '\" ',\n          'class=\"' + (function (_col) {\n            var tdCSS_class = \"\";\n            if (_col.styleClass) {\n              if (U.isFunction(_col.styleClass)) {\n                tdCSS_class += _col.styleClass.call({\n                  column: _col,\n                  key: _col.key,\n                  isFootSum: true\n                }) + \" \";\n              } else {\n                tdCSS_class += _col.styleClass + \" \";\n              }\n            }\n            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n            return tdCSS_class;\n          }).call(this, col) + '\" ',\n          'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n        SS.push((function (_cellHeight) {\n          let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n          if (!col.multiLine) {\n            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n          }\n\n          return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n            ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n        })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n        SS.push('</td>');\n      }\n      SS.push('<td ',\n        'data-ax6grid-column-row=\"null\" ',\n        'data-ax6grid-column-col=\"null\" ',\n        'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n        '></td>');\n      SS.push('</tr>');\n    }\n\n    SS.push('</table>');\n\n    _elTarget.empty();\n    SS = SS.join('');\n\n    _elTarget.get(0).innerHTML = SS;\n\n    this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n    return true;\n  };\n\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n    let tblRowMaps = [];\n    let _elTarget = this.$.panel[_elTargetKey];\n    let token = {}, hasMergeTd;\n\n    // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n    let tableTrs = _elTarget.find(\"tr\");\n    for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n      let tableTrTds, trMaps;\n      tableTrTds = tableTrs[ri].childNodes;\n      trMaps = [];\n\n      for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n        let tdObj = {\n          \"$\": jQuery(tableTrTds[ci])\n        };\n\n        if (tdObj[\"$\"].attr(\"data-ax6grid-column-col\") != \"null\") {\n          tdObj.dindex = tdObj[\"$\"].attr(\"data-ax6grid-data-index\");\n          tdObj.tri = tdObj[\"$\"].attr(\"data-ax6grid-column-row\");\n          tdObj.ci = tdObj[\"$\"].attr(\"data-ax6grid-column-col\");\n          tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-rowIndex\");\n          tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-colIndex\");\n          tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n          tdObj.text = tdObj[\"$\"].text();\n          trMaps.push(tdObj);\n        }\n\n        tdObj = null;\n      }\n      tblRowMaps.push(trMaps);\n    }\n\n    // 두줄이상 일 때 의미가 있으니.\n    if (tblRowMaps.length > 1) {\n      hasMergeTd = false;\n      for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n        let prevTokenColIndexs = [];\n\n        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n          // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n\n          if (!_colGroup[ci].editor && (() => {\n              if (U.isArray(cfg.body.mergeCells)) {\n                return U.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n              } else {\n                return true;\n              }\n            })()) {\n\n            // 앞줄과 값이 같다면.\n            if (token[ci] && (() => {\n                if (prevTokenColIndexs.length > 0) {\n                  let hasFalse = true;\n                  prevTokenColIndexs.forEach(function (ti) {\n                    if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                      hasFalse = false;\n                    }\n                  });\n                  return hasFalse;\n                } else {\n                  return true;\n                }\n              })() && token[ci].text == tblRowMaps[ri][ci].text) {\n              tblRowMaps[ri][ci].rowspan = 0;\n              tblRowMaps[token[ci].ri][ci].rowspan++;\n              hasMergeTd = true;\n            } else {\n              token[ci] = {\n                ri: ri,\n                ci: ci,\n                text: tblRowMaps[ri][ci].text\n              };\n            }\n\n            prevTokenColIndexs.push(ci);\n          }\n        }\n      }\n\n      // rowspan을 다 구했으면 적용합니다.\n      if (hasMergeTd) {\n        for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n          for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n            if (tblRowMaps[ri][ci].rowspan == 0) {\n              tblRowMaps[ri][ci][\"$\"].remove();\n            } else if (tblRowMaps[ri][ci].rowspan > 1) {\n              tblRowMaps[ri][ci][\"$\"]\n                .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                .addClass(\"merged\");\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let scrollConfig = {\n    paintStartRowIndex: paintStartRowIndex,\n    paintRowCount: paintRowCount,\n    paintStartColumnIndex: paintStartColumnIndex,\n    paintEndColumnIndex: paintEndColumnIndex,\n    nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n    nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n    bodyTrHeight: this.xvar.bodyTrHeight,\n    virtualScrollX: this.config.virtualScrollX,\n    virtualScrollY: this.config.virtualScrollY,\n  };\n  let frozenScrollConfig = jQuery.extend({}, scrollConfig, {\n    paintStartRowIndex: 0,\n    paintRowCount: this.xvar.frozenRowIndex\n  });\n\n  // aside\n  if (cfg.asidePanelWidth > 0) {\n    if (this.xvar.frozenRowIndex > 0) {\n      // 상단 행고정\n      repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n\n    repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n    if (cfg.footSum) {\n      // 바닥 요약 (footSum에 대한 aside 사용안함)\n      repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n    }\n  }\n\n  // left\n  if (this.xvar.frozenColumnIndex > 0) {\n    if (this.xvar.frozenRowIndex > 0) {\n      // 상단 행고정\n      repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n\n    repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n    }\n  }\n\n  // body\n  if (this.xvar.frozenRowIndex > 0) {\n    // 상단 행고정\n    repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n  }\n  repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n  // 바닥 요약\n  if (cfg.footSum && this.needToPaintSum) {\n    repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n  }\n  // right\n  if (cfg.rightSum) {\n    // todo : right 표현 정리\n  }\n\n  /// mergeCells\n  if (cfg.body.mergeCells && this.list.length) {\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n        // console.log(this.leftHeaderColGroup, leftBodyRowData);\n        mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n      }\n      mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n      mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n    }\n    mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n  }\n\n  this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n  this.xvar.paintStartRowIndex = paintStartRowIndex;\n  this.xvar.paintRowCount = paintRowCount;\n  this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n  this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n  this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n  this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n  this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n  this.xvar.dataRowCount = list.length;\n  this.needToPaintSum = false;\n\n  PAGE.statusUpdate.call(this);\n};\n\n/**\n * @module AX6UIGrid_body\n */\nexport default {\n  /**\n   *\n   */\n  init: function () {\n    let self = this;\n\n    this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax6grid-column-attr]', function (e) {\n      let panelName, attr,\n        row, col, dindex, doindex, rowIndex, colIndex,\n        targetDBLClick = {\n          \"default\": function (_column) {\n            if (self.isInlineEditing) {\n              for (let columnKey in self.inlineEditing) {\n                if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                  return this;\n                }\n              }\n            }\n\n            let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n            if (column) {\n              if (!self.list[dindex].__isGrouping) {\n                value = DATA.getValue.call(self, dindex, doindex, column.key);\n              }\n            }\n\n            let editor = self.colGroup[_column.colIndex].editor;\n            if (U.isObject(editor)) {\n              inlineEdit.active.call(self, self.focusedColumn, e, value);\n            } else {\n              // 더블클릭 실행\n              if (self.config.body.onDBLClick) {\n                let that = {\n                  self: self,\n                  page: self.page,\n                  list: self.list,\n                  item: self.list[_column.dindex],\n                  dindex: _column.dindex,\n                  doindex: _column.doindex,\n                  rowIndex: _column.rowIndex,\n                  colIndex: _column.colIndex,\n                  column: column,\n                  value: self.list[_column.dindex][column.key]\n                };\n                self.config.body.onDBLClick.call(that);\n              }\n            }\n          },\n          \"rowSelector\": function (_column) {\n\n          },\n          \"lineNumber\": function (_column) {\n\n          }\n        };\n\n      panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n      attr = this.getAttribute(\"data-ax6grid-column-attr\");\n      row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n      col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n      rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n      colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n      dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n      doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n      if (attr in targetDBLClick) {\n        targetDBLClick[attr]({\n          panelName: panelName,\n          attr: attr,\n          row: row,\n          col: col,\n          dindex: dindex,\n          doindex: doindex,\n          rowIndex: rowIndex,\n          colIndex: colIndex\n        });\n\n        U.stopEvent(e);\n      }\n    });\n\n    this.$[\"container\"][\"body\"].on(\"click\", '[data-ax6grid-column-attr]', function (e) {\n      let panelName, attr,\n        row, col, dindex, doindex, rowIndex, colIndex, disableSelection,\n        targetClick = {\n          \"default\": function (_column) {\n            let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n              that = {\n                self: self,\n                page: self.page,\n                list: self.list,\n                item: self.list[_column.doindex],\n                dindex: _column.dindex,\n                doindex: _column.doindex,\n                rowIndex: _column.rowIndex,\n                colIndex: _column.colIndex,\n                column: column,\n                value: self.list[_column.dindex][column.key]\n              };\n\n            if (column.editor && column.editor.type == \"checkbox\") { // todo : INLINE_EDITOR에서 처리 할수 있도록 구문 변경 필요.\n              let value = DATA.getValue.call(self, _column.dindex, _column.doindex, column.key),\n                checked, newValue;\n\n              if (column.editor.config && column.editor.config.trueValue) {\n                if (checked = !(value == column.editor.config.trueValue)) {\n                  newValue = column.editor.config.trueValue;\n                } else {\n                  newValue = column.editor.config.falseValue;\n                }\n              } else {\n                newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n              }\n\n              DATA.setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);\n\n              updateRowState.call(self, [\"cellChecked\"], _column.dindex, _column.doindex, {\n                key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                editorConfig: column.editor.config, checked: checked\n              });\n            } else {\n              if (self.config.body.onClick) {\n                self.config.body.onClick.call(that);\n              }\n            }\n          },\n          \"rowSelector\": function (_column) {\n            let item = self.list[_column.doindex];\n            if (item[self.config.columnKeys.disableSelection]) {\n              return false;\n            }\n\n            if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {\n              updateRowState.call(self, [\"selectedClear\"]);\n              DATA.clearSelect.call(self);\n            }\n\n            DATA.select.call(self, _column.dindex, _column.doindex, undefined, {\n              internalCall: true\n            });\n            updateRowState.call(self, [\"selected\"], _column.dindex, _column.doindex);\n          },\n          \"lineNumber\": function (_column) {\n\n          },\n          \"tree-control\": function (_column, _el) {\n            //console.log(_column);\n            toggleCollapse.call(self, _column.dindex, _column.doindex);\n          }\n        };\n\n      panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n      attr = this.getAttribute(\"data-ax6grid-column-attr\");\n      row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n      col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n      rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n      colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n      dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n      doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n      if (attr in targetClick) {\n        targetClick[attr]({\n          panelName: panelName,\n          attr: attr,\n          row: row,\n          col: col,\n          dindex: dindex,\n          doindex: doindex,\n          rowIndex: rowIndex,\n          colIndex: colIndex\n        }, this);\n      }\n    });\n\n    this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n      let target, dindex, doindex, rowIndex, colIndex, item, column, param = {};\n\n      target = U.findParentNode(e.target, function (t) {\n        if (t.getAttribute(\"data-ax6grid-column-attr\")) {\n          return true;\n        }\n      });\n\n      if (target) {\n        // item 찾기\n        rowIndex = Number(target.getAttribute(\"data-ax6grid-column-rowIndex\"));\n        colIndex = Number(target.getAttribute(\"data-ax6grid-column-colIndex\"));\n        dindex = Number(target.getAttribute(\"data-ax6grid-data-index\"));\n        doindex = Number(target.getAttribute(\"data-ax6grid-data-o-index\"));\n        column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n        item = self.list[dindex];\n      }\n\n      if (self.config.body.onContextMenu) {\n        param = {\n          element: target,\n          dindex: dindex,\n          doindex: doindex,\n          rowIndex: rowIndex,\n          colIndex: colIndex,\n          item: item,\n          column: column,\n          gridSelf: self\n        };\n        self.config.body.onContextMenu.call({\n          self: self,\n          item: item,\n          column: column,\n          dindex: dindex,\n          doindex: doindex,\n          rowIndex: rowIndex,\n          colIndex: colIndex\n        }, e, param);\n      }\n\n      U.stopEvent(e.originalEvent);\n      target = null;\n      dindex = null;\n      doindex = null;\n      rowIndex = null;\n      colIndex = null;\n      item = null;\n      column = null;\n      param = null;\n    });\n\n    this.$[\"container\"][\"body\"]\n      .on(\"mousedown\", '[data-ax6grid-column-attr=\"default\"]', function (e) {\n        if (self.xvar.touchmoved) return false;\n        if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n          columnSelector.on.call(self, {\n            panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n            dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n            doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n            rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n            colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n            colspan: Number(this.getAttribute(\"colspan\"))\n          });\n        }\n      })\n      .on(\"dragstart\", function (e) {\n        U.stopEvent(e);\n        return false;\n      });\n\n    resetFrozenColumn.call(this);\n\n    // 그리드 바디에 출력할 여유 카운트\n    this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n    this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n\n    if (this.config.virtualScrollAccelerated) {\n      this.__throttledScroll = U.throttle(function (css, opts) {\n        if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n          repaint.call(this);\n        } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n          repaint.call(this);\n        }\n        if (opts.callback) {\n          opts.callback();\n        }\n      }, this.config.virtualScrollAcceleratedDelayTime);\n    } else {\n      this.__throttledScroll = false;\n    }\n  },\n  /**\n   *\n   * @param _reset\n   * @return {module:AX6UIGrid_body}\n   */\n  repaint: repaint,\n  /**\n   *\n   * @param _panelName\n   * @param _dindex\n   * @param _doindex\n   * @param _rowIndex\n   * @param _colIndex\n   * @param _newValue\n   */\n  repaintCell: function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {\n    let self = this,\n      cfg = this.config,\n      list = this.list;\n\n    let updateCell = this.$[\"panel\"][_panelName]\n      .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n      .find('[data-ax6grid-column-rowindex=\"' + _rowIndex + '\"][data-ax6grid-column-colindex=\"' + _colIndex + '\"]')\n      .find('[data-ax6grid-cellholder]'),\n      colGroup = this.colGroup,\n      col = colGroup[_colIndex];\n\n    updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n    if (col.editor && col.editor.updateWith) {\n      col.editor.updateWith.forEach(function (updateColumnKey) {\n        colGroup.forEach(function (col) {\n          if (col.key == updateColumnKey) {\n            let rowIndex = col.rowIndex, colIndex = col.colIndex,\n              panelName = UTIL.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n              updateWithCell = self.$[\"panel\"][panelName]\n                .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n                .find('[data-ax6grid-cellholder]');\n\n            updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n          }\n        });\n      });\n    }\n\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n      headerColGroup = this.headerColGroup,\n      leftFootSumData = this.leftFootSumData,\n      footSumData = this.footSumData,\n      leftBodyGroupingData = this.leftBodyGroupingData,\n      bodyGroupingData = this.bodyGroupingData,\n      bodyAlign = cfg.body.align,\n      paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n      scrollConfig = {\n        paintStartRowIndex: paintStartRowIndex,\n        paintRowCount: paintRowCount,\n        bodyTrHeight: this.xvar.bodyTrHeight\n      };\n\n    if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n      headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n      if (cfg.body.grouping) {\n        bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n      }\n      if (cfg.footSum) {\n        footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n      }\n    }\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n      let _elTarget = this.$.panel[_elTargetKey],\n        SS = [],\n        cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n      SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n      SS.push('<colgroup>');\n      for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n        SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n      }\n      SS.push('<col  />');\n      SS.push('</colgroup>');\n\n      for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n        SS.push('<tr class=\"tr-sum\">');\n        for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n          col = _bodyRow.rows[tri].cols[ci];\n          cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n          colAlign = col.align || bodyAlign;\n\n          SS.push('<td ',\n            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n            'data-ax6grid-column-row=\"' + tri + '\" ',\n            'data-ax6grid-column-col=\"' + ci + '\" ',\n            'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n            (function (_focusedColumn, _selectedColumn) {\n              var attrs = \"\";\n              if (_focusedColumn) {\n                attrs += 'data-ax6grid-column-focused=\"true\" ';\n              }\n              if (_selectedColumn) {\n                attrs += 'data-ax6grid-column-selected=\"true\" ';\n              }\n              return attrs;\n            })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            'class=\"' + (function (_col) {\n              let tdCSS_class = \"\";\n              if (_col.styleClass) {\n                if (U.isFunction(_col.styleClass)) {\n                  tdCSS_class += _col.styleClass.call({\n                    column: _col,\n                    key: _col.key,\n                    isFootSum: true\n                  }) + \" \";\n                } else {\n                  tdCSS_class += _col.styleClass + \" \";\n                }\n              }\n              if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n              if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n              return tdCSS_class;\n            }).call(this, col) + '\" ',\n            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n          SS.push((function (_cellHeight) {\n            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n            if (!col.multiLine) {\n              _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n            }\n\n            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n              ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n              '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n          })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n          SS.push('</td>');\n        }\n        SS.push('<td ',\n          'data-ax6grid-column-row=\"null\" ',\n          'data-ax6grid-column-col=\"null\" ',\n          'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n          'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n          '></td>');\n        SS.push('</tr>');\n      }\n\n      SS.push('</table>');\n\n      _elTarget.empty().get(0).innerHTML = SS.join('');\n      return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n      let _elTarget = this.$.panel[_elTargetKey],\n        SS = [],\n        di, dl, tri, trl, ci, cl,\n        col, cellHeight, colAlign;\n\n      for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n        let len;\n        len = _list.length;\n        if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n          len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n        }\n        return len;\n      })(); di < dl; di++) {\n        if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n          let rowTable = _groupRow;\n          SS = [];\n          for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n            for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n              col = rowTable.rows[tri].cols[ci];\n              cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n              colAlign = col.align || bodyAlign;\n\n              SS.push('<td ',\n                'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                'data-ax6grid-data-index=\"' + di + '\" ',\n                'data-ax6grid-column-row=\"' + tri + '\" ',\n                'data-ax6grid-column-col=\"' + ci + '\" ',\n                'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                (function (_focusedColumn, _selectedColumn) {\n                  let attrs = \"\";\n                  if (_focusedColumn) {\n                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                  }\n                  if (_selectedColumn) {\n                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                  }\n                  return attrs;\n                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                'colspan=\"' + col.colspan + '\" ',\n                'rowspan=\"' + col.rowspan + '\" ',\n                'class=\"' + (function (_col) {\n                  let tdCSS_class = \"\";\n                  if (_col.styleClass) {\n                    if (U.isFunction(_col.styleClass)) {\n                      tdCSS_class += _col.styleClass.call({\n                        column: _col,\n                        key: _col.key,\n                        item: _list[di],\n                        index: di\n                      }) + \" \";\n                    } else {\n                      tdCSS_class += _col.styleClass + \" \";\n                    }\n                  }\n                  if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                  if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                  return tdCSS_class;\n                }).call(this, col) + '\" ',\n                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n              SS.push((function (_cellHeight) {\n                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                if (!col.multiLine) {\n                  _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                }\n\n                return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                  ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                  '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n              })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n              SS.push('</td>');\n            }\n            SS.push('<td ',\n              'data-ax6grid-column-row=\"null\" ',\n              'data-ax6grid-column-col=\"null\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n              'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n              '></td>');\n          }\n          _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        }\n      }\n    };\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n      // left\n      if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > 0) {\n          // 상단 행고정\n          replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n            paintStartRowIndex: 0,\n            paintRowCount: this.xvar.frozenRowIndex,\n            bodyTrHeight: this.xvar.bodyTrHeight\n          });\n        }\n        replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n      }\n\n      // body\n      if (this.xvar.frozenRowIndex > 0) {\n        // 상단 행고정\n        replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n          paintStartRowIndex: 0,\n          paintRowCount: this.xvar.frozenRowIndex,\n          bodyTrHeight: this.xvar.bodyTrHeight\n        });\n      }\n\n      replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n      }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n    }\n  },\n  /**\n   *\n   * @param _dindex\n   */\n  repaintRow: function (_dindex) {\n    let self = this,\n      cfg = this.config,\n      list = this.list;\n    /// ~~~~~~\n\n    let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n      asideBodyRowData = this.asideBodyRowData,\n      leftBodyRowData = this.leftBodyRowData,\n      bodyRowData = this.bodyRowData,\n      leftFootSumData = this.leftFootSumData,\n      footSumData = this.footSumData,\n      asideBodyGroupingData = this.asideBodyGroupingData,\n      leftBodyGroupingData = this.leftBodyGroupingData,\n      bodyGroupingData = this.bodyGroupingData,\n      bodyAlign = cfg.body.align,\n      paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n      scrollConfig = {\n        paintStartRowIndex: paintStartRowIndex,\n        paintRowCount: paintRowCount,\n        bodyTrHeight: this.xvar.bodyTrHeight\n      };\n\n    let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n      let _elTarget = this.$.panel[_elTargetKey],\n        SS = [],\n        cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n      SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n      SS.push('<colgroup>');\n      for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n        SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n      }\n      SS.push('<col  />');\n      SS.push('</colgroup>');\n\n      for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n        SS.push('<tr class=\"tr-sum\">');\n        for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n          col = _bodyRow.rows[tri].cols[ci];\n          cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n          colAlign = col.align || bodyAlign;\n\n          SS.push('<td ',\n            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n            'data-ax6grid-column-row=\"' + tri + '\" ',\n            'data-ax6grid-column-col=\"' + ci + '\" ',\n            'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n            (function (_focusedColumn, _selectedColumn) {\n              var attrs = \"\";\n              if (_focusedColumn) {\n                attrs += 'data-ax6grid-column-focused=\"true\" ';\n              }\n              if (_selectedColumn) {\n                attrs += 'data-ax6grid-column-selected=\"true\" ';\n              }\n              return attrs;\n            })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            'class=\"' + (function (_col) {\n              var tdCSS_class = \"\";\n              if (_col.styleClass) {\n                if (U.isFunction(_col.styleClass)) {\n                  tdCSS_class += _col.styleClass.call({\n                    column: _col,\n                    key: _col.key,\n                    isFootSum: true\n                  }) + \" \";\n                } else {\n                  tdCSS_class += _col.styleClass + \" \";\n                }\n              }\n              if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n              if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n              return tdCSS_class;\n            }).call(this, col) + '\" ',\n            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n          SS.push((function (_cellHeight) {\n            var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n            if (!col.multiLine) {\n              _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n            }\n\n            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n              ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n              '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n          })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n          SS.push('</td>');\n        }\n        SS.push('<td ',\n          'data-ax6grid-column-row=\"null\" ',\n          'data-ax6grid-column-col=\"null\" ',\n          'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n          'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n          '></td>');\n        SS.push('</tr>');\n      }\n\n      SS.push('</table>');\n\n      _elTarget.empty().get(0).innerHTML = SS.join('');\n      return true;\n    };\n    let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n      let _elTarget = this.$.panel[_elTargetKey],\n        SS = [],\n        di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n      if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n        _scrollConfig = {\n          paintStartRowIndex: 0,\n          paintRowCount: _list.length\n        };\n      }\n\n      for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n        let len;\n        len = _list.length;\n        if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n          len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n        }\n        return len;\n      })(); di < dl; di++) {\n        if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n          let rowTable = _groupRow;\n          SS = [];\n          for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n            for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n              col = rowTable.rows[tri].cols[ci];\n              cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n              colAlign = col.align || bodyAlign;\n\n              SS.push('<td ',\n                'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n                'data-ax6grid-data-index=\"' + di + '\" ',\n                'data-ax6grid-column-row=\"' + tri + '\" ',\n                'data-ax6grid-column-col=\"' + ci + '\" ',\n                'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n                'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                (function (_focusedColumn, _selectedColumn) {\n                  let attrs = \"\";\n                  if (_focusedColumn) {\n                    attrs += 'data-ax6grid-column-focused=\"true\" ';\n                  }\n                  if (_selectedColumn) {\n                    attrs += 'data-ax6grid-column-selected=\"true\" ';\n                  }\n                  return attrs;\n                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                'colspan=\"' + col.colspan + '\" ',\n                'rowspan=\"' + col.rowspan + '\" ',\n                'class=\"' + (function (_col) {\n                  let tdCSS_class = \"\";\n                  if (_col.styleClass) {\n                    if (U.isFunction(_col.styleClass)) {\n                      tdCSS_class += _col.styleClass.call({\n                        column: _col,\n                        key: _col.key,\n                        item: _list[di],\n                        index: di\n                      }) + \" \";\n                    } else {\n                      tdCSS_class += _col.styleClass + \" \";\n                    }\n                  }\n                  if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                  if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                  return tdCSS_class;\n                }).call(this, col) + '\" ',\n                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n              SS.push((function (_cellHeight) {\n                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                if (!col.multiLine) {\n                  _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                }\n\n                return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                  ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                  '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n              })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n              SS.push('</td>');\n            }\n            SS.push('<td ',\n              'data-ax6grid-column-row=\"null\" ',\n              'data-ax6grid-column-col=\"null\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n              'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n              '></td>');\n          }\n          _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        }\n      }\n    };\n    let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n      let _elTarget = this.$.panel[_elTargetKey],\n        SS = [],\n        tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow,\n        odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n\n      for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n          col = rowTable.rows[tri].cols[ci];\n          cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n          colAlign = col.align || bodyAlign;\n\n          SS.push('<td ',\n            'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n            'data-ax6grid-data-index=\"' + di + '\" ',\n            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n            'data-ax6grid-column-row=\"' + tri + '\" ',\n            'data-ax6grid-column-col=\"' + ci + '\" ',\n            'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n            'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n            'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n            (function (_focusedColumn, _selectedColumn) {\n              let attrs = \"\";\n              if (_focusedColumn) {\n                attrs += 'data-ax6grid-column-focused=\"true\" ';\n              }\n              if (_selectedColumn) {\n                attrs += 'data-ax6grid-column-selected=\"true\" ';\n              }\n              return attrs;\n            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            'class=\"' + (function (_col) {\n              let tdCSS_class = \"\";\n              if (_col.styleClass) {\n                if (U.isFunction(_col.styleClass)) {\n                  tdCSS_class += _col.styleClass.call({\n                    column: _col,\n                    key: _col.key,\n                    item: _list[di],\n                    index: di\n                  }) + \" \";\n                } else {\n                  tdCSS_class += _col.styleClass + \" \";\n                }\n              }\n              if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n              if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n              return tdCSS_class;\n            }).call(this, col) + '\" ',\n            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n          SS.push((function (_cellHeight) {\n            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n            if (!col.multiLine) {\n              _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n            }\n\n            return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n              ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n              '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n          })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n          SS.push('</td>');\n        }\n        SS.push('<td ',\n          'data-ax6grid-column-row=\"null\" ',\n          'data-ax6grid-column-col=\"null\" ',\n          'data-ax6grid-data-index=\"' + di + '\" ',\n          'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n          'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n          '></td>');\n      }\n\n      _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n    };\n\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n      } else {\n        replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n      }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > _dindex) {\n      // 상단 행고정\n      replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n    } else {\n      replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n    }\n\n    // body.grouping tr 다시 그리기..\n    if (cfg.body.grouping) {\n      // left\n      if (this.xvar.frozenColumnIndex > 0) {\n        if (this.xvar.frozenRowIndex > _dindex) {\n          // 상단 행고정\n          replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n        else {\n          replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n        }\n      }\n\n      // body\n      if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n      }\n      else {\n        replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n      }\n    }\n\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (cfg.footSum && this.needToPaintSum) {\n        // 바닥 요약\n        repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n      }\n    }\n\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n    }\n  },\n  /**\n   *\n   * @param _states\n   * @param _dindex\n   * @param _doindex\n   * @param _data\n   */\n  updateRowState: function (_states, _dindex, _doindex, _data) {\n    let self = this,\n      cfg = this.config,\n      processor = {\n        \"selected\": function (_dindex, _doindex) {\n          if (this.list[_doindex]) {\n            let i = this.$.livePanelKeys.length;\n            while (i--) {\n              this.$.panel[this.$.livePanelKeys[i]]\n                .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n                .attr(\"data-ax6grid-selected\", this.list[_doindex][cfg.columnKeys.selected]);\n            }\n          }\n        },\n        \"selectedClear\": function () {\n          let di = this.list.length;\n          let pi;\n\n          if (!this.proxyList) {\n            while (di--) {\n              if (this.list[di][cfg.columnKeys.selected]) {\n                pi = this.$.livePanelKeys.length;\n                while (pi--) {\n                  this.$.panel[this.$.livePanelKeys[pi]]\n                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                    .attr(\"data-ax6grid-selected\", false);\n                }\n              }\n              this.list[di][cfg.columnKeys.selected] = false;\n            }\n          } else {\n            while (di--) {\n              this.list[di][cfg.columnKeys.selected] = false;\n            }\n            di = this.proxyList.length;\n            while (di--) {\n              if (this.list[doi][cfg.columnKeys.selected]) {\n                pi = this.$.livePanelKeys.length;\n                while (pi--) {\n                  this.$.panel[this.$.livePanelKeys[pi]]\n                    .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                    .attr(\"data-ax6grid-selected\", false);\n                }\n              }\n\n              this.proxyList[di][cfg.columnKeys.selected] = false;\n              let doi = this.proxyList[di].__original_index__;\n            }\n          }\n        },\n        \"cellChecked\": function (_dindex, _doindex, _data) {\n          let key = _data.key,\n            rowIndex = _data.rowIndex,\n            colIndex = _data.colIndex;\n\n          let panelName = (function () {\n            let _panels = [];\n            if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n            if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n            _panels.push(\"body\");\n            if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n            return _panels.join(\"-\");\n          }).call(this);\n\n          this.$.panel[panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n            .find('[data-ax6grid-column-rowIndex=\"' + rowIndex + '\"][data-ax6grid-column-colIndex=\"' + colIndex + '\"]')\n            .find('[data-ax6grid-editor=\"checkbox\"]')\n            .attr(\"data-ax6grid-checked\", '' + _data.checked);\n        }\n      };\n\n    if (typeof _doindex === \"undefined\") _doindex = _dindex;\n\n    _states.forEach(function (_state) {\n      if (!processor[_state]) throw 'invaild state name';\n      processor[_state].call(self, _dindex, _doindex, _data);\n    });\n  },\n  /**\n   *\n   * @param _states\n   * @param _data\n   */\n  updateRowStateAll: function (_states, _data) {\n    let self = this,\n      cfg = this.config,\n      processor = {\n        \"selected\": function (_dindex) {\n          repaint.call(this, true);\n        }\n      };\n\n    _states.forEach(function (_state) {\n      if (!processor[_state]) throw 'invaild state name';\n      processor[_state].call(self, _data);\n    });\n  },\n  /**\n   *\n   * @param css\n   * @param opts\n   */\n  scrollTo: function (css, opts) {\n    let self = this;\n    if (typeof opts === \"undefined\") opts = {timeoutUnUse: false};\n    if (this.isInlineEditing) {\n      for (var key in this.inlineEditing) {\n        //if(this.inlineEditing[key].editor.type === \"select\") {}\n        // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n        inlineEdit.deActive.call(this, \"ESC\", key);\n      }\n    }\n\n    if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n      this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n      this.$.panel[\"left-body-scroll\"].css({top: css.top});\n    }\n    if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n      this.$.panel[\"top-body-scroll\"].css({left: css.left});\n    }\n\n    this.$.panel[\"body-scroll\"].css(css);\n\n    if (this.config.footSum && \"left\" in css) {\n      this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n    }\n\n    // 바디 리페인팅 this.__throttledScroll 은 body init 에서 초기화\n    if (this.__throttledScroll) {\n      this.__throttledScroll(css, opts);\n    } else {\n      if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n        repaint.call(this);\n      } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n        repaint.call(this);\n      }\n      if (opts.callback) {\n        opts.callback();\n      }\n    }\n  },\n  /**\n   *\n   */\n  blur: function () {\n    columnSelect.focusClear.call(this);\n    columnSelect.clear.call(this);\n    if (this.isInlineEditing) {\n      inlineEdit.deActive.call(this);\n    }\n  },\n  /**\n   *\n   * @param _position\n   * @return {*}\n   */\n  moveFocus: function (_position) {\n    let focus = {\n      \"UD\": function (_dy) {\n        let moveResult = true,\n          focusedColumn, originalColumn, while_i,\n          nPanelInfo;\n\n        for (let c in this.focusedColumn) {\n          focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n          break;\n        }\n\n        if (!focusedColumn) return false;\n\n        originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n\n        if (_dy > 0) {\n          // 아래로\n          if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n            focusedColumn.dindex = focusedColumn.dindex + _dy;\n            focusedColumn.doindex = focusedColumn.doindex + _dy;\n            focusedColumn.rowIndex = 0;\n            if (focusedColumn.dindex > this.list.length - 1) {\n              focusedColumn.dindex = focusedColumn.doindex = this.list.length - 1;\n              moveResult = false;\n            }\n          } else {\n            focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n          }\n        }\n        else {\n          // 위로\n          if (focusedColumn.rowIndex + _dy < 0) {\n            focusedColumn.dindex = focusedColumn.dindex + _dy;\n            focusedColumn.doindex = focusedColumn.doindex + _dy;\n            focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n            if (focusedColumn.dindex < 0) {\n              focusedColumn.dindex = focusedColumn.doindex = 0;\n              moveResult = false;\n            }\n          } else {\n            focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n          }\n        }\n\n        while_i = 0;\n        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n          if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n            focusedColumn.colIndex--;\n          } else {\n            focusedColumn.rowIndex--;\n          }\n\n          if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n            // find fail\n            moveResult = false;\n            break;\n          }\n          while_i++;\n        }\n\n        nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n        // if mergeCells\n        if (this.config.body.mergeCells && this.list.length) {\n          while (!this.$.panel[nPanelInfo.panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n            if (_dy > 0) {\n              focusedColumn.dindex++;\n            } else {\n              focusedColumn.dindex--;\n            }\n\n            if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n              break;\n            }\n          }\n          nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n        }\n\n        focusedColumn.panelName = nPanelInfo.panelName;\n\n        // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n\n        if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n          if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n            let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;\n            if (newTop < 0) newTop = 0;\n            scrollTo.call(this, {top: -newTop, timeoutUnUse: false});\n            SCROLLER.resize.call(this);\n          }\n          else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n            scrollTo.call(this, {top: (this.xvar.virtualPaintRowCount - 2 - focusedColumn.dindex) * this.xvar.bodyTrHeight, timeoutUnUse: false});\n            SCROLLER.resize.call(this);\n          }\n        }\n\n        this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n        this.$.panel[focusedColumn.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n          .attr('data-ax6grid-column-focused', \"true\");\n\n        return moveResult;\n      },\n      \"LR\": function (_dx) {\n        let moveResult = true,\n          focusedColumn, originalColumn,\n          while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n        for (var c in this.focusedColumn) {\n          focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n          break;\n        }\n        if (!focusedColumn) return false;\n\n        originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n\n        if (_dx < 0) {\n          focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n          if (focusedColumn.colIndex < 0) {\n            focusedColumn.colIndex = 0;\n            moveResult = false;\n          }\n        }\n        else {\n          focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n          if (focusedColumn.colIndex > this.colGroup.length - 1) {\n            focusedColumn.colIndex = this.colGroup.length - 1;\n            moveResult = false;\n          }\n        }\n\n        if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n          focusedColumn.rowIndex = 0;\n        }\n\n        if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n          if (_dx < 0) {\n            while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n              focusedColumn.colIndex--;\n              if (focusedColumn.colIndex <= 0) {\n                // find fail\n                moveResult = false;\n                break;\n              }\n            }\n          } else {\n            while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n              focusedColumn.colIndex++;\n              if (focusedColumn.colIndex >= this.colGroup.length) {\n                // find fail\n                moveResult = false;\n                break;\n              }\n            }\n          }\n        }\n        else {\n          if (_dx < 0) {\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n              focusedColumn.colIndex--;\n              if (focusedColumn.colIndex <= 0) {\n                // find fail\n                moveResult = false;\n                break;\n              }\n            }\n          } else {\n            while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n              focusedColumn.colIndex++;\n              if (focusedColumn.colIndex >= this.colGroup.length) {\n                // find fail\n                moveResult = false;\n                break;\n              }\n            }\n          }\n        }\n\n        nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n        // if mergeCells\n        if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n          while (!this.$.panel[nPanelInfo.panelName]\n            .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n            .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n            focusedColumn.dindex--;\n\n            if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n              break;\n            }\n          }\n          nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n        }\n\n        focusedColumn.panelName = nPanelInfo.panelName;\n\n        // 포커스 컬럼의 위치에 따라 스크롤 처리\n        let isScrollTo = (function () {\n          if (!this.config.virtualScrollX) return false;\n          let scrollLeft = 0;\n          if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n            if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n              scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n              scrollTo.call(this, {left: scrollLeft});\n              HEADER.scrollTo.call(this, {left: scrollLeft});\n              SCROLLER.resize.call(this);\n              return true;\n            }\n            else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n              if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                scrollTo.call(this, {left: -scrollLeft});\n                HEADER.scrollTo.call(this, {left: -scrollLeft});\n                SCROLLER.resize.call(this);\n              }\n              return true;\n            }\n          }\n          scrollLeft = null;\n          return false;\n        }).call(this);\n\n        containerPanelName = nPanelInfo.containerPanelName;\n        isScrollPanel = nPanelInfo.isScrollPanel;\n\n        this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n        var $column = this.$.panel[focusedColumn.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n          .attr('data-ax6grid-column-focused', \"true\");\n\n        if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n          // todo : 컬럼이동할 때에도 scrollTo 체크\n          var newLeft = (function () {\n            if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n              return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n            } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n              return $column.position().left;\n            } else {\n              return;\n            }\n          }).call(this);\n\n          if (typeof newLeft !== \"undefined\") {\n            HEADER.scrollTo.call(this, {left: -newLeft});\n            scrollTo.call(this, {left: -newLeft});\n            SCROLLER.resize.call(this);\n          }\n        }\n\n        return moveResult;\n      },\n      \"INDEX\": function (_dindex) {\n        let moveResult = true,\n          focusedColumn, originalColumn,\n          while_i;\n\n        for (let c in this.focusedColumn) {\n          focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n          break;\n        }\n        if (!focusedColumn) {\n          focusedColumn = {\n            rowIndex: 0,\n            colIndex: 0\n          }\n        }\n        originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n\n\n        if (_dindex == \"end\") {\n          _dindex = this.list.length - 1;\n        }\n\n        focusedColumn.dindex = _dindex;\n        focusedColumn.rowIndex = 0;\n\n        while_i = 0;\n        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n          if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n            focusedColumn.colIndex--;\n          } else {\n            focusedColumn.rowIndex--;\n          }\n\n          if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n            // find fail\n            break;\n          }\n          while_i++;\n        }\n\n        let nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n        focusedColumn.panelName = nPanelInfo.panelName;\n\n        // 포커스 컬럼의 위치에 따라 스크롤 처리.\n        (function () {\n          if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n            if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n              scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n              SCROLLER.resize.call(this);\n            }\n            else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n              scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n              SCROLLER.resize.call(this);\n            }\n          }\n        }).call(this);\n\n        this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n        this.$.panel[focusedColumn.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n          .attr('data-ax6grid-column-focused', \"true\");\n\n        return moveResult;\n      }\n    };\n\n    let processor = {\n      \"UP\": function () {\n        return focus[\"UD\"].call(this, -1);\n      },\n      \"DOWN\": function () {\n        return focus[\"UD\"].call(this, 1);\n      },\n      \"LEFT\": function () {\n        return focus[\"LR\"].call(this, -1);\n      },\n      \"RIGHT\": function () {\n        return focus[\"LR\"].call(this, 1);\n      },\n      \"HOME\": function () {\n        return focus[\"INDEX\"].call(this, 0);\n      },\n      \"END\": function () {\n        return focus[\"INDEX\"].call(this, \"end\");\n      },\n      \"position\": function (_position) {\n        return focus[\"INDEX\"].call(this, _position);\n      }\n    };\n\n    if (_position in processor) {\n      return processor[_position].call(this);\n    } else {\n      return processor[\"position\"].call(this, _position);\n    }\n  },\n  inlineEdit: inlineEdit,\n  /**\n   *\n   * @return {string}\n   */\n  getExcelString: function () {\n    let cfg = this.config,\n      list = this.list,\n      bodyRowData = this.bodyRowTable,\n      footSumData = this.footSumTable,\n      bodyGroupingData = this.bodyGroupingTable;\n\n    // body-scroll 의 포지션에 의존적이므로..\n    let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n      let SS = [],\n        di, dl,\n        tri, trl,\n        ci, cl,\n        col, val;\n\n      //SS.push('<table border=\"1\">');\n      for (di = 0, dl = _list.length; di < dl; di++) {\n        let isGroupingRow = false, rowTable;\n\n        if (_groupRow && \"__isGrouping\" in _list[di]) {\n          rowTable = _groupRow;\n          isGroupingRow = true;\n        } else {\n          rowTable = _bodyRow;\n        }\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n          SS.push('\\n<tr>');\n          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n            col = rowTable.rows[tri].cols[ci];\n\n            SS.push('<td ',\n              'colspan=\"' + col.colspan + '\" ',\n              'rowspan=\"' + col.rowspan + '\" ',\n              '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, val, \"text\"), '&nbsp;</td>');\n          }\n          SS.push('\\n</tr>');\n        }\n      }\n      //SS.push('</table>');\n      return SS.join('');\n    };\n    let getSum = function (_colGroup, _bodyRow, _list) {\n      let SS = [],\n        tri, trl,\n        ci, cl,\n        col;\n\n      //SS.push('<table border=\"1\">');\n      for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n        SS.push('\\n<tr>');\n        for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n          col = _bodyRow.rows[tri].cols[ci];\n          SS.push('<td ',\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            '>', getSumFieldValue.call(this, _list, col), '</td>');\n        }\n        SS.push('\\n</tr>');\n      }\n      //SS.push('</table>');\n\n      return SS.join('');\n    };\n\n    let po = [];\n    po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n    if (cfg.footSum) {\n      // 바닥 요약\n      po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n    }\n\n    // right\n    if (cfg.rightSum) {\n      // todo : right 표현 정리\n    }\n\n    return po.join('');\n  },\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   * @param _collapse\n   */\n  toggleCollapse: function (_dindex, _doindex, _collapse) {\n    if (DATA.toggleCollapse.call(this, _dindex, _doindex, _collapse)) {\n      this.proxyList = DATA.getProxyList.call(this, this.list);\n      repaint.call(this);\n    }\n  },\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   */\n  click: function (_dindex, _doindex) {\n    let that = {\n      self: this,\n      page: this.page,\n      list: this.list,\n      item: this.list[_dindex],\n      dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onClick) {\n      this.config.body.onClick.call(that);\n    }\n\n    that = null;\n    // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n  },\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   */\n  dblClick: function (_dindex, _doindex) {\n    let that = {\n      self: this,\n      page: this.page,\n      list: this.list,\n      item: this.list[_dindex],\n      dindex: _dindex\n    };\n\n    moveFocus.call(this, _dindex);\n\n    if (this.config.body.onDBLClick) {\n      this.config.body.onDBLClick.call(that);\n    }\n\n    that = null;\n  }\n};"]}