{"version":3,"sources":["AX6UIGrid_body.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_util","_AX6UIGrid_data","_AX6UIGrid_page","_AX6UIGrid_header","_AX6UIGrid_inline_editor","_AX6UIGrid_collector","_AX6UIGrid_formatter","_AX6UIGrid_scroller","columnSelect","focusClear","self","this","_column","c","focusedColumn","$","panel","panelName","find","dindex","rowIndex","colIndex","removeAttr","clear","selectedColumn","init","column","isInlineEditing","editKey","inlineEditing","call","doindex","colspan","start","update","trl","end","r","s","Math","min","xvar","selectedRange","e","max","range","inlineEdit","deActive","_panels","frozenRowIndex","push","frozenColumnIndex","join","attr","cell","on","instanceId","getAttribute","Number","columnSelector","off","_jqmin2","default","document","css","_dindex","_doindex","_data","processor","selected","list","i","livePanelKeys","length","cfg","columnKeys","selectedClear","updateRowState","proxyList","di","pi","doi","__original_index__","cellChecked","key","checked","_states","forEach","_state","updateRowStateAll","config","repaint","col","row","bodyRowMap","value","targetDBLClick","editor","colGroup","_AX6Util2","isObject","active","body","onDBLClick","that","page","item","targetClick","stopEvent","type","newValue","trueValue","falseValue","_AX6UIGrid_data2","setValue","getValue","rowSelector","disableSelection","multipleSelect","selectedDataIndexs","select","undefined","internalCall","lineNumber","tree-control","toggleCollapse","param","target","t","onContextMenu","gridSelf","element","touchmoved","paintRowCountMargin","virtualScrollYCountMargin","floor","opts","noRepaint","virtualScrollX","callback","virtualScrollAcceleratedDelayTime","__throttledScroll","resetFrozenColumn","dividedBodyRowObj","paintRowCountTopMargin","asideBodyRowData","dataTable","data","l","rows","rowspan","_col","showLineNumber","extend","width","lineNumberColumnWidth","columnAttr","cols","rowSelectorColumnWidth","label","leftBodyRowData","leftData","rightData","showRowSelector","bodyGroupingTable","_width","bodyRowData","dividedBodyGroupingObj","_AX6UIGrid_util2","makeBodyRowMap","footSumData","divideTableByFrozenColumnIndex","footSumTable","_item","_index","_value","_returnPlainText","_key","tagsToReplace","<",">","leftBodyGroupingData","bodyGroupingData","footSum","_editor","dividedFootSumObj","leftFootSumData","getFieldValue","_list","__origin_index__","disabled","_AX6UIGrid_inline_editor2","editMode","getHtml","formatter","isFunction","customFormatter","_AX6UIGrid_formatter2","returnValue","test","replace","tag","treeControl","__value","keys","tree","indentNodeHtml","arrowWidth","depth","indentWidth","collapse","icons","collapsedArrow","openedArrow","children","collapsedGroupIcon","groupIcon","itemIcon","valueProcessor","use","getGroupingValue","caller","__groupingList","groupBy","__groupingBy","_label","collector","customCollector","_AX6UIGrid_collector2","getSumFieldValue","_reset","paintStartRowIndex","paintStartColumnIndex","virtualPaintStartRowIndex","virtualScrollY","position","top","bodyTrHeight","isNaN","nopaintRightColumnsWidth","left","ci","_sx","_ex","bodyScrollLeft","paintEndColumnIndex","bodyWidth","nopaintLeftColumnsWidth","scrollContentWidth","padding-left","padding-right","headerColGroup","asideBodyGroupingData","bodyAlign","align","paintRowCount","virtualPaintRowCount","bodyHeight","abs","concat","splice","grouping","getTableByStartEndColumnIndex","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","isFirstPaint","SS","dl","tri","cellHeight","colAlign","isScrolled","cgl","stripeString","columnHeight","columnBorderWidth","cgi","len","isGroupingRow","rowTable","odi","trStyleClass","cl","index","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","_cellHeight","lineHeight","columnPadding","multiLine","empty","repaintSum","get","innerHTML","isFootSum","mergeCellsBody","tblRowMaps","token","hasMergeTd","tableTrs","tableTrTds","trMaps","tdObj","ri","rl","childNodes","prevTokenColIndexs","isArray","search","text","hasFalse","mergeCells","ti","_loop2","_loop","frozenScrollConfig","scrollConfig","asidePanelWidth","asideColGroup","slice","leftHeaderColGroup","needToPaintSum","rightSum","updateCell","_panelName","updateWith","repaintCell","_rowIndex","_colIndex","_newValue","updateWithCell","html","updateColumnKey","ceil","height","replaceGroupTr","replaceTr","timeoutUnUse","focus","moveResult","while_i","originalColumn","bodyRowTable","nPanelInfo","_dy","blur","moveFocus","_position","UD","scrollTo","isScrollPanel","containerPanelName","_dx","findPanelByColumnIndex","bodyGroupingMap","newTop","_AX6UIGrid_scroller2","resize","LR","scrollLeft","__isGrouping","$column","isScrollTo","newLeft","_AX6UIGrid_header2","outerWidth","INDEX","_initValue","editorConfig","UP","DOWN","useReturnToSave","HOME","END","originalValue","isNothing","editorValue","$inlineEditor","_msg","_type","action","bindedAx5ui","ax5picker","columnKey","keydown","_options","initValue","__editor","number","money","$inlineEditorCell","tagName","val","CANCEL","RETURN","__clear","getExcelString","ax5select","getBody","ESC","k","getSum","getProxyList","onClick","po","dblClick","repaintRow","_collapse","click"],"mappings":"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","file":"AX6UIGrid_body.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"../AX6Util\";\nimport UTIL from \"./AX6UIGrid_util\";\nimport DATA from \"./AX6UIGrid_data\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport HEADER from \"./AX6UIGrid_header\";\n\nimport INLINE_EDITOR from \"./AX6UIGrid_inline_editor\";\nimport COLLECTOR from \"./AX6UIGrid_collector\";\nimport FORMATTER from \"./AX6UIGrid_formatter\";\nimport SCROLLER from \"./AX6UIGrid_scroller\";\n\nconst columnSelect = {\n  focusClear: function () {\n    let self = this, _column;\n    for (let c in self.focusedColumn) {\n      _column = self.focusedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .removeAttr('data-ax6grid-column-focused');\n      }\n    }\n    self.focusedColumn = {};\n  },\n  clear: function () {\n    let self = this, _column;\n    for (let c in self.selectedColumn) {\n      _column = self.selectedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .removeAttr('data-ax6grid-column-selected');\n      }\n    }\n    self.selectedColumn = {};\n  },\n  init: function (column) {\n    let self = this;\n    if (this.isInlineEditing) {\n      for (let editKey in this.inlineEditing) {\n        if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n          return this;\n        }\n      }\n    }\n\n    // focus\n    columnSelect.focusClear.call(self);\n    self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n      panelName: column.panelName,\n      dindex: column.dindex,\n      doindex: column.doindex,\n      rowIndex: column.rowIndex,\n      colIndex: column.colIndex,\n      colspan: column.colspan\n    };\n\n    // select\n    columnSelect.clear.call(self);\n    self.xvar.selectedRange = {\n      start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n      end: null\n    };\n    self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n      if (data) {\n        return false;\n      } else {\n        return {\n          panelName: column.panelName,\n          dindex: column.dindex,\n          doindex: column.doindex,\n          rowIndex: column.rowIndex,\n          colIndex: column.colIndex,\n          colspan: column.colspan\n        }\n      }\n    })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n    this.$.panel[column.panelName]\n      .find('[data-ax6grid-tr-data-index=\"' + column.dindex + '\"]')\n      .find('[data-ax6grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + column.colIndex + '\"]')\n      .attr('data-ax6grid-column-focused', \"true\")\n      .attr('data-ax6grid-column-selected', \"true\");\n\n    if (this.isInlineEditing) {\n      inlineEdit.deActive.call(this, \"RETURN\");\n    }\n  },\n  update: function (column) {\n    const self = this;\n    let dindex, doindex, colIndex, rowIndex, trl;\n\n    self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n    columnSelect.clear.call(self);\n\n    let range = {\n      r: {\n        s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n        e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n      },\n      c: {\n        s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n        e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n      }\n    };\n\n    dindex = range.r.s;\n    for (; dindex <= range.r.e; dindex++) {\n\n\n      trl = this.bodyRowTable.rows.length;\n      rowIndex = 0;\n      for (; rowIndex < trl; rowIndex++) {\n        colIndex = range.c.s;\n        for (; colIndex <= range.c.e; colIndex++) {\n          var _panels = [],\n            panelName = \"\";\n\n          if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n          if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n          _panels.push(\"body\");\n          if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n          panelName = _panels.join(\"-\");\n\n          self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n            panelName: panelName,\n            dindex: dindex,\n            rowIndex: rowIndex,\n            colIndex: colIndex,\n            colspan: column.colspan\n          };\n\n          _panels = null;\n          panelName = null;\n        }\n      }\n    }\n    dindex = null;\n    doindex = null;\n    colIndex = null;\n    rowIndex = null;\n\n    for (var c in self.selectedColumn) {\n      var _column = self.selectedColumn[c];\n      if (_column) {\n        self.$.panel[_column.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _column.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax6grid-column-colindex=\"' + _column.colIndex + '\"]')\n          .attr('data-ax6grid-column-selected', 'true');\n      }\n    }\n\n  }\n};\n\nconst columnSelector = {\n  \"on\": function (cell) {\n    let self = this;\n\n    if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n      return;\n    }\n\n    columnSelect.init.call(self, cell);\n\n    this.$[\"container\"][\"body\"]\n      .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax6grid-column-attr=\"default\"]', function (e) {\n        if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n          columnSelect.update.call(self, {\n            panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n            dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n            doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n            rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n            colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n            colspan: Number(this.getAttribute(\"colspan\"))\n          });\n          U.stopEvent(e);\n        }\n      })\n      .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n        columnSelector.off.call(self);\n      })\n      .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n        columnSelector.off.call(self);\n      });\n\n    jQuery(document.body)\n      .attr('unselectable', 'on')\n      .css('user-select', 'none')\n      .on('selectstart', false);\n  },\n  \"off\": function () {\n\n    this.$[\"container\"][\"body\"]\n      .off(\"mousemove.ax5grid-\" + this.instanceId)\n      .off(\"mouseup.ax5grid-\" + this.instanceId)\n      .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n    jQuery(document.body)\n      .removeAttr('unselectable')\n      .css('user-select', 'auto')\n      .off('selectstart');\n  }\n};\n\nconst updateRowState = function (_states, _dindex, _doindex, _data) {\n  let self = this,\n    cfg = this.config,\n    processor = {\n      \"selected\": function (_dindex, _doindex) {\n        if (this.list[_doindex]) {\n          let i = this.$.livePanelKeys.length;\n          while (i--) {\n            this.$.panel[this.$.livePanelKeys[i]]\n              .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n              .attr(\"data-ax6grid-selected\", this.list[_doindex][cfg.columnKeys.selected]);\n          }\n        }\n      },\n      \"selectedClear\": function () {\n        let di = this.list.length;\n        let pi;\n\n        if (!this.proxyList) {\n          while (di--) {\n            if (this.list[di][cfg.columnKeys.selected]) {\n              pi = this.$.livePanelKeys.length;\n              while (pi--) {\n                this.$.panel[this.$.livePanelKeys[pi]]\n                  .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                  .attr(\"data-ax6grid-selected\", false);\n              }\n            }\n            this.list[di][cfg.columnKeys.selected] = false;\n          }\n        } else {\n          while (di--) {\n            this.list[di][cfg.columnKeys.selected] = false;\n          }\n          di = this.proxyList.length;\n          while (di--) {\n            if (this.list[doi][cfg.columnKeys.selected]) {\n              pi = this.$.livePanelKeys.length;\n              while (pi--) {\n                this.$.panel[this.$.livePanelKeys[pi]]\n                  .find('[data-ax6grid-tr-data-index=\"' + di + '\"]')\n                  .attr(\"data-ax6grid-selected\", false);\n              }\n            }\n\n            this.proxyList[di][cfg.columnKeys.selected] = false;\n            let doi = this.proxyList[di].__original_index__;\n          }\n        }\n      },\n      \"cellChecked\": function (_dindex, _doindex, _data) {\n        let key = _data.key,\n          rowIndex = _data.rowIndex,\n          colIndex = _data.colIndex;\n\n        let panelName = (function () {\n          let _panels = [];\n          if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n          if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n          _panels.push(\"body\");\n          if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n          return _panels.join(\"-\");\n        }).call(this);\n\n        this.$.panel[panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n          .find('[data-ax6grid-column-rowIndex=\"' + rowIndex + '\"][data-ax6grid-column-colIndex=\"' + colIndex + '\"]')\n          .find('[data-ax6grid-editor=\"checkbox\"]')\n          .attr(\"data-ax6grid-checked\", '' + _data.checked);\n      }\n    };\n\n  if (typeof _doindex === \"undefined\") _doindex = _dindex;\n\n  _states.forEach(function (_state) {\n    if (!processor[_state]) throw 'invaild state name';\n    processor[_state].call(self, _dindex, _doindex, _data);\n  });\n};\n\nconst updateRowStateAll = function (_states, _data) {\n  let self = this,\n    cfg = this.config,\n    processor = {\n      \"selected\": function (_dindex) {\n        repaint.call(this, true);\n      }\n    };\n\n  _states.forEach(function (_state) {\n    if (!processor[_state]) throw 'invaild state name';\n    processor[_state].call(self, _data);\n  });\n};\n\nconst init = function () {\n  let self = this;\n\n  this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax6grid-column-attr]', function (e) {\n    let panelName, attr,\n      row, col, dindex, doindex, rowIndex, colIndex,\n      targetDBLClick = {\n        \"default\": function (_column) {\n          if (self.isInlineEditing) {\n            for (let columnKey in self.inlineEditing) {\n              if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                return this;\n              }\n            }\n          }\n\n          let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n          if (column) {\n            if (!self.list[dindex].__isGrouping) {\n              value = DATA.getValue.call(self, dindex, doindex, column.key);\n            }\n          }\n\n          let editor = self.colGroup[_column.colIndex].editor;\n          if (U.isObject(editor)) {\n            inlineEdit.active.call(self, self.focusedColumn, e, value);\n          } else {\n            // 더블클릭 실행\n            if (self.config.body.onDBLClick) {\n              let that = {\n                self: self,\n                page: self.page,\n                list: self.list,\n                item: self.list[_column.dindex],\n                dindex: _column.dindex,\n                doindex: _column.doindex,\n                rowIndex: _column.rowIndex,\n                colIndex: _column.colIndex,\n                column: column,\n                value: self.list[_column.dindex][column.key]\n              };\n              self.config.body.onDBLClick.call(that);\n            }\n          }\n        },\n        \"rowSelector\": function (_column) {\n\n        },\n        \"lineNumber\": function (_column) {\n\n        }\n      };\n\n    panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n    attr = this.getAttribute(\"data-ax6grid-column-attr\");\n    row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n    col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n    rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n    colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n    dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n    doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n    if (attr in targetDBLClick) {\n      targetDBLClick[attr]({\n        panelName: panelName,\n        attr: attr,\n        row: row,\n        col: col,\n        dindex: dindex,\n        doindex: doindex,\n        rowIndex: rowIndex,\n        colIndex: colIndex\n      });\n\n      U.stopEvent(e);\n    }\n  });\n\n  this.$[\"container\"][\"body\"].on(\"click\", '[data-ax6grid-column-attr]', function (e) {\n    let panelName, attr,\n      row, col, dindex, doindex, rowIndex, colIndex, disableSelection,\n      targetClick = {\n        \"default\": function (_column) {\n          let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n            that = {\n              self: self,\n              page: self.page,\n              list: self.list,\n              item: self.list[_column.doindex],\n              dindex: _column.dindex,\n              doindex: _column.doindex,\n              rowIndex: _column.rowIndex,\n              colIndex: _column.colIndex,\n              column: column,\n              value: self.list[_column.dindex][column.key]\n            };\n\n          if (column.editor && column.editor.type == \"checkbox\") { // todo : INLINE_EDITOR에서 처리 할수 있도록 구문 변경 필요.\n            let value = DATA.getValue.call(self, _column.dindex, _column.doindex, column.key),\n              checked, newValue;\n\n            if (column.editor.config && column.editor.config.trueValue) {\n              if (checked = !(value == column.editor.config.trueValue)) {\n                newValue = column.editor.config.trueValue;\n              } else {\n                newValue = column.editor.config.falseValue;\n              }\n            } else {\n              newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n            }\n\n            DATA.setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);\n\n            updateRowState.call(self, [\"cellChecked\"], _column.dindex, _column.doindex, {\n              key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n              editorConfig: column.editor.config, checked: checked\n            });\n          } else {\n            if (self.config.body.onClick) {\n              self.config.body.onClick.call(that);\n            }\n          }\n        },\n        \"rowSelector\": function (_column) {\n          let item = self.list[_column.doindex];\n          if (item[self.config.columnKeys.disableSelection]) {\n            return false;\n          }\n\n          if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {\n            updateRowState.call(self, [\"selectedClear\"]);\n            DATA.clearSelect.call(self);\n          }\n\n          DATA.select.call(self, _column.dindex, _column.doindex, undefined, {\n            internalCall: true\n          });\n          updateRowState.call(self, [\"selected\"], _column.dindex, _column.doindex);\n        },\n        \"lineNumber\": function (_column) {\n\n        },\n        \"tree-control\": function (_column, _el) {\n          //console.log(_column);\n          toggleCollapse.call(self, _column.dindex, _column.doindex);\n        }\n      };\n\n    panelName = this.getAttribute(\"data-ax6grid-panel-name\");\n    attr = this.getAttribute(\"data-ax6grid-column-attr\");\n    row = Number(this.getAttribute(\"data-ax6grid-column-row\"));\n    col = Number(this.getAttribute(\"data-ax6grid-column-col\"));\n    rowIndex = Number(this.getAttribute(\"data-ax6grid-column-rowIndex\"));\n    colIndex = Number(this.getAttribute(\"data-ax6grid-column-colIndex\"));\n    dindex = Number(this.getAttribute(\"data-ax6grid-data-index\"));\n    doindex = Number(this.getAttribute(\"data-ax6grid-data-o-index\"));\n\n    if (attr in targetClick) {\n      targetClick[attr]({\n        panelName: panelName,\n        attr: attr,\n        row: row,\n        col: col,\n        dindex: dindex,\n        doindex: doindex,\n        rowIndex: rowIndex,\n        colIndex: colIndex\n      }, this);\n    }\n  });\n\n  this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n    let target, dindex, doindex, rowIndex, colIndex, item, column, param = {};\n\n    target = U.findParentNode(e.target, function (t) {\n      if (t.getAttribute(\"data-ax6grid-column-attr\")) {\n        return true;\n      }\n    });\n\n    if (target) {\n      // item 찾기\n      rowIndex = Number(target.getAttribute(\"data-ax6grid-column-rowIndex\"));\n      colIndex = Number(target.getAttribute(\"data-ax6grid-column-colIndex\"));\n      dindex = Number(target.getAttribute(\"data-ax6grid-data-index\"));\n      doindex = Number(target.getAttribute(\"data-ax6grid-data-o-index\"));\n      column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n      item = self.list[dindex];\n    }\n\n    if (self.config.body.onContextMenu) {\n      param = {\n        element: target,\n        dindex: dindex,\n        doindex: doindex,\n        rowIndex: rowIndex,\n        colIndex: colIndex,\n        item: item,\n        column: column,\n        gridSelf: self\n      };\n      self.config.body.onContextMenu.call({\n        self: self,\n        item: item,\n        column: column,\n        dindex: dindex,\n        doindex: doindex,\n        rowIndex: rowIndex,\n        colIndex: colIndex\n      }, e, param);\n    }\n\n    U.stopEvent(e.originalEvent);\n    target = null;\n    dindex = null;\n    doindex = null;\n    rowIndex = null;\n    colIndex = null;\n    item = null;\n    column = null;\n    param = null;\n  });\n\n  this.$[\"container\"][\"body\"]\n    .on(\"mousedown\", '[data-ax6grid-column-attr=\"default\"]', function (e) {\n      if (self.xvar.touchmoved) return false;\n      if (this.getAttribute(\"data-ax6grid-column-rowIndex\")) {\n        columnSelector.on.call(self, {\n          panelName: this.getAttribute(\"data-ax6grid-panel-name\"),\n          dindex: Number(this.getAttribute(\"data-ax6grid-data-index\")),\n          doindex: Number(this.getAttribute(\"data-ax6grid-data-o-index\")),\n          rowIndex: Number(this.getAttribute(\"data-ax6grid-column-rowIndex\")),\n          colIndex: Number(this.getAttribute(\"data-ax6grid-column-colIndex\")),\n          colspan: Number(this.getAttribute(\"colspan\"))\n        });\n      }\n    })\n    .on(\"dragstart\", function (e) {\n      U.stopEvent(e);\n      return false;\n    });\n\n  resetFrozenColumn.call(this);\n\n  // 그리드 바디에 출력할 여유 카운트\n  this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n  this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n\n  if (this.config.virtualScrollAccelerated) {\n    this.__throttledScroll = U.throttle(function (css, opts) {\n      if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n        repaint.call(this);\n      } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n        repaint.call(this);\n      }\n      if (opts.callback) {\n        opts.callback();\n      }\n    }, this.config.virtualScrollAcceleratedDelayTime);\n  } else {\n    this.__throttledScroll = false;\n  }\n};\n\nconst resetFrozenColumn = function () {\n  let cfg = this.config,\n    dividedBodyRowObj = UTIL.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n  this.asideBodyRowData = (function (dataTable) {\n    let data = {rows: []};\n    for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n      data.rows[i] = {cols: []};\n      if (i === 0) {\n        let col = {\n          label: \"\",\n          colspan: 1,\n          rowspan: dataTable.rows.length,\n          colIndex: null\n        }, _col = {};\n\n        if (cfg.showLineNumber) {\n          _col = jQuery.extend({}, col, {\n            width: cfg.lineNumberColumnWidth,\n            _width: cfg.lineNumberColumnWidth,\n            columnAttr: \"lineNumber\",\n            label: \"&nbsp;\", key: \"__d-index__\"\n          });\n          data.rows[i].cols.push(_col);\n        }\n        if (cfg.showRowSelector) {\n          _col = jQuery.extend({}, col, {\n            width: cfg.rowSelectorColumnWidth,\n            _width: cfg.rowSelectorColumnWidth,\n            columnAttr: \"rowSelector\",\n            label: \"\", key: \"__d-checkbox__\"\n          });\n          data.rows[i].cols.push(_col);\n        }\n      }\n    }\n\n    return data;\n  }).call(this, this.bodyRowTable);\n\n  //console.log(dividedBodyRowObj);\n\n  this.leftBodyRowData = dividedBodyRowObj.leftData;\n  this.bodyRowData = dividedBodyRowObj.rightData;\n\n  if (cfg.body.grouping) {\n    let dividedBodyGroupingObj = UTIL.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n    this.asideBodyGroupingData = (function (dataTable) {\n      let data = {rows: []};\n      for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n        data.rows[i] = {cols: []};\n        if (i === 0) {\n          let col = {\n            label: \"\",\n            colspan: 1,\n            rowspan: dataTable.rows.length,\n            colIndex: null\n          }, _col = {};\n\n          if (cfg.showLineNumber) {\n            _col = jQuery.extend({}, col, {\n              width: cfg.lineNumberColumnWidth,\n              _width: cfg.lineNumberColumnWidth,\n              columnAttr: \"lineNumber\",\n              label: \"&nbsp;\", key: \"__d-index__\"\n            });\n            data.rows[i].cols.push(_col);\n          }\n          if (cfg.showRowSelector) {\n            _col = jQuery.extend({}, col, {\n              width: cfg.rowSelectorColumnWidth,\n              _width: cfg.rowSelectorColumnWidth,\n              columnAttr: \"rowSelector\",\n              label: \"\", key: \"__d-checkbox__\"\n            });\n            data.rows[i].cols.push(_col);\n          }\n        }\n      }\n\n      return data;\n    }).call(this, this.bodyGroupingTable);\n    this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n    this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n    this.bodyGroupingMap = UTIL.makeBodyRowMap.call(this, this.bodyGroupingTable);\n  }\n\n  this.leftFootSumData = {};\n  this.footSumData = {};\n  if (this.config.footSum) {\n    let dividedFootSumObj = UTIL.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n    this.leftFootSumData = dividedFootSumObj.leftData;\n    this.footSumData = dividedFootSumObj.rightData;\n  }\n};\n\nconst getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n\n  let _key = _col.key, tagsToReplace = {\n    '<': '&lt;',\n    '>': '&gt;'\n  };\n\n  if (_key === \"__d-index__\") {\n    return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n  }\n  else if (_key === \"__d-checkbox__\") {\n    return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n  }\n  else {\n    if (_col.editor && (function (_editor) {\n        if (_editor.type in INLINE_EDITOR) {\n          return (INLINE_EDITOR[_editor.type].editMode == \"inline\");\n        }\n        return false;\n      })(_col.editor)) { // editor가 inline타입이라면\n\n      _value = _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n\n      if (U.isFunction(_col.editor.disabled)) {\n        if (_col.editor.disabled.call({\n            list: _list,\n            dindex: _index,\n            item: _list[_index],\n            key: _key,\n            value: _value\n          })) {\n          return _value;\n        }\n      }\n\n      // print editor\n      return _returnPlainText ? _value : INLINE_EDITOR[_col.editor.type].getHtml(this, _col.editor, _value);\n    }\n\n    const valueProcessor = {\n      \"formatter\": function () {\n        let that = {\n          key: _key,\n          value: _value || DATA.getValue.call(this, _index, _item.__origin_index__, _key),\n          dindex: _index,\n          item: _item,\n          list: _list\n        };\n\n        let caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n        return caller ? caller.call(that) : that.value;\n      },\n      \"default\": function () {\n        let returnValue = \"\";\n\n        if (typeof _value !== \"undefined\") {\n          returnValue = _value;\n        } else {\n          if (/[\\.\\[\\]]/.test(_key)) {\n            _value = DATA.getValue.call(this, _index, _item.__origin_index__, _key);\n          } else {\n            _value = _item[_key];\n          }\n\n          if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n        }\n\n        // 키값이 Boolean일때 오류 발생하여 수정.\n        return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n          return tagsToReplace[tag] || tag;\n        });\n      },\n      \"treeControl\": function (__value) {\n        let cfg = this.config,\n          keys = this.config.tree.columnKeys,\n          indentNodeHtml = '';\n\n        if (_item[keys.children].length) {\n          indentNodeHtml += '<a ' +\n            'data-ax6grid-data-index=\"' + _index + '\" ' +\n            'data-ax6grid-column-attr=\"tree-control\" ' +\n            'data-ax6grid-tnode-arrow=\"\" ' +\n            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n            '>';\n          indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n          indentNodeHtml += '</a>';\n        } else {\n          indentNodeHtml += '<span ' +\n            'data-ax6grid-tnode-arrow=\"\" ' +\n            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n            '>&nbsp;</span>';\n        }\n\n        indentNodeHtml += '<span ' +\n          'data-ax6grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n          'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n          '>';\n        indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n        indentNodeHtml += '</span>';\n\n        return indentNodeHtml + __value;\n      }\n    };\n\n    let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n    if (this.config.tree.use && _col.treeControl) {\n      returnValue = valueProcessor.treeControl.call(this, returnValue);\n    }\n\n    return returnValue;\n  }\n\n};\n\nconst getGroupingValue = function (_item, _index, _col) {\n  let value, that, caller, _key = _col.key, _label = _col.label;\n\n  if (typeof _key === \"undefined\") {\n    that = {\n      key: _key,\n      list: _item.__groupingList,\n      groupBy: _item.__groupingBy\n    };\n    if (U.isFunction(_label)) {\n      value = _label.call(that);\n    } else {\n      value = _label;\n    }\n    _item[_col.colIndex] = value;\n    return value;\n  }\n  else if (_key === \"__d-index__\") {\n    return '';\n  }\n  else if (_key === \"__d-checkbox__\") {\n    return '';\n  }\n  else {\n    if (_col.collector) {\n      that = {\n        key: _key,\n        list: _item.__groupingList\n      };\n      _item[_col.colIndex] = value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n      if (_col.formatter) {\n        that.value = value;\n        caller = (U.isFunction(_col.formatter) ? _col.formatter : this.customFormatter[_col.formatter] || FORMATTER[_col.formatter]);\n        return caller ? caller.call(that) : value;\n      } else {\n        return value;\n      }\n    } else {\n      return \"&nbsp;\";\n    }\n  }\n};\n\nconst getSumFieldValue = function (_list, _col) {\n  let _key = _col.key, _label = _col.label;\n  //, _collector, _formatter\n  if (typeof _key === \"undefined\") {\n    return _label;\n  }\n  else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n    return '&nbsp;';\n  }\n  else {\n    if (_col.collector) {\n      let that = {\n        key: _key,\n        list: _list\n      };\n      let value = (U.isFunction(_col.collector) ? _col.collector : this.customCollector[_col.collector] || COLLECTOR[_col.collector]).call(that);\n      that.value = value;\n\n      if (_col.formatter) {\n        return (U.isFunction(_col.formatter) ? _col.formatter : this.config.formatter[_col.formatter] || FORMATTER[_col.formatter]).call(that);\n      } else {\n        return value;\n      }\n    } else {\n      return \"&nbsp;\";\n    }\n  }\n};\n\nconst repaint = function (_reset) {\n  // debugger;\n  let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n  /// repaint reset 타입이면 고정컬럼을 재조정\n  if (_reset) {\n    resetFrozenColumn.call(this);\n    // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n    this.xvar.paintStartRowIndex = undefined;\n    this.xvar.paintStartColumnIndex = undefined;\n  }\n\n  /// 출력시작 인덱스\n  let paintStartRowIndex, virtualPaintStartRowIndex;\n\n  if (this.config.virtualScrollY) {\n    virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n    if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n      paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n    }\n  }\n  else {\n    paintStartRowIndex = this.xvar.frozenRowIndex;\n  }\n\n  if (isNaN(paintStartRowIndex)) return this;\n\n  let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n  let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n  if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n    for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n      // bodyScrollLeft\n      this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n      this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n      if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n        paintStartColumnIndex = ci;\n      }\n      if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n        paintEndColumnIndex = ci;\n\n        if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n        if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n      }\n    }\n\n    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n    this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n    this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n  }\n\n  let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n    headerColGroup = this.headerColGroup,\n    asideBodyRowData = this.asideBodyRowData,\n    leftBodyRowData = this.leftBodyRowData,\n    bodyRowData = this.bodyRowData,\n    leftFootSumData = this.leftFootSumData,\n    footSumData = this.footSumData,\n    asideBodyGroupingData = this.asideBodyGroupingData,\n    leftBodyGroupingData = this.leftBodyGroupingData,\n    bodyGroupingData = this.bodyGroupingData,\n    bodyAlign = cfg.body.align,\n    paintRowCount, virtualPaintRowCount;\n\n  if (!this.config.virtualScrollY) {\n    virtualPaintRowCount = paintRowCount = list.length;\n  } else {\n    virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n    paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n  }\n\n  // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n  if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n    paintStartRowIndex = this.xvar.paintStartRowIndex;\n  }\n\n  if (\n    this.xvar.dataRowCount === list.length\n    && this.xvar.paintStartRowIndex === paintStartRowIndex\n    && this.xvar.paintRowCount === paintRowCount\n    && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n    && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n  ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n  // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n  if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n    headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n    bodyRowData = UTIL.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n    if (cfg.body.grouping) {\n      bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n    }\n    if (cfg.footSum) {\n      footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n    }\n    if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n      this.needToPaintSum = true;\n    }\n  }\n\n  /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n  this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n  /// 사용된 패널들의 키 모음\n  this.$.livePanelKeys = [];\n\n  // 그리드 바디 영역 페인트 함수\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _groupRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey];\n\n    if (!isFirstPaint && !_scrollConfig) {\n      this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n      return false;\n    }\n\n    let SS = [],\n      cgi, cgl, di, dl, tri, trl, ci, cl, col,\n      cellHeight,\n      colAlign,\n      isScrolled = (function () {\n        // 스크롤값이 변경되거나 처음 호출되었습니까?\n        if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n          _scrollConfig = {\n            paintStartRowIndex: 0,\n            paintRowCount: _list.length\n          };\n          return false;\n        } else {\n          return true;\n        }\n      })(),\n      stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight) + 'px';\n\n    if (isScrolled) {\n      SS.push('<div style=\"background:repeating-linear-gradient(to top, ' + stripeString + ');' +\n        'font-size:0;' +\n        'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n    }\n\n    SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n    SS.push('<colgroup>');\n    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n      SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n    }\n    SS.push('<col  />');\n    SS.push('</colgroup>');\n\n    di = _scrollConfig.paintStartRowIndex;\n\n    for (dl = (function () {\n      let len;\n      len = _list.length;\n      if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n        len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n      }\n      return len;\n    })(); di < dl; di++) {\n\n      if (_list[di]) {\n        let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n        if (_groupRow && \"__isGrouping\" in _list[di]) {\n          rowTable = _groupRow;\n          isGroupingRow = true;\n        } else {\n          rowTable = _bodyRow;\n        }\n\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n          SS.push('<tr class=\"tr-' + (di % 4) + '', (cfg.body.trStyleClass) ? (U.isFunction(cfg.body.trStyleClass)) ? ' ' + cfg.body.trStyleClass.call({\n              item: _list[di],\n              index: di\n            }, _list[di], di) : ' ' + cfg.body.trStyleClass : '', '\"',\n\n            (isGroupingRow) ? ' data-ax6grid-grouping-tr=\"true\"' : '',\n            ' data-ax6grid-tr-data-index=\"' + di + '\"',\n            ' data-ax6grid-tr-data-o-index=\"' + odi + '\"',\n            ' data-ax6grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n            ' data-ax6grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n            '>');\n          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n            col = rowTable.rows[tri].cols[ci];\n            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n            colAlign = col.align || bodyAlign;\n\n            SS.push('<td ',\n              'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-data-o-index=\"' + odi + '\" ',\n              'data-ax6grid-column-row=\"' + tri + '\" ',\n              'data-ax6grid-column-col=\"' + ci + '\" ',\n              'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n              'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n              'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n              (function (_focusedColumn, _selectedColumn) {\n                let attrs = \"\";\n                if (_focusedColumn) {\n                  attrs += 'data-ax6grid-column-focused=\"true\" ';\n                }\n                if (_selectedColumn) {\n                  attrs += 'data-ax6grid-column-selected=\"true\" ';\n                }\n                return attrs;\n              })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n              'colspan=\"' + col.colspan + '\" ',\n              'rowspan=\"' + col.rowspan + '\" ',\n              'class=\"' + (function (_col) {\n                let tdCSS_class = \"\";\n                if (_col.styleClass) {\n                  if (U.isFunction(_col.styleClass)) {\n                    tdCSS_class += _col.styleClass.call({\n                      column: _col,\n                      key: _col.key,\n                      item: _list[di],\n                      index: di\n                    }) + \" \";\n                  } else {\n                    tdCSS_class += _col.styleClass + \" \";\n                  }\n                }\n                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                return tdCSS_class;\n              }).call(this, col) + '\" ',\n              'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n            SS.push((function (_cellHeight) {\n              let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n              if (!col.multiLine) {\n                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n              }\n\n              return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n            })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n            SS.push('</td>');\n          }\n          SS.push('<td ',\n            'data-ax6grid-column-row=\"null\" ',\n            'data-ax6grid-column-col=\"null\" ',\n            'data-ax6grid-data-index=\"' + di + '\" ',\n            'data-ax6grid-data-o-index=\"' + odi + '\" ',\n            'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n            '></td>');\n          SS.push('</tr>');\n        }\n      }\n    }\n    SS.push('</table>');\n\n    if (isScrolled && _list.length) {\n      SS.push('<div style=\"background:repeating-linear-gradient(to bottom, ' + stripeString + ');' +\n        'font-size:0;' +\n        'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n    }\n\n\n    _elTarget.empty();\n    SS = SS.join('');\n\n    _elTarget.get(0).innerHTML = SS;\n\n    this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n    return true;\n  };\n\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey];\n\n    if (!isFirstPaint && !_scrollConfig) {\n      this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n      return false;\n    }\n\n    let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n    SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n    SS.push('<colgroup>');\n    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n      SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n    }\n    SS.push('<col  />');\n    SS.push('</colgroup>');\n\n    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n      SS.push('<tr class=\"tr-sum\">');\n      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n        col = _bodyRow.rows[tri].cols[ci];\n        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n        colAlign = col.align || bodyAlign;\n\n        SS.push('<td ',\n          'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n          'data-ax6grid-column-row=\"' + tri + '\" ',\n          'data-ax6grid-column-col=\"' + ci + '\" ',\n          'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n          'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n          'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n          (function (_focusedColumn, _selectedColumn) {\n            var attrs = \"\";\n            if (_focusedColumn) {\n              attrs += 'data-ax6grid-column-focused=\"true\" ';\n            }\n            if (_selectedColumn) {\n              attrs += 'data-ax6grid-column-selected=\"true\" ';\n            }\n            return attrs;\n          })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n          'colspan=\"' + col.colspan + '\" ',\n          'rowspan=\"' + col.rowspan + '\" ',\n          'class=\"' + (function (_col) {\n            var tdCSS_class = \"\";\n            if (_col.styleClass) {\n              if (U.isFunction(_col.styleClass)) {\n                tdCSS_class += _col.styleClass.call({\n                  column: _col,\n                  key: _col.key,\n                  isFootSum: true\n                }) + \" \";\n              } else {\n                tdCSS_class += _col.styleClass + \" \";\n              }\n            }\n            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n            return tdCSS_class;\n          }).call(this, col) + '\" ',\n          'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n        SS.push((function (_cellHeight) {\n          let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n          if (!col.multiLine) {\n            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n          }\n\n          return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n            ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n        })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n        SS.push('</td>');\n      }\n      SS.push('<td ',\n        'data-ax6grid-column-row=\"null\" ',\n        'data-ax6grid-column-col=\"null\" ',\n        'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n        '></td>');\n      SS.push('</tr>');\n    }\n\n    SS.push('</table>');\n\n    _elTarget.empty();\n    SS = SS.join('');\n\n    _elTarget.get(0).innerHTML = SS;\n\n    this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n    return true;\n  };\n\n  /**\n   * @param _elTargetKey\n   * @param _colGroup\n   * @param _bodyRow\n   * @param _list\n   * @param [_scrollConfig]\n   * @returns {boolean}\n   */\n  let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n    let tblRowMaps = [];\n    let _elTarget = this.$.panel[_elTargetKey];\n    let token = {}, hasMergeTd;\n\n    // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n    let tableTrs = _elTarget.find(\"tr\");\n    for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n      let tableTrTds, trMaps;\n      tableTrTds = tableTrs[ri].childNodes;\n      trMaps = [];\n\n      for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n        let tdObj = {\n          \"$\": jQuery(tableTrTds[ci])\n        };\n\n        if (tdObj[\"$\"].attr(\"data-ax6grid-column-col\") != \"null\") {\n          tdObj.dindex = tdObj[\"$\"].attr(\"data-ax6grid-data-index\");\n          tdObj.tri = tdObj[\"$\"].attr(\"data-ax6grid-column-row\");\n          tdObj.ci = tdObj[\"$\"].attr(\"data-ax6grid-column-col\");\n          tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-rowIndex\");\n          tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax6grid-column-colIndex\");\n          tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n          tdObj.text = tdObj[\"$\"].text();\n          trMaps.push(tdObj);\n        }\n\n        tdObj = null;\n      }\n      tblRowMaps.push(trMaps);\n    }\n\n    // 두줄이상 일 때 의미가 있으니.\n    if (tblRowMaps.length > 1) {\n      hasMergeTd = false;\n      for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n        let prevTokenColIndexs = [];\n\n        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n          // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n\n          if (!_colGroup[ci].editor && (() => {\n              if (U.isArray(cfg.body.mergeCells)) {\n                return U.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n              } else {\n                return true;\n              }\n            })()) {\n\n            // 앞줄과 값이 같다면.\n            if (token[ci] && (() => {\n                if (prevTokenColIndexs.length > 0) {\n                  let hasFalse = true;\n                  prevTokenColIndexs.forEach(function (ti) {\n                    if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                      hasFalse = false;\n                    }\n                  });\n                  return hasFalse;\n                } else {\n                  return true;\n                }\n              })() && token[ci].text == tblRowMaps[ri][ci].text) {\n              tblRowMaps[ri][ci].rowspan = 0;\n              tblRowMaps[token[ci].ri][ci].rowspan++;\n              hasMergeTd = true;\n            } else {\n              token[ci] = {\n                ri: ri,\n                ci: ci,\n                text: tblRowMaps[ri][ci].text\n              };\n            }\n\n            prevTokenColIndexs.push(ci);\n          }\n        }\n      }\n\n      // rowspan을 다 구했으면 적용합니다.\n      if (hasMergeTd) {\n        for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n          for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n            if (tblRowMaps[ri][ci].rowspan == 0) {\n              tblRowMaps[ri][ci][\"$\"].remove();\n            } else if (tblRowMaps[ri][ci].rowspan > 1) {\n              tblRowMaps[ri][ci][\"$\"]\n                .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                .addClass(\"merged\");\n            }\n          }\n        }\n      }\n    }\n  };\n\n  let scrollConfig = {\n    paintStartRowIndex: paintStartRowIndex,\n    paintRowCount: paintRowCount,\n    paintStartColumnIndex: paintStartColumnIndex,\n    paintEndColumnIndex: paintEndColumnIndex,\n    nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n    nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n    bodyTrHeight: this.xvar.bodyTrHeight,\n    virtualScrollX: this.config.virtualScrollX,\n    virtualScrollY: this.config.virtualScrollY,\n  };\n  let frozenScrollConfig = jQuery.extend({}, scrollConfig, {\n    paintStartRowIndex: 0,\n    paintRowCount: this.xvar.frozenRowIndex\n  });\n\n  // aside\n  if (cfg.asidePanelWidth > 0) {\n    if (this.xvar.frozenRowIndex > 0) {\n      // 상단 행고정\n      repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n\n    repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n    if (cfg.footSum) {\n      // 바닥 요약 (footSum에 대한 aside 사용안함)\n      repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n    }\n  }\n\n  // left\n  if (this.xvar.frozenColumnIndex > 0) {\n    if (this.xvar.frozenRowIndex > 0) {\n      // 상단 행고정\n      repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n    }\n\n    repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n    }\n  }\n\n  // body\n  if (this.xvar.frozenRowIndex > 0) {\n    // 상단 행고정\n    repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n  }\n  repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n  // 바닥 요약\n  if (cfg.footSum && this.needToPaintSum) {\n    repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n  }\n  // right\n  if (cfg.rightSum) {\n    // todo : right 표현 정리\n  }\n\n  /// mergeCells\n  if (cfg.body.mergeCells && this.list.length) {\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n        // console.log(this.leftHeaderColGroup, leftBodyRowData);\n        mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n      }\n      mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n      mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n    }\n    mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n  }\n\n  this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n  this.xvar.paintStartRowIndex = paintStartRowIndex;\n  this.xvar.paintRowCount = paintRowCount;\n  this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n  this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n  this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n  this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n  this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n  this.xvar.dataRowCount = list.length;\n  this.needToPaintSum = false;\n\n  PAGE.statusUpdate.call(this);\n};\n\nconst repaintCell = function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {\n  let self = this,\n    cfg = this.config,\n    list = this.list;\n\n  let updateCell = this.$[\"panel\"][_panelName]\n    .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n    .find('[data-ax6grid-column-rowindex=\"' + _rowIndex + '\"][data-ax6grid-column-colindex=\"' + _colIndex + '\"]')\n    .find('[data-ax6grid-cellholder]'),\n    colGroup = this.colGroup,\n    col = colGroup[_colIndex];\n\n  updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n  if (col.editor && col.editor.updateWith) {\n    col.editor.updateWith.forEach(function (updateColumnKey) {\n      colGroup.forEach(function (col) {\n        if (col.key == updateColumnKey) {\n          let rowIndex = col.rowIndex, colIndex = col.colIndex,\n            panelName = UTIL.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n            updateWithCell = self.$[\"panel\"][panelName]\n              .find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]')\n              .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n              .find('[data-ax6grid-cellholder]');\n\n          updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n        }\n      });\n    });\n  }\n\n  /// ~~~~~~\n\n  let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n    headerColGroup = this.headerColGroup,\n    leftFootSumData = this.leftFootSumData,\n    footSumData = this.footSumData,\n    leftBodyGroupingData = this.leftBodyGroupingData,\n    bodyGroupingData = this.bodyGroupingData,\n    bodyAlign = cfg.body.align,\n    paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n    scrollConfig = {\n      paintStartRowIndex: paintStartRowIndex,\n      paintRowCount: paintRowCount,\n      bodyTrHeight: this.xvar.bodyTrHeight\n    };\n\n  if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n    headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n    if (cfg.body.grouping) {\n      bodyGroupingData = UTIL.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n    }\n    if (cfg.footSum) {\n      footSumData = UTIL.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n    }\n  }\n\n  let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey],\n      SS = [],\n      cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n    SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n    SS.push('<colgroup>');\n    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n      SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n    }\n    SS.push('<col  />');\n    SS.push('</colgroup>');\n\n    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n      SS.push('<tr class=\"tr-sum\">');\n      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n        col = _bodyRow.rows[tri].cols[ci];\n        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n        colAlign = col.align || bodyAlign;\n\n        SS.push('<td ',\n          'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n          'data-ax6grid-column-row=\"' + tri + '\" ',\n          'data-ax6grid-column-col=\"' + ci + '\" ',\n          'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n          'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n          'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n          (function (_focusedColumn, _selectedColumn) {\n            var attrs = \"\";\n            if (_focusedColumn) {\n              attrs += 'data-ax6grid-column-focused=\"true\" ';\n            }\n            if (_selectedColumn) {\n              attrs += 'data-ax6grid-column-selected=\"true\" ';\n            }\n            return attrs;\n          })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n          'colspan=\"' + col.colspan + '\" ',\n          'rowspan=\"' + col.rowspan + '\" ',\n          'class=\"' + (function (_col) {\n            let tdCSS_class = \"\";\n            if (_col.styleClass) {\n              if (U.isFunction(_col.styleClass)) {\n                tdCSS_class += _col.styleClass.call({\n                  column: _col,\n                  key: _col.key,\n                  isFootSum: true\n                }) + \" \";\n              } else {\n                tdCSS_class += _col.styleClass + \" \";\n              }\n            }\n            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n            return tdCSS_class;\n          }).call(this, col) + '\" ',\n          'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n        SS.push((function (_cellHeight) {\n          let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n          if (!col.multiLine) {\n            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n          }\n\n          return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n            ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n        })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n        SS.push('</td>');\n      }\n      SS.push('<td ',\n        'data-ax6grid-column-row=\"null\" ',\n        'data-ax6grid-column-col=\"null\" ',\n        'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n        '></td>');\n      SS.push('</tr>');\n    }\n\n    SS.push('</table>');\n\n    _elTarget.empty().get(0).innerHTML = SS.join('');\n    return true;\n  };\n  let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey],\n      SS = [],\n      di, dl, tri, trl, ci, cl,\n      col, cellHeight, colAlign;\n\n    for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n      let len;\n      len = _list.length;\n      if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n        len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n      }\n      return len;\n    })(); di < dl; di++) {\n      if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n        let rowTable = _groupRow;\n        SS = [];\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n            col = rowTable.rows[tri].cols[ci];\n            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n            colAlign = col.align || bodyAlign;\n\n            SS.push('<td ',\n              'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-column-row=\"' + tri + '\" ',\n              'data-ax6grid-column-col=\"' + ci + '\" ',\n              'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n              'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n              'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n              (function (_focusedColumn, _selectedColumn) {\n                let attrs = \"\";\n                if (_focusedColumn) {\n                  attrs += 'data-ax6grid-column-focused=\"true\" ';\n                }\n                if (_selectedColumn) {\n                  attrs += 'data-ax6grid-column-selected=\"true\" ';\n                }\n                return attrs;\n              })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n              'colspan=\"' + col.colspan + '\" ',\n              'rowspan=\"' + col.rowspan + '\" ',\n              'class=\"' + (function (_col) {\n                let tdCSS_class = \"\";\n                if (_col.styleClass) {\n                  if (U.isFunction(_col.styleClass)) {\n                    tdCSS_class += _col.styleClass.call({\n                      column: _col,\n                      key: _col.key,\n                      item: _list[di],\n                      index: di\n                    }) + \" \";\n                  } else {\n                    tdCSS_class += _col.styleClass + \" \";\n                  }\n                }\n                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                return tdCSS_class;\n              }).call(this, col) + '\" ',\n              'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n            SS.push((function (_cellHeight) {\n              let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n              if (!col.multiLine) {\n                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n              }\n\n              return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n            SS.push('</td>');\n          }\n          SS.push('<td ',\n            'data-ax6grid-column-row=\"null\" ',\n            'data-ax6grid-column-col=\"null\" ',\n            'data-ax6grid-data-index=\"' + di + '\" ',\n            'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n            '></td>');\n        }\n        _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n      }\n    }\n  };\n\n  // body.grouping tr 다시 그리기..\n  if (cfg.body.grouping) {\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (this.xvar.frozenRowIndex > 0) {\n        // 상단 행고정\n        replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n          paintStartRowIndex: 0,\n          paintRowCount: this.xvar.frozenRowIndex,\n          bodyTrHeight: this.xvar.bodyTrHeight\n        });\n      }\n      replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > 0) {\n      // 상단 행고정\n      replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n        paintStartRowIndex: 0,\n        paintRowCount: this.xvar.frozenRowIndex,\n        bodyTrHeight: this.xvar.bodyTrHeight\n      });\n    }\n\n    replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n  }\n\n  if (this.xvar.frozenColumnIndex > 0) {\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n    }\n  }\n\n  if (cfg.footSum && this.needToPaintSum) {\n    // 바닥 요약\n    repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n  }\n};\n\nconst repaintRow = function (_dindex) {\n  let self = this,\n    cfg = this.config,\n    list = this.list;\n  /// ~~~~~~\n\n  let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n    asideBodyRowData = this.asideBodyRowData,\n    leftBodyRowData = this.leftBodyRowData,\n    bodyRowData = this.bodyRowData,\n    leftFootSumData = this.leftFootSumData,\n    footSumData = this.footSumData,\n    asideBodyGroupingData = this.asideBodyGroupingData,\n    leftBodyGroupingData = this.leftBodyGroupingData,\n    bodyGroupingData = this.bodyGroupingData,\n    bodyAlign = cfg.body.align,\n    paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n    scrollConfig = {\n      paintStartRowIndex: paintStartRowIndex,\n      paintRowCount: paintRowCount,\n      bodyTrHeight: this.xvar.bodyTrHeight\n    };\n\n  let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n    let _elTarget = this.$.panel[_elTargetKey],\n      SS = [],\n      cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n    SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n    SS.push('<colgroup>');\n    for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n      SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n    }\n    SS.push('<col  />');\n    SS.push('</colgroup>');\n\n    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n      SS.push('<tr class=\"tr-sum\">');\n      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n        col = _bodyRow.rows[tri].cols[ci];\n        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n        colAlign = col.align || bodyAlign;\n\n        SS.push('<td ',\n          'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n          'data-ax6grid-column-row=\"' + tri + '\" ',\n          'data-ax6grid-column-col=\"' + ci + '\" ',\n          'data-ax6grid-column-rowIndex=\"' + tri + '\" ',\n          'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n          'data-ax6grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n          (function (_focusedColumn, _selectedColumn) {\n            var attrs = \"\";\n            if (_focusedColumn) {\n              attrs += 'data-ax6grid-column-focused=\"true\" ';\n            }\n            if (_selectedColumn) {\n              attrs += 'data-ax6grid-column-selected=\"true\" ';\n            }\n            return attrs;\n          })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n          'colspan=\"' + col.colspan + '\" ',\n          'rowspan=\"' + col.rowspan + '\" ',\n          'class=\"' + (function (_col) {\n            var tdCSS_class = \"\";\n            if (_col.styleClass) {\n              if (U.isFunction(_col.styleClass)) {\n                tdCSS_class += _col.styleClass.call({\n                  column: _col,\n                  key: _col.key,\n                  isFootSum: true\n                }) + \" \";\n              } else {\n                tdCSS_class += _col.styleClass + \" \";\n              }\n            }\n            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n            return tdCSS_class;\n          }).call(this, col) + '\" ',\n          'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n        SS.push((function (_cellHeight) {\n          var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n          if (!col.multiLine) {\n            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n          }\n\n          return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n            ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n        })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n        SS.push('</td>');\n      }\n      SS.push('<td ',\n        'data-ax6grid-column-row=\"null\" ',\n        'data-ax6grid-column-col=\"null\" ',\n        'data-ax6grid-column-attr=\"' + (\"sum\") + '\" ',\n        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n        '></td>');\n      SS.push('</tr>');\n    }\n\n    SS.push('</table>');\n\n    _elTarget.empty().get(0).innerHTML = SS.join('');\n    return true;\n  };\n  let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n    let _elTarget = this.$.panel[_elTargetKey],\n      SS = [],\n      di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n    if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n      _scrollConfig = {\n        paintStartRowIndex: 0,\n        paintRowCount: _list.length\n      };\n    }\n\n    for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n      let len;\n      len = _list.length;\n      if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n        len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n      }\n      return len;\n    })(); di < dl; di++) {\n      if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n        let rowTable = _groupRow;\n        SS = [];\n        for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n          for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n            col = rowTable.rows[tri].cols[ci];\n            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n            colAlign = col.align || bodyAlign;\n\n            SS.push('<td ',\n              'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n              'data-ax6grid-data-index=\"' + di + '\" ',\n              'data-ax6grid-column-row=\"' + tri + '\" ',\n              'data-ax6grid-column-col=\"' + ci + '\" ',\n              'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n              'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n              'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n              (function (_focusedColumn, _selectedColumn) {\n                let attrs = \"\";\n                if (_focusedColumn) {\n                  attrs += 'data-ax6grid-column-focused=\"true\" ';\n                }\n                if (_selectedColumn) {\n                  attrs += 'data-ax6grid-column-selected=\"true\" ';\n                }\n                return attrs;\n              })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n              'colspan=\"' + col.colspan + '\" ',\n              'rowspan=\"' + col.rowspan + '\" ',\n              'class=\"' + (function (_col) {\n                let tdCSS_class = \"\";\n                if (_col.styleClass) {\n                  if (U.isFunction(_col.styleClass)) {\n                    tdCSS_class += _col.styleClass.call({\n                      column: _col,\n                      key: _col.key,\n                      item: _list[di],\n                      index: di\n                    }) + \" \";\n                  } else {\n                    tdCSS_class += _col.styleClass + \" \";\n                  }\n                }\n                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                return tdCSS_class;\n              }).call(this, col) + '\" ',\n              'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n            SS.push((function (_cellHeight) {\n              let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n              if (!col.multiLine) {\n                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n              }\n\n              return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n                '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n            SS.push('</td>');\n          }\n          SS.push('<td ',\n            'data-ax6grid-column-row=\"null\" ',\n            'data-ax6grid-column-col=\"null\" ',\n            'data-ax6grid-data-index=\"' + di + '\" ',\n            'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n            '></td>');\n        }\n        _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n      }\n    }\n  };\n  let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n    let _elTarget = this.$.panel[_elTargetKey],\n      SS = [],\n      tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow,\n      odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n\n    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n      for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n        col = rowTable.rows[tri].cols[ci];\n        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n        colAlign = col.align || bodyAlign;\n\n        SS.push('<td ',\n          'data-ax6grid-panel-name=\"' + _elTargetKey + '\" ',\n          'data-ax6grid-data-index=\"' + di + '\" ',\n          'data-ax6grid-data-o-index=\"' + odi + '\" ',\n          'data-ax6grid-column-row=\"' + tri + '\" ',\n          'data-ax6grid-column-col=\"' + ci + '\" ',\n          'data-ax6grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n          'data-ax6grid-column-colIndex=\"' + col.colIndex + '\" ',\n          'data-ax6grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n          (function (_focusedColumn, _selectedColumn) {\n            let attrs = \"\";\n            if (_focusedColumn) {\n              attrs += 'data-ax6grid-column-focused=\"true\" ';\n            }\n            if (_selectedColumn) {\n              attrs += 'data-ax6grid-column-selected=\"true\" ';\n            }\n            return attrs;\n          })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n          'colspan=\"' + col.colspan + '\" ',\n          'rowspan=\"' + col.rowspan + '\" ',\n          'class=\"' + (function (_col) {\n            let tdCSS_class = \"\";\n            if (_col.styleClass) {\n              if (U.isFunction(_col.styleClass)) {\n                tdCSS_class += _col.styleClass.call({\n                  column: _col,\n                  key: _col.key,\n                  item: _list[di],\n                  index: di\n                }) + \" \";\n              } else {\n                tdCSS_class += _col.styleClass + \" \";\n              }\n            }\n            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n            return tdCSS_class;\n          }).call(this, col) + '\" ',\n          'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n        SS.push((function (_cellHeight) {\n          let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n          if (!col.multiLine) {\n            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n          }\n\n          return '<span data-ax6grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n            ((colAlign) ? 'data-ax6grid-text-align=\"' + colAlign + '\"' : '') +\n            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n\n        })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n        SS.push('</td>');\n      }\n      SS.push('<td ',\n        'data-ax6grid-column-row=\"null\" ',\n        'data-ax6grid-column-col=\"null\" ',\n        'data-ax6grid-data-index=\"' + di + '\" ',\n        'data-ax6grid-column-attr=\"' + (\"default\") + '\" ',\n        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n        '></td>');\n    }\n\n    _elTarget.find('tr[data-ax6grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n  };\n\n  // left\n  if (this.xvar.frozenColumnIndex > 0) {\n    if (this.xvar.frozenRowIndex > _dindex) {\n      // 상단 행고정\n      replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n    } else {\n      replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n    }\n  }\n\n  // body\n  if (this.xvar.frozenRowIndex > _dindex) {\n    // 상단 행고정\n    replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n  } else {\n    replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n  }\n\n  // body.grouping tr 다시 그리기..\n  if (cfg.body.grouping) {\n    // left\n    if (this.xvar.frozenColumnIndex > 0) {\n      if (this.xvar.frozenRowIndex > _dindex) {\n        // 상단 행고정\n        replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n      }\n      else {\n        replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n      }\n    }\n\n    // body\n    if (this.xvar.frozenRowIndex > _dindex) {\n      // 상단 행고정\n      replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n    }\n    else {\n      replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n    }\n  }\n\n  if (this.xvar.frozenColumnIndex > 0) {\n    if (cfg.footSum && this.needToPaintSum) {\n      // 바닥 요약\n      repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n    }\n  }\n\n  if (cfg.footSum && this.needToPaintSum) {\n    // 바닥 요약\n    repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n  }\n};\n\nconst scrollTo = function (css, opts) {\n  let self = this;\n  if (typeof opts === \"undefined\") opts = {timeoutUnUse: false};\n  if (this.isInlineEditing) {\n    for (var key in this.inlineEditing) {\n      //if(this.inlineEditing[key].editor.type === \"select\") {}\n      // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n      inlineEdit.deActive.call(this, \"ESC\", key);\n    }\n  }\n\n  if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n    this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n  }\n  if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n    this.$.panel[\"left-body-scroll\"].css({top: css.top});\n  }\n  if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n    this.$.panel[\"top-body-scroll\"].css({left: css.left});\n  }\n\n  this.$.panel[\"body-scroll\"].css(css);\n\n  if (this.config.footSum && \"left\" in css) {\n    this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n  }\n\n  // 바디 리페인팅 this.__throttledScroll 은 body init 에서 초기화\n  if (this.__throttledScroll) {\n    this.__throttledScroll(css, opts);\n  } else {\n    if (this.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n      repaint.call(this);\n    } else if (this.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n      repaint.call(this);\n    }\n    if (opts.callback) {\n      opts.callback();\n    }\n  }\n};\n\nconst blur = function () {\n  columnSelect.focusClear.call(this);\n  columnSelect.clear.call(this);\n  if (this.isInlineEditing) {\n    inlineEdit.deActive.call(this);\n  }\n};\n\nconst moveFocus = function (_position) {\n  let focus = {\n    \"UD\": function (_dy) {\n      let moveResult = true,\n        focusedColumn, originalColumn, while_i,\n        nPanelInfo;\n\n      for (let c in this.focusedColumn) {\n        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n        break;\n      }\n\n      if (!focusedColumn) return false;\n\n      originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n      columnSelect.focusClear.call(this);\n      columnSelect.clear.call(this);\n\n      if (_dy > 0) {\n        // 아래로\n        if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n          focusedColumn.dindex = focusedColumn.dindex + _dy;\n          focusedColumn.doindex = focusedColumn.doindex + _dy;\n          focusedColumn.rowIndex = 0;\n          if (focusedColumn.dindex > this.list.length - 1) {\n            focusedColumn.dindex = focusedColumn.doindex = this.list.length - 1;\n            moveResult = false;\n          }\n        } else {\n          focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n        }\n      }\n      else {\n        // 위로\n        if (focusedColumn.rowIndex + _dy < 0) {\n          focusedColumn.dindex = focusedColumn.dindex + _dy;\n          focusedColumn.doindex = focusedColumn.doindex + _dy;\n          focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n          if (focusedColumn.dindex < 0) {\n            focusedColumn.dindex = focusedColumn.doindex = 0;\n            moveResult = false;\n          }\n        } else {\n          focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n        }\n      }\n\n      while_i = 0;\n      while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n        if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n          focusedColumn.colIndex--;\n        } else {\n          focusedColumn.rowIndex--;\n        }\n\n        if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n          // find fail\n          moveResult = false;\n          break;\n        }\n        while_i++;\n      }\n\n      nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n      // if mergeCells\n      if (this.config.body.mergeCells && this.list.length) {\n        while (!this.$.panel[nPanelInfo.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n          if (_dy > 0) {\n            focusedColumn.dindex++;\n          } else {\n            focusedColumn.dindex--;\n          }\n\n          if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n            break;\n          }\n        }\n        nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n      }\n\n      focusedColumn.panelName = nPanelInfo.panelName;\n\n      // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n\n      if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n        if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n          let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;\n          if (newTop < 0) newTop = 0;\n          scrollTo.call(this, {top: -newTop, timeoutUnUse: false});\n          SCROLLER.resize.call(this);\n        }\n        else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n          scrollTo.call(this, {top: (this.xvar.virtualPaintRowCount - 2 - focusedColumn.dindex) * this.xvar.bodyTrHeight, timeoutUnUse: false});\n          SCROLLER.resize.call(this);\n        }\n      }\n\n      this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n      this.$.panel[focusedColumn.panelName]\n        .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n        .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n        .attr('data-ax6grid-column-focused', \"true\");\n\n      return moveResult;\n    },\n    \"LR\": function (_dx) {\n      let moveResult = true,\n        focusedColumn, originalColumn,\n        while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n      for (var c in this.focusedColumn) {\n        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n        break;\n      }\n      if (!focusedColumn) return false;\n\n      originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n      columnSelect.focusClear.call(this);\n      columnSelect.clear.call(this);\n\n      if (_dx < 0) {\n        focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n        if (focusedColumn.colIndex < 0) {\n          focusedColumn.colIndex = 0;\n          moveResult = false;\n        }\n      }\n      else {\n        focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n        if (focusedColumn.colIndex > this.colGroup.length - 1) {\n          focusedColumn.colIndex = this.colGroup.length - 1;\n          moveResult = false;\n        }\n      }\n\n      if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n        focusedColumn.rowIndex = 0;\n      }\n\n      if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n        if (_dx < 0) {\n          while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n            focusedColumn.colIndex--;\n            if (focusedColumn.colIndex <= 0) {\n              // find fail\n              moveResult = false;\n              break;\n            }\n          }\n        } else {\n          while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n            focusedColumn.colIndex++;\n            if (focusedColumn.colIndex >= this.colGroup.length) {\n              // find fail\n              moveResult = false;\n              break;\n            }\n          }\n        }\n      }\n      else {\n        if (_dx < 0) {\n          while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n            focusedColumn.colIndex--;\n            if (focusedColumn.colIndex <= 0) {\n              // find fail\n              moveResult = false;\n              break;\n            }\n          }\n        } else {\n          while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n            focusedColumn.colIndex++;\n            if (focusedColumn.colIndex >= this.colGroup.length) {\n              // find fail\n              moveResult = false;\n              break;\n            }\n          }\n        }\n      }\n\n      nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n      // if mergeCells\n      if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n        while (!this.$.panel[nPanelInfo.panelName]\n          .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n          .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n          focusedColumn.dindex--;\n\n          if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n            break;\n          }\n        }\n        nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n      }\n\n      focusedColumn.panelName = nPanelInfo.panelName;\n\n      // 포커스 컬럼의 위치에 따라 스크롤 처리\n      let isScrollTo = (function () {\n        if (!this.config.virtualScrollX) return false;\n        let scrollLeft = 0;\n        if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n          if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n            scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n            scrollTo.call(this, {left: scrollLeft});\n            HEADER.scrollTo.call(this, {left: scrollLeft});\n            SCROLLER.resize.call(this);\n            return true;\n          }\n          else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n            if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n              scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n              scrollTo.call(this, {left: -scrollLeft});\n              HEADER.scrollTo.call(this, {left: -scrollLeft});\n              SCROLLER.resize.call(this);\n            }\n            return true;\n          }\n        }\n        scrollLeft = null;\n        return false;\n      }).call(this);\n\n      containerPanelName = nPanelInfo.containerPanelName;\n      isScrollPanel = nPanelInfo.isScrollPanel;\n\n      this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n      var $column = this.$.panel[focusedColumn.panelName]\n        .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n        .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n        .attr('data-ax6grid-column-focused', \"true\");\n\n      if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n        // todo : 컬럼이동할 때에도 scrollTo 체크\n        var newLeft = (function () {\n          if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n          } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n            return $column.position().left;\n          } else {\n            return;\n          }\n        }).call(this);\n\n        if (typeof newLeft !== \"undefined\") {\n          HEADER.scrollTo.call(this, {left: -newLeft});\n          scrollTo.call(this, {left: -newLeft});\n          SCROLLER.resize.call(this);\n        }\n      }\n\n      return moveResult;\n    },\n    \"INDEX\": function (_dindex) {\n      let moveResult = true,\n        focusedColumn, originalColumn,\n        while_i;\n\n      for (let c in this.focusedColumn) {\n        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n        break;\n      }\n      if (!focusedColumn) {\n        focusedColumn = {\n          rowIndex: 0,\n          colIndex: 0\n        }\n      }\n      originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n      columnSelect.focusClear.call(this);\n      columnSelect.clear.call(this);\n\n\n      if (_dindex == \"end\") {\n        _dindex = this.list.length - 1;\n      }\n\n      focusedColumn.dindex = _dindex;\n      focusedColumn.rowIndex = 0;\n\n      while_i = 0;\n      while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n        if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n          focusedColumn.colIndex--;\n        } else {\n          focusedColumn.rowIndex--;\n        }\n\n        if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n          // find fail\n          break;\n        }\n        while_i++;\n      }\n\n      let nPanelInfo = UTIL.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n      focusedColumn.panelName = nPanelInfo.panelName;\n\n      // 포커스 컬럼의 위치에 따라 스크롤 처리.\n      (function () {\n        if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n          if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n            SCROLLER.resize.call(this);\n          }\n          else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n            SCROLLER.resize.call(this);\n          }\n        }\n      }).call(this);\n\n      this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n      this.$.panel[focusedColumn.panelName]\n        .find('[data-ax6grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n        .find('[data-ax6grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax6grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n        .attr('data-ax6grid-column-focused', \"true\");\n\n      return moveResult;\n    }\n  };\n\n  let processor = {\n    \"UP\": function () {\n      return focus[\"UD\"].call(this, -1);\n    },\n    \"DOWN\": function () {\n      return focus[\"UD\"].call(this, 1);\n    },\n    \"LEFT\": function () {\n      return focus[\"LR\"].call(this, -1);\n    },\n    \"RIGHT\": function () {\n      return focus[\"LR\"].call(this, 1);\n    },\n    \"HOME\": function () {\n      return focus[\"INDEX\"].call(this, 0);\n    },\n    \"END\": function () {\n      return focus[\"INDEX\"].call(this, \"end\");\n    },\n    \"position\": function (_position) {\n      return focus[\"INDEX\"].call(this, _position);\n    }\n  };\n\n  if (_position in processor) {\n    return processor[_position].call(this);\n  } else {\n    return processor[\"position\"].call(this, _position);\n  }\n};\n\nconst inlineEdit = {\n  active(_focusedColumn, _e, _initValue) {\n    let self = this,\n      dindex, doindex, colIndex, rowIndex, panelName, colspan,\n      col, editor;\n\n    for (var key in _focusedColumn) {\n      panelName = _focusedColumn[key].panelName;\n      dindex = _focusedColumn[key].dindex;\n      doindex = _focusedColumn[key].doindex;\n      colIndex = _focusedColumn[key].colIndex;\n      rowIndex = _focusedColumn[key].rowIndex;\n      colspan = _focusedColumn[key].colspan;\n\n      // 인라인 에디팅을 멈춰야 하는 경우 조건\n      col = this.colGroup[colIndex];\n      if (!(editor = col.editor)) return this;\n\n      // editor disabled 체크\n      if (U.isFunction(editor.disabled)) {\n        if (editor.disabled.call({\n            list: this.list,\n            dindex: dindex,\n            item: this.list[dindex],\n            key: col.key,\n            value: _initValue\n          })) {\n          return this;\n        }\n      }\n\n      // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n      if (!(function (_editor, _type) {\n          if (_editor.type in INLINE_EDITOR) {\n            return (INLINE_EDITOR[_editor.type].editMode == \"popup\");\n          }\n        })(editor)) {\n        // 체크 박스 타입이면 값 변경 시도\n        if (editor.type == \"checkbox\") {\n          let checked, newValue;\n          if (editor.config && editor.config.trueValue) {\n            if (checked = !(_initValue == editor.config.trueValue)) {\n              newValue = editor.config.trueValue;\n            } else {\n              newValue = editor.config.falseValue;\n            }\n          } else {\n            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n          }\n\n          DATA.setValue.call(self, dindex, doindex, col.key, newValue);\n          updateRowState.call(self, [\"cellChecked\"], dindex, doindex, {\n            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n            editorConfig: col.editor.config, checked: checked\n          });\n        }\n        return this;\n      }\n\n      if (this.list[dindex].__isGrouping) {\n        return false;\n      }\n      if (key in this.inlineEditing) {\n        return false;\n      }\n\n      this.inlineEditing[key] = {\n        editor: editor,\n        panelName: panelName,\n        columnKey: key,\n        column: _focusedColumn[key],\n        useReturnToSave: INLINE_EDITOR[editor.type].useReturnToSave\n      };\n      this.isInlineEditing = true;\n    }\n    if (this.isInlineEditing) {\n\n      let originalValue = DATA.getValue.call(self, dindex, doindex, col.key),\n        initValue = (function (__value, __editor) {\n          if (U.isNothing(__value)) {\n            __value = U.isNothing(originalValue) ? \"\" : originalValue;\n          }\n\n          if (__editor.type == \"money\") {\n            return U.number(__value, {\"money\": true});\n          }\n          else {\n            return __value;\n          }\n        }).call(this, _initValue, editor);\n\n      this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n        .find('[data-ax6grid-tr-data-index=\"' + dindex + '\"]')\n        .find('[data-ax6grid-column-rowindex=\"' + rowIndex + '\"][data-ax6grid-column-colindex=\"' + colIndex + '\"]')\n        .find('[data-ax6grid-cellholder]');\n\n      this.inlineEditing[key].$inlineEditor = INLINE_EDITOR[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n      return true;\n    }\n  },\n  deActive(_msg, _key, _value) {\n    // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n    if (!this.inlineEditing[_key]) return this;\n\n    let panelName = this.inlineEditing[_key].panelName,\n      dindex = this.inlineEditing[_key].column.dindex,\n      doindex = this.inlineEditing[_key].column.doindex,\n      rowIndex = this.inlineEditing[_key].column.rowIndex,\n      colIndex = this.inlineEditing[_key].column.colIndex,\n      column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n      editorValue = (function ($inlineEditor) {\n        if (typeof _value === \"undefined\") {\n          if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n            return $inlineEditor.val();\n          } else {\n            _msg = \"CANCEL\";\n            return false;\n          }\n        } else {\n          return _value;\n        }\n      })(this.inlineEditing[_key].$inlineEditor),\n      newValue = (function (__value, __editor) {\n        if (__editor.type == \"money\") {\n          return U.number(__value);\n        }\n        else {\n          return __value;\n        }\n      }).call(this, editorValue, column.editor);\n\n    let action = {\n      \"CANCEL\"(_dindex, _column, _newValue) {\n        action[\"__clear\"].call(this);\n      },\n      \"RETURN\"(_dindex, _doindex, _column, _newValue) {\n        if (DATA.setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {\n          action[\"__clear\"].call(this);\n          repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);\n        } else {\n          action[\"__clear\"].call(this);\n        }\n      },\n      \"__clear\"() {\n        this.isInlineEditing = false;\n        let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n        if (bindedAx5ui == \"ax5picker\") {\n          this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n        } else if (bindedAx5ui == \"ax5select\") {\n          this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n        }\n\n        this.inlineEditing[_key].$inlineEditor.remove();\n        this.inlineEditing[_key].$inlineEditor = null;\n        this.inlineEditing[_key].$inlineEditorCell = null;\n        this.inlineEditing[_key] = undefined;\n        delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n      }\n    };\n\n    if (_msg in action) {\n      action[_msg || \"RETURN\"].call(this, dindex, doindex, column, newValue);\n    } else {\n      action[\"__clear\"].call(this);\n    }\n  },\n  keydown(key, columnKey, _options) {\n    let processor = {\n      \"ESC\"() {\n        for (var columnKey in this.inlineEditing) {\n          inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n        }\n      },\n      \"RETURN\"() {\n        if (this.isInlineEditing) {\n          if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n          } else {\n            return false;\n          }\n        } else {\n\n          for (var k in this.focusedColumn) {\n            let _column = this.focusedColumn[k],\n              column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n              dindex = _column.dindex,\n              doindex = _column.doindex,\n              value = \"\",\n              col = this.colGroup[_column.colIndex];\n\n            if (column) {\n              if (!this.list[dindex].__isGrouping) {\n                value = DATA.getValue.call(this, dindex, doindex, column.key);\n              }\n            }\n\n            if (col.editor && INLINE_EDITOR[col.editor.type].editMode === \"inline\") {\n              if (_options && _options.moveFocus) {\n\n              }\n              else {\n                if (column.editor && column.editor.type == \"checkbox\") {\n                  value = DATA.getValue.call(this, dindex, doindex, column.key);\n\n                  let checked, newValue;\n                  if (column.editor.config && column.editor.config.trueValue) {\n                    // console.log(value, column.editor.config.trueValue);\n\n                    if (value != column.editor.config.trueValue) {\n                      newValue = column.editor.config.trueValue;\n                      checked = true;\n                    } else {\n                      newValue = column.editor.config.falseValue;\n                      checked = false;\n                    }\n                  } else {\n                    newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                  }\n\n                  DATA.setValue.call(this, dindex, doindex, column.key, newValue);\n                  updateRowState.call(this, [\"cellChecked\"], dindex, doindex, {\n                    key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                    editorConfig: column.editor.config, checked: checked\n                  });\n                }\n              }\n            } else {\n              inlineEdit.active.call(this, this.focusedColumn, null, value);\n            }\n          }\n        }\n        return true;\n      }\n    };\n\n    if (key in processor) {\n      processor[key].call(this, key, columnKey, _options);\n    }\n  }\n};\n\nconst getExcelString = function () {\n  let cfg = this.config,\n    list = this.list,\n    bodyRowData = this.bodyRowTable,\n    footSumData = this.footSumTable,\n    bodyGroupingData = this.bodyGroupingTable;\n\n  // body-scroll 의 포지션에 의존적이므로..\n  let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n    let SS = [],\n      di, dl,\n      tri, trl,\n      ci, cl,\n      col, val;\n\n    //SS.push('<table border=\"1\">');\n    for (di = 0, dl = _list.length; di < dl; di++) {\n      let isGroupingRow = false, rowTable;\n\n      if (_groupRow && \"__isGrouping\" in _list[di]) {\n        rowTable = _groupRow;\n        isGroupingRow = true;\n      } else {\n        rowTable = _bodyRow;\n      }\n\n      for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n        SS.push('\\n<tr>');\n        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n          col = rowTable.rows[tri].cols[ci];\n\n          SS.push('<td ',\n            'colspan=\"' + col.colspan + '\" ',\n            'rowspan=\"' + col.rowspan + '\" ',\n            '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, val, \"text\"), '&nbsp;</td>');\n        }\n        SS.push('\\n</tr>');\n      }\n    }\n    //SS.push('</table>');\n    return SS.join('');\n  };\n  let getSum = function (_colGroup, _bodyRow, _list) {\n    let SS = [],\n      tri, trl,\n      ci, cl,\n      col;\n\n    //SS.push('<table border=\"1\">');\n    for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n      SS.push('\\n<tr>');\n      for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n        col = _bodyRow.rows[tri].cols[ci];\n        SS.push('<td ',\n          'colspan=\"' + col.colspan + '\" ',\n          'rowspan=\"' + col.rowspan + '\" ',\n          '>', getSumFieldValue.call(this, _list, col), '</td>');\n      }\n      SS.push('\\n</tr>');\n    }\n    //SS.push('</table>');\n\n    return SS.join('');\n  };\n\n  let po = [];\n  po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n  if (cfg.footSum) {\n    // 바닥 요약\n    po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n  }\n\n  // right\n  if (cfg.rightSum) {\n    // todo : right 표현 정리\n  }\n\n  return po.join('');\n};\n\nconst toggleCollapse = function (_dindex, _doindex, _collapse) {\n  if (DATA.toggleCollapse.call(this, _dindex, _doindex, _collapse)) {\n    this.proxyList = DATA.getProxyList.call(this, this.list);\n    repaint.call(this);\n  }\n};\n\nconst click = function (_dindex, _doindex) {\n  let that = {\n    self: this,\n    page: this.page,\n    list: this.list,\n    item: this.list[_dindex],\n    dindex: _dindex\n  };\n\n  moveFocus.call(this, _dindex);\n\n  if (this.config.body.onClick) {\n    this.config.body.onClick.call(that);\n  }\n\n  that = null;\n  // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax6grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n};\n\nconst dblClick = function (_dindex, _doindex) {\n  let that = {\n    self: this,\n    page: this.page,\n    list: this.list,\n    item: this.list[_dindex],\n    dindex: _dindex\n  };\n\n  moveFocus.call(this, _dindex);\n\n  if (this.config.body.onDBLClick) {\n    this.config.body.onDBLClick.call(that);\n  }\n\n  that = null;\n};\n\nexport default {\n  init: init,\n  repaint: repaint,\n  repaintCell: repaintCell,\n  repaintRow: repaintRow,\n  updateRowState: updateRowState,\n  updateRowStateAll: updateRowStateAll,\n  scrollTo: scrollTo,\n  blur: blur,\n  moveFocus: moveFocus,\n  inlineEdit: inlineEdit,\n  getExcelString: getExcelString,\n  toggleCollapse: toggleCollapse,\n  click: click,\n  dblClick: dblClick\n};"]}