{"version":3,"sources":["AX6UIGrid.js"],"names":["_jqmin","require","_AX6UICore2","_AX6Util","_AX6Info","_AX6Mustache","_AX6UIGrid_data","_AX6UIGrid_header","_AX6UIGrid_body","_AX6UIGrid_scroller","_AX6UIGrid_page","_AX6UIGrid_tmpl","_AX6UIGrid_util","formatter","collector","ctrlKeys","33","34","35","36","37","38","39","40","tmpl","initGrid","data","instanceId","this","id","$target","html","_AX6Mustache2","default","render","__tmpl","main","call","$","container","hidden","find","root","header","body","page","scroller","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","bottom-aside-body","bottom-left-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal","corner","status","form","clipboard","resizer","css","height","config","_height","initColumns","_columns","_AX6Util2","isArray","columns","deepCopy","headerTable","_AX6UIGrid_util2","makeHeaderTable","xvar","frozenColumnIndex","bodyRowTable","makeBodyRowTable","bodyRowMap","makeBodyRowMap","bodyTrHeight","rows","length","columnHeight","colGroupMap","r","rl","row","c","cl","cols","_jqmin2","extend","colGroup","k","push","onResetColumns","resetColGroupWidth","footSum","initFootSum","needToPaintSum","grouping","alignGrid","_AX6UIGrid_header2","repaint","_AX6UIGrid_body2","_AX6UIGrid_scroller2","resize","_this","CT_WIDTH","width","showLineNumber","lineNumberColumnWidth","showRowSelector","rowSelectorColumnWidth","totalWidth","computedWidth","autoWidthColgroupIndexs","i","l","_width","right","left","_footSum","footSumColumns","footSumTable","_grouping","by","makeBodyGroupingTable","bodyGrouping","sortInfo","kl","seq","fixed","key","sortFixed","_isFirst","_this2","Math","min","isNumber","innerHeight","CT_INNER_WIDTH","asidePanelWidth","frozenPanelWidth","endIndex","initBodyGroup","verticalScrollerWidth","horizontalScrollerHeight","bodyHeight","frozenRowHeight","frozenRowIndex","footSumHeight","bodyGroupingTable","headerHeight","display","pageHeight","orderBy","CT_HEIGHT","list","size","totalColGroupWidth","bodyWidth","CT_INNER_HEIGHT","innerWidth","panelDisplayProcess","vPosition","hPosition","containerType","isHide","rightSum","scrollerDisplayProcess","scrollerWidth","scrollerHeight","_sortInfo","isFunction","remoteSort","that","sort","a","b","_AX6UIGrid_data2","initData","clearGroupingData","AX6UIGrid","_ret","_classCallCheck","_this3","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","theme","animateTime","debounceTime","appendDebouncer","appendDebounceTimes","appendProgressIcon","appendProgress","multipleSelect","virtualScrollY","virtualScrollX","virtualScrollYCountMargin","virtualScrollAccelerated","virtualScrollAcceleratedDelayTime","columnMinWidth","sortable","undefined","align","columnPadding","columnBorderWidth","mergeCells","statusDisplay","navigationItemCount","barMinSize","trackPadding","columnKeys","selected","modified","deleted","disableSelection","tree","use","collapsedGroupIcon","itemIcon","selfHash","children","hashDigit","indentWidth","collapsedArrow","groupIcon","parentHash","inlineEditing","listIndexMap","contextMenu","leftHeaderData","headerData","rightHeaderData","leftBodyRowData","bodyRowData","rightBodyRowData","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","bodyGroupingMap","leftFootSumData","footSumData","customFormatter","getFormatter","customCollector","getCollector","assign","_AX6UIGrid_tmpl2","getTmpl","init","_formatter","_collector","_tmpl","_this4","onStateChanged","onLoad","initOnce","target","isObject","error","parseJson","attr","window","on","throttle","e","bind","which","_AX6Info2","eventKeys","ESC","keyDown","originalEvent","RETURN","TAB","stopEvent","metaKey","ctrlKey","self","copySelect","focused","blur","keys","focusedColumn","document","isPickerClick","findParentNode","_target","getAttribute","setTimeout","initialized","_act","_data","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","inlineEdit","active","_e","keydown","activeEditLength","columnKey","shiftKey","copysuccess","$clipBoard","copyTextArray","copyText","_rowIndex","_dindex","_di","selectedColumn","_column","dindex","rowIndex","originalColumn","colIndex","forEach","join","get","select","execCommand","isFirstPaint","paintStartRowIndex","set","_colIndex","_AX6UIGrid_page2","navigationUpdate","scrollTo","top","_type","getList","offsetParent","_row","_options","add","focus","_list","remove","repaintRow","_updateData","updateChild","paintStartColumnIndex","deleteRow","_key","_value","setValue","doindex","repaintCell","_panelName","_rows","__dindex","__doindex","__key","__value","_cindex","first","concat","last","_i","_l","splice","columnResizerIndex","applySortStatus","sortColumns","_selectObject","selectedClear","clearSelect","updateRowState","click","dblClick","selectAll","updateRowStateAll","_fileName","table","getExcelString","EXCEL","export","_pos","selectedDataIndexs","selectedIndex","UP","DOWN","HOME","END","empty"],"mappings":"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","file":"AX6UIGrid.js","sourcesContent":["import jQuery from \"jqmin\";\nimport AX6UICore from \"./AX6UICore.js\";\nimport U from \"./AX6Util\";\nimport info from \"./AX6Info\";\nimport mustache from \"./AX6Mustache\";\n\nimport DATA from \"./AX6UIGrid/AX6UIGrid_data\";\nimport HEADER from \"./AX6UIGrid/AX6UIGrid_header\";\nimport BODY from \"./AX6UIGrid/AX6UIGrid_body\";\nimport SCROLLER from \"./AX6UIGrid/AX6UIGrid_scroller\";\nimport PAGE from \"./AX6UIGrid/AX6UIGrid_page\";\nimport TMPL from \"./AX6UIGrid/AX6UIGrid_tmpl\";\nimport UTIL from \"./AX6UIGrid/AX6UIGrid_util\";\n\nimport \"./AX6UIGrid/index.scss\";\n\n\nlet formatter = {};\nlet collector = {};\nlet ctrlKeys = {\n    \"33\": \"KEY_PAGEUP\",\n    \"34\": \"KEY_PAGEDOWN\",\n    \"35\": \"KEY_END\",\n    \"36\": \"KEY_HOME\",\n    \"37\": \"KEY_LEFT\",\n    \"38\": \"KEY_UP\",\n    \"39\": \"KEY_RIGHT\",\n    \"40\": \"KEY_DOWN\"\n};\nlet tmpl = {};\n\nconst initGrid = function () {\n    // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n    let data = {\n        instanceId: this.id\n    };\n\n    this.$target.html(mustache.render(this.__tmpl.main.call(this), data));\n\n    // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n    this.$ = {\n        \"container\": {\n            \"hidden\": this.$target.find('[data-ax6grid-container=\"hidden\"]'),\n            \"root\": this.$target.find('[data-ax6grid-container=\"root\"]'),\n            \"header\": this.$target.find('[data-ax6grid-container=\"header\"]'),\n            \"body\": this.$target.find('[data-ax6grid-container=\"body\"]'),\n            \"page\": this.$target.find('[data-ax6grid-container=\"page\"]'),\n            \"scroller\": this.$target.find('[data-ax6grid-container=\"scroller\"]')\n        },\n        \"panel\": {\n            \"aside-header\": this.$target.find('[data-ax6grid-panel=\"aside-header\"]'),\n            \"left-header\": this.$target.find('[data-ax6grid-panel=\"left-header\"]'),\n            \"header\": this.$target.find('[data-ax6grid-panel=\"header\"]'),\n            \"header-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"header\"]'),\n            \"right-header\": this.$target.find('[data-ax6grid-panel=\"right-header\"]'),\n            \"top-aside-body\": this.$target.find('[data-ax6grid-panel=\"top-aside-body\"]'),\n            \"top-left-body\": this.$target.find('[data-ax6grid-panel=\"top-left-body\"]'),\n            \"top-body\": this.$target.find('[data-ax6grid-panel=\"top-body\"]'),\n            \"top-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"top-body\"]'),\n            \"top-right-body\": this.$target.find('[data-ax6grid-panel=\"top-right-body\"]'),\n            \"aside-body\": this.$target.find('[data-ax6grid-panel=\"aside-body\"]'),\n            \"aside-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"aside-body\"]'),\n            \"left-body\": this.$target.find('[data-ax6grid-panel=\"left-body\"]'),\n            \"left-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"left-body\"]'),\n            \"body\": this.$target.find('[data-ax6grid-panel=\"body\"]'),\n            \"body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"body\"]'),\n            \"right-body\": this.$target.find('[data-ax6grid-panel=\"right-body\"]'),\n            \"right-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"right-body\"]'),\n            \"bottom-aside-body\": this.$target.find('[data-ax6grid-panel=\"bottom-aside-body\"]'),\n            \"bottom-left-body\": this.$target.find('[data-ax6grid-panel=\"bottom-left-body\"]'),\n            \"bottom-body\": this.$target.find('[data-ax6grid-panel=\"bottom-body\"]'),\n            \"bottom-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"bottom-body\"]'),\n            \"bottom-right-body\": this.$target.find('[data-ax6grid-panel=\"bottom-right-body\"]')\n        },\n        \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n        \"scroller\": {\n            \"vertical\": this.$target.find('[data-ax6grid-scroller=\"vertical\"]'),\n            \"vertical-bar\": this.$target.find('[data-ax6grid-scroller=\"vertical-bar\"]'),\n            \"horizontal\": this.$target.find('[data-ax6grid-scroller=\"horizontal\"]'),\n            \"horizontal-bar\": this.$target.find('[data-ax6grid-scroller=\"horizontal-bar\"]'),\n            \"corner\": this.$target.find('[data-ax6grid-scroller=\"corner\"]')\n        },\n        \"page\": {\n            \"navigation\": this.$target.find('[data-ax6grid-page=\"navigation\"]'),\n            \"status\": this.$target.find('[data-ax6grid-page=\"status\"]')\n        },\n        \"form\": {\n            \"clipboard\": this.$target.find('[data-ax6grid-form=\"clipboard\"]')\n        },\n        \"resizer\": {\n            \"vertical\": this.$target.find('[data-ax6grid-resizer=\"vertical\"]'),\n            \"horizontal\": this.$target.find('[data-ax6grid-resizer=\"horizontal\"]')\n        }\n    };\n\n    this.$[\"container\"][\"root\"].css({height: this.config.height || this.config._height});\n\n    return this;\n};\nconst initColumns = function (_columns) {\n    if(!U.isArray(_columns)) _columns = [];\n    this.columns = U.deepCopy(_columns);\n    this.headerTable = UTIL.makeHeaderTable.call(this, this.columns);\n    this.xvar.frozenColumnIndex = this.config.frozenColumnIndex || 0;\n\n    this.bodyRowTable = UTIL.makeBodyRowTable.call(this, this.columns);\n    this.bodyRowMap = UTIL.makeBodyRowMap.call(this, this.bodyRowTable);\n    // 바디에 표현될 한줄의 높이를 계산합니다.\n    this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n    let colGroupMap = {};\n    for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n        let row = this.headerTable.rows[r];\n        for (let c = 0, cl = row.cols.length; c < cl; c++) {\n            colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n        }\n    }\n\n    this.colGroup = [];\n    for (var k in colGroupMap) {\n        this.colGroup.push(colGroupMap[k]);\n    }\n\n    return this;\n};\nconst onResetColumns = function () {\n    initColumns.call(this, this.config.columns);\n    resetColGroupWidth.call(this);\n    if (this.config.footSum) {\n        initFootSum.call(this, this.config.footSum);\n        this.needToPaintSum = true;\n    }\n    if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n    alignGrid.call(this, true);\n    HEADER.repaint.call(this, true);\n    BODY.repaint.call(this, true);\n    SCROLLER.resize.call(this);\n};\nconst resetColGroupWidth = function () {\n    /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n    let CT_WIDTH = this.$[\"container\"][\"root\"].width() - (() => {\n            let width = 0;\n            if (this.config.showLineNumber) width += this.config.lineNumberColumnWidth;\n            if (this.config.showRowSelector) width += this.config.rowSelectorColumnWidth;\n            width += this.config.scroller.size;\n            return width;\n        })(),\n        totalWidth = 0, computedWidth, autoWidthColgroupIndexs = [],\n        colGroup = this.colGroup,\n        i, l;\n\n    for (i = 0, l = colGroup.length; i < l; i++) {\n        if (U.isNumber(colGroup[i].width)) {\n            totalWidth += colGroup[i]._width = colGroup[i].width;\n        } else if (colGroup[i].width === \"*\") {\n            autoWidthColgroupIndexs.push(i);\n        } else if (U.right(colGroup[i].width, 1) === \"%\") {\n            totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n        }\n    }\n    if (autoWidthColgroupIndexs.length > 0) {\n        computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n        for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n            colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n        }\n    }\n};\nconst initFootSum = function (_footSum) {\n    if (U.isArray(_footSum)) {\n        this.footSumTable = UTIL.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n    } else {\n        this.footSumColumns = [];\n        this.footSumTable = {};\n    }\n};\nconst initBodyGroup = function (_grouping) {\n    let grouping = jQuery.extend({}, _grouping);\n    if (\"by\" in grouping && \"columns\" in grouping) {\n        this.bodyGrouping = {\n            by: grouping.by,\n            columns: grouping.columns\n        };\n        this.bodyGroupingTable = UTIL.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n        this.sortInfo = (function () {\n            let sortInfo = {};\n            for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                sortInfo[this.bodyGrouping.by[k]] = {\n                    orderBy: \"asc\",\n                    seq: k,\n                    fixed: true\n                };\n                for (let c = 0, cl = this.colGroup.length; c < cl; c++) {\n                    if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                        this.colGroup[c].sort = \"asc\";\n                        this.colGroup[c].sortFixed = true;\n                    }\n                }\n            }\n            return sortInfo;\n        }).call(this);\n    } else {\n        this.config.body.grouping = false;\n    }\n};\nconst alignGrid = function (_isFirst) {\n    // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\n    if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\n        return false;\n    }\n\n    if (!this.config.height) {\n        this.$[\"container\"][\"root\"].css({height: this.config._height = this.$target.height()});\n    }\n\n    let CT_WIDTH = this.$[\"container\"][\"root\"].width(),\n        CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\n        CT_INNER_WIDTH = CT_WIDTH,\n        CT_INNER_HEIGHT = CT_HEIGHT,\n        asidePanelWidth = this.config.asidePanelWidth = (() => {\n            let width = 0;\n            if (this.config.showLineNumber) width += this.config.lineNumberColumnWidth;\n            if (this.config.showRowSelector) width += this.config.rowSelectorColumnWidth;\n            return width;\n        })(),\n        frozenPanelWidth = this.config.frozenPanelWidth = ((colGroup, endIndex) => {\n            let width = 0;\n            for (let i = 0, l = endIndex; i < l; i++) {\n                width += colGroup[i]._width;\n            }\n            return width;\n        })(this.colGroup, this.config.frozenColumnIndex),\n        verticalScrollerWidth, horizontalScrollerHeight, bodyHeight;\n\n    // todo : 우측 함계컬럼 너비 계산\n    let rightPanelWidth = 0,\n        frozenRowHeight = this.config.frozenRowIndex * this.xvar.bodyTrHeight,\n        footSumHeight = this.footSumColumns.length * this.xvar.bodyTrHeight,\n        headerHeight = (this.config.header.display) ? this.headerTable.rows.length * this.config.header.columnHeight : 0,\n        pageHeight = (this.config.page.display) ? this.config.page.height : 0;\n\n    {\n        verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n        // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n        horizontalScrollerHeight = (() => {\n            let totalColGroupWidth = 0;\n            // aside 빼고 너비\n            // 수직 스크롤이 있으면 또 빼고 비교\n            let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n            for (let i = 0, l = this.colGroup.length; i < l; i++) {\n                totalColGroupWidth += this.colGroup[i]._width;\n            }\n            return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\n        })();\n\n        if (horizontalScrollerHeight > 0) {\n            verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n        }\n    }\n\n    // 수평 너비 결정\n    CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n    // 수직 스크롤러의 높이 결정.\n    CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n    bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n    const panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\n        let css = {\n                display: \"block\"\n            },\n            isHide = false;\n\n        switch (hPosition) {\n            case \"aside\":\n                if (asidePanelWidth === 0) {\n                    isHide = true;\n                } else {\n                    css[\"left\"] = 0;\n                    css[\"width\"] = asidePanelWidth;\n                }\n                break;\n            case \"left\":\n                if (this.config.frozenColumnIndex === 0) {\n                    isHide = true;\n                } else {\n                    css[\"left\"] = asidePanelWidth;\n                    css[\"width\"] = frozenPanelWidth;\n                }\n                break;\n            case \"right\":\n                if (!this.config.rightSum) {\n                    isHide = true;\n                } else {\n\n                }\n                break;\n            default:\n                if (containerType !== \"page\") {\n                    if (this.config.frozenColumnIndex === 0) {\n                        css[\"left\"] = asidePanelWidth;\n                    } else {\n                        css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                    }\n                    css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                }\n                break;\n        }\n\n        if (isHide) {\n            panel.css({display: \"none\"});\n            // 프로세스 중지\n            return this;\n        }\n\n        if (containerType === \"body\") {\n            switch (vPosition) {\n                case \"top\":\n                    if (this.config.frozenRowIndex == 0) {\n                        isHide = true;\n                    } else {\n                        css[\"top\"] = 0;\n                        css[\"height\"] = frozenRowHeight;\n                    }\n                    break;\n                case \"bottom\":\n                    if (!this.config.footSum) {\n                        isHide = true;\n                    } else {\n                        css[\"top\"] = bodyHeight - footSumHeight;\n                        css[\"height\"] = footSumHeight; // footSum height\n                    }\n                    break;\n                default:\n                    css[\"top\"] = frozenRowHeight;\n                    css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                    break;\n            }\n        } else if (containerType === \"header\") {\n            css[\"height\"] = headerHeight;\n        } else if (containerType === \"page\") {\n            if (pageHeight == 0) {\n                isHide = true;\n            } else {\n                css[\"height\"] = pageHeight;\n\n            }\n        }\n\n        if (isHide) {\n            panel.css({display: \"none\"});\n            // 프로세스 중지\n            return this;\n        }\n\n        panel.css(css);\n        return this;\n    };\n    const scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\n        let css = {\n                display: \"block\"\n            },\n            isHide = false;\n\n        switch (containerType) {\n            case \"vertical\":\n                if (scrollerWidth > 0) {\n                    css[\"width\"] = scrollerWidth;\n                    css[\"height\"] = CT_INNER_HEIGHT;\n                    css[\"bottom\"] = scrollerHeight + pageHeight;\n                } else {\n                    isHide = true;\n                }\n                break;\n            case \"horizontal\":\n                if (scrollerHeight > 0) {\n                    css[\"width\"] = CT_INNER_WIDTH;\n                    css[\"height\"] = scrollerHeight;\n                    css[\"right\"] = scrollerWidth;\n                    css[\"bottom\"] = pageHeight;\n                } else {\n                    isHide = true;\n                }\n                break;\n            case \"corner\":\n                if (scrollerWidth > 0 && scrollerHeight > 0) {\n                    css[\"width\"] = scrollerWidth;\n                    css[\"height\"] = scrollerHeight;\n                    css[\"bottom\"] = pageHeight;\n                } else {\n                    isHide = true;\n                }\n                break;\n        }\n\n        if (isHide) {\n            panel.css({display: \"none\"});\n            // 프로세스 중지\n            return this;\n        }\n\n        panel.css(css);\n    };\n\n    this.$[\"container\"][\"header\"].css({height: headerHeight});\n    this.$[\"container\"][\"body\"].css({height: bodyHeight});\n\n    // 각 패널들의 크기 표시여부를 결정합니다\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n\n    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n    panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n\n    // 각 패널의 사이즈 결정\n    /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.\n    this.xvar.bodyHeight = this.$.panel[\"body\"].height();\n    this.xvar.bodyWidth = this.$.panel[\"body\"].width();\n    // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth\n\n    return true;\n};\nconst sortColumns = function (_sortInfo) {\n    HEADER.repaint.call(this);\n\n    if (U.isFunction(this.config.remoteSort)) {\n        let that = {sortInfo: []};\n        for (let k in _sortInfo) {\n            that.sortInfo.push({\n                key: k,\n                orderBy: _sortInfo[k].orderBy,\n                seq: _sortInfo[k].seq\n            });\n        }\n        that.sortInfo.sort(function (a, b) {\n            return a.seq > b.seq;\n        });\n        this.config.remoteSort.call(that, that);\n    } else {\n        if (this.config.body.grouping) {\n            this.list = DATA.initData.call(this,\n                DATA.sort.call(this,\n                    _sortInfo,\n                    DATA.clearGroupingData.call(this,\n                        this.list\n                    )\n                )\n            );\n        }\n        else {\n            this.list = DATA.sort.call(this, _sortInfo,\n                DATA.clearGroupingData.call(this,\n                    this.list\n                ),\n                {resetLineNumber: true}\n            );\n        }\n        BODY.repaint.call(this, true);\n        SCROLLER.resize.call(this);\n    }\n};\n\n\n/**\n * @class\n */\nclass AX6UIGrid extends AX6UICore {\n\n    /**\n     * @static\n     * @param _formatter\n     */\n    static setFormatter(_formatter) {\n        return formatter = Object.assign(formatter, _formatter);\n    }\n\n    /**\n     * @static\n     * @return {{}}\n     */\n    static getFormatter() {\n        return formatter || {};\n    }\n\n    /**\n     * @static\n     * @param _collector\n     */\n    static setCollector(_collector) {\n        return collector = Object.assign(collector, _collector);\n    }\n\n    /**\n     * @static\n     * @return {{}}\n     */\n    static getCollector() {\n        return collector || {};\n    }\n\n    /**\n     * @static\n     * @param _tmpl\n     */\n    static setTmpl(_tmpl){\n        return tmpl = Object.assign(tmpl, _tmpl);\n    }\n\n    static getTmpl(){\n        return tmpl || {};\n    }\n\n    /**\n     * @constructor\n     * @param config\n     */\n    constructor(config) {\n        super();\n\n        /**\n         * @member {JSON}\n         * @param config\n         * @param {Element} config.target\n         * @param {Number} [config.frozenColumnIndex=0]\n         * @param {Number} [config.frozenRowIndex=0]\n         * @param {Boolean} [config.showLineNumber=false]\n         * @param {Boolean} [config.showRowSelector=false]\n         * @param {Boolean} [config.multipleSelect=true]\n         * @param {Number} [config.columnMinWidth=100]\n         * @param {Number} [config.lineNumberColumnWidth=30]\n         * @param {Number} [config.rowSelectorColumnWidth=25]\n         * @param {Boolean} [config.sortable=false]\n         * @param {Boolean} [config.multiSort=false]\n         * @param {Function} [config.remoteSort=false]\n         * @param {Boolean} [config.virtualScrollY=true] - 세로축 가상스크롤 처리여부\n         * @param {Boolean} [config.virtualScrollX=true] - 가로축 가상스크롤 처리여부\n         * @param {Object} [config.header]\n         * @param {String} [config.header.align]\n         * @param {Number} [config.header.columnHeight=25]\n         * @param {Number} [config.header.columnPadding=3]\n         * @param {Number} [config.header.columnBorderWidth=1]\n         * @param {Object} [config.body]\n         * @param {Function} [config.body.onClick]\n         * @param {Function} [config.body.onDBLClick]\n         * @param {Function} [config.body.onDataChanged]\n         * @param {Function} [config.body.onContextMenu]\n         * @param {String|Array} [config.body.mergeCells=false] -\n         * @param {String} [config.body.align]\n         * @param {Number} [config.body.columnHeight=25]\n         * @param {Number} [config.body.columnPadding=3]\n         * @param {Number} [config.body.columnBorderWidth=1]\n         * @param {Object} [config.body.grouping]\n         * @param {Array} [config.body.grouping.by] - list grouping keys\n         * @param {Array} [config.body.grouping.columns] - list grouping columns\n         * @param {(String|Function)} [config.body.trStyleClass]\n         * @param {Object} [config.page]\n         * @param {Number} [config.page.height=25]\n         * @param {Boolean} [config.page.display=true] - grid page display\n         * @param {Boolean} [config.page.statusDisplay=true] - grid status display\n         * @param {Number} [config.page.navigationItemCount=5]\n         * @param {Object} [config.scroller]\n         * @param {Number} [config.scroller.size=15]\n         * @param {Number} [config.scroller.barMinSize=15]\n         * @param {Number} [config.scroller.trackPadding=4]\n         * @param {Object} [config.columnKeys]\n         * @param {String} [config.columnKeys.selected=\"_SELECTED\"]\n         * @param {Object[]} config.columns\n         * @param {String} config.columns[].key\n         * @param {String} config.columns[].label\n         * @param {Number} config.columns[].width\n         * @param {(String|Function)} config.columns[].styleClass\n         * @param {(String|Function)} config.columns[].headerStyleClass\n         * @param {Boolean} config.columns[].enableFilter\n         * @param {Boolean} config.columns[].sortable\n         * @param {String} config.columns[].align\n         * @param {(String|Function)} config.columns[].formatter\n         * @param {Object} config.columns[].editor\n         * @param {String} config.columns[].editor.type - text,number,money,date\n         * @param {Object} config.columns[].editor.config\n         * @param {Array} config.columns[].editor.updateWith\n         * @param {Function} config.columns[].editor.disabled - disable editor\n         * @param {Boolean} [config.columns[].multiLine=false]\n         * @param {Object} [config.tree]\n         * @param {Boolean} [config.tree.use=false] - Whether tree-type data is used\n         * @param {Number} [config.tree.hashDigit=8]\n         * @param {Number} [config.tree.indentWidth=10]\n         * @param {Number} [config.tree.arrowWidth=15]\n         * @param {Number} [config.tree.iconWidth=18]\n         * @param {Object} [config.tree.icons]\n         * @param {String} [config.tree.icons.openedArrow='▾']\n         * @param {String} [config.tree.icons.collapsedArrow='▸']\n         * @param {String} [config.tree.icons.groupIcon='⊚']\n         * @param {String} [config.tree.icons.collapsedGroupIcon='⊚']\n         * @param {String} [config.tree.icons.itemIcon='⊙']\n         * @param {Object} [config.tree.columnKeys]\n         * @param {String} [config.tree.columnKeys.parentKey=\"pid\"]\n         * @param {String} [config.tree.columnKeys.selfKey=\"id\"]\n         * @param {String} [config.tree.columnKeys.collapse=\"collapse\"]\n         * @param {String} [config.tree.columnKeys.hidden=\"hidden\"]\n         * @param {String} [config.tree.columnKeys.parentHash=\"__hp__\"]\n         * @param {String} [config.tree.columnKeys.selfHash=\"__hs__\"]\n         * @param {String} [config.tree.columnKeys.children=\"__children__\"]\n         * @param {String} [config.tree.columnKeys.depth=\"__depth__\"]\n         */\n        this.config = {\n            theme: 'default',\n            animateTime: 250,\n            debounceTime: 250,\n            appendDebouncer: null,\n            appendDebounceTimes: 0,\n            appendProgressIcon: '...',\n            appendProgress: false,\n\n            // 틀고정 속성\n            frozenColumnIndex: 0,\n            frozenRowIndex: 0,\n            showLineNumber: false,\n            showRowSelector: false,\n            multipleSelect: true,\n            virtualScrollY: true,\n            virtualScrollX: true,\n\n            // 스크롤될 때 body 페인팅 딜레이를 주어 성능이 좋은 않은 브라우저에서 반응을 빠르게 할 때 사용하는 옵션들\n            virtualScrollYCountMargin: 0,\n            virtualScrollAccelerated: true,\n            virtualScrollAcceleratedDelayTime: 10,\n\n            height: 0,\n            columnMinWidth: 100,\n            lineNumberColumnWidth: 30,\n            rowSelectorColumnWidth: 26,\n            sortable: undefined,\n            remoteSort: false,\n\n            header: {\n                display: true,\n                align: false,\n                columnHeight: 26,\n                columnPadding: 3,\n                columnBorderWidth: 1\n            },\n            body: {\n                align: false,\n                columnHeight: 26,\n                columnPadding: 3,\n                columnBorderWidth: 1,\n                grouping: false,\n                mergeCells: false\n            },\n            rightSum: false,\n            footSum: false,\n            page: {\n                height: 25,\n                display: true,\n                statusDisplay: true,\n                navigationItemCount: 5\n            },\n            scroller: {\n                size: 15,\n                barMinSize: 15,\n                trackPadding: 4\n            },\n            columnKeys: {\n                selected: '__selected__',\n                modified: '__modified__',\n                deleted: '__deleted__',\n                disableSelection: '__disable_selection__'\n            },\n            tree: {\n                use: false,\n                hashDigit: 8,\n                indentWidth: 10,\n                arrowWidth: 15,\n                iconWidth: 18,\n                icons: {\n                    openedArrow: '▾',\n                    collapsedArrow: '▸',\n                    groupIcon: '⊚',\n                    collapsedGroupIcon: '⊚',\n                    itemIcon: '⊙'\n                },\n                columnKeys: {\n                    parentKey: \"pid\",\n                    selfKey: \"id\",\n                    collapse: \"collapse\",\n                    hidden: \"hidden\",\n                    parentHash: \"__hp__\",\n                    selfHash: \"__hs__\",\n                    children: \"__children__\",\n                    depth: \"__depth__\",\n                }\n            }\n        };\n        jQuery.extend(true, this.config, config);\n\n        // 멤버 변수 초기화\n        /**\n         * @member {Object}\n         */\n        this.xvar = {\n            bodyTrHeight: 0, // 한줄의 높이\n            scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n            scrollContentHeight: 0, // 스크롤 된 내용물의 높이\n            scrollTimer: null\n        };\n\n        // 그리드 데이터셋\n        /**\n         * @member {Array}\n         */\n        this.columns = []; // config.columns에서 복제된 오브젝트\n        /**\n         * @member {Array}\n         */\n        this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n        /**\n         * @member {Array}\n         */\n        this.footSumColumns = [];\n        /**\n         * @member {Object}\n         */\n        this.bodyGrouping = {};\n        /**\n         * @member {Array}\n         */\n        this.list = []; // 그리드의 데이터\n        /**\n         * @member {Array}\n         */\n        this.proxyList = null; // 그리드 데이터의 대리자\n        /**\n         * @member {Object}\n         */\n        this.page = {}; // 그리드의 페이지 정보\n\n        this.selectedDataIndexs = [];\n        this.deletedList = [];\n\n        /**\n         * @member {Object}\n         */\n        this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n        this.focused = false;\n        /**\n         * @member {Object}\n         */\n        this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n        /**\n         * @member {Object}\n         */\n        this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n        this.isInlineEditing = false;\n        /**\n         * @member {Object}\n         */\n        this.inlineEditing = {};\n        /**\n         * @member {Object}\n         */\n        this.listIndexMap = {}; // tree데이터 사용시 데이터 인덱싱 맵\n        /**\n         * @member {Object}\n         */\n        this.contextMenu = null; // contentMenu 의 인스턴스\n\n        // header\n        /**\n         * @member {Object}\n         */\n        this.headerTable = {};\n        /**\n         * @member {Object}\n         */\n        this.leftHeaderData = {};\n        /**\n         * @member {Object}\n         */\n        this.headerData = {};\n        /**\n         * @member {Object}\n         */\n        this.rightHeaderData = {};\n\n        // body\n        /**\n         * @member {Object}\n         */\n        this.bodyRowTable = {};\n        /**\n         * @member {Object}\n         */\n        this.leftBodyRowData = {};\n        /**\n         * @member {Object}\n         */\n        this.bodyRowData = {};\n        /**\n         * @member {Object}\n         */\n        this.rightBodyRowData = {};\n        /**\n         * @member {Object}\n         */\n        this.bodyRowMap = {};\n\n        /**\n         * @member {Object}\n         */\n        this.bodyGroupingTable = {};\n        /**\n         * @member {Object}\n         */\n        this.leftBodyGroupingData = {};\n        /**\n         * @member {Object}\n         */\n        this.bodyGroupingData = {};\n        /**\n         * @member {Object}\n         */\n        this.rightBodyGroupingData = {};\n        /**\n         * @member {Object}\n         */\n        this.bodyGroupingMap = {};\n\n        // footSum\n        /**\n         * @member {Object}\n         */\n        this.footSumTable = {}; // footSum의 출력레이아웃\n        /**\n         * @member {Object}\n         */\n        this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n        /**\n         * @member {Object}\n         */\n        this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n        /**\n         * @member {Boolean}\n         */\n        this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n        /**\n         * 사용자 정의 formatter. AX6UIGrid.setFormatter 를 이용하여 확장\n         * @member\n         */\n        this.customFormatter = AX6UIGrid.getFormatter();\n\n        /**\n         * 사용자 정의 collector. AX6UIGrid.setCollector 를 이용하여 확장\n         * @member\n         */\n        this.customCollector = AX6UIGrid.getCollector();\n\n        this.__tmpl = Object.assign(TMPL, AX6UIGrid.getTmpl());\n\n        if (typeof config !== \"undefined\") this.init();\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param config\n     */\n    init() {\n        // 그리드의 이벤트 정의 구간\n        this.onStateChanged = this.config.onStateChanged;\n        this.onLoad = this.config.onLoad;\n\n        // init 호출 여부\n        this.initOnce();\n\n        if (typeof this.config.target !== \"undefined\") {\n\n            this.$target = jQuery(this.config.target);\n\n            // target attribute data\n            (function (data) {\n                if (U.isObject(data) && !data.error) {\n                    this.config = jQuery.extend(true, {}, this.config, data);\n                }\n            }).call(this, U.parseJson(this.$target.attr(\"data-ax6ui-grid-config\"), true));\n\n            if (!this.config.height) {\n                this.config._height = this.$target.height();\n            }\n\n            if (!this.id) this.id = this.$target.data(\"ax6ui-grid-id\");\n            if (!this.id) {\n                this.id = 'ax6ui-grid-' + this.instanceId;\n                this.$target.data(\"ax6ui-grid-id\", this.id);\n            }\n\n            DATA.init.call(this);\n\n            if (this.config.tree.use) { // 트리라면\n                this.sortInfo = {};\n                this.sortInfo[this.config.tree.columnKeys.selfHash] = {orderBy: \"asc\", seq: 0, fixed: true};\n            }\n\n            ///========\n            // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n            initGrid.call(this);\n\n            // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n            initColumns.call(this, this.config.columns);\n            resetColGroupWidth.call(this);\n\n            // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n            if (this.config.footSum) initFootSum.call(this, this.config.footSum);\n\n            // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n            if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n\n            // 그리드의 각 요소의 크기를 맞춤니다.\n            alignGrid.call(this, true);\n\n            // columns의 데이터로 header데이터를 만들고\n            HEADER.init.call(this);\n            // header를 출력합니다.\n            HEADER.repaint.call(this);\n\n            // columns의 데이터로 body데이터를 만들고\n            BODY.init.call(this);\n            // body를 출력합니다.\n            BODY.repaint.call(this);\n\n            // scroller\n            SCROLLER.init.call(this);\n            SCROLLER.resize.call(this);\n\n            jQuery(window)\n                .on(\"resize.ax6grid-\" + this.id, U.throttle(function (e) {\n                    alignGrid.call(this);\n                    SCROLLER.resize.call(this);\n                    BODY.repaint.call(this);  // window resize시 repaint 함수 호출\n                }, 30).bind(this))\n                .on(\"keydown.ax6grid-\" + this.instanceId, (e) => {\n                    if (this.focused) {\n                        if (this.isInlineEditing) {\n                            if (e.which == info.eventKeys.ESC) {\n                                this.keyDown(\"ESC\", e.originalEvent);\n                            }\n                            else if (e.which == info.eventKeys.RETURN) {\n                                this.keyDown(\"RETURN\", e.originalEvent);\n                            }\n                            else if (e.which == info.eventKeys.TAB) {\n                                this.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == info.eventKeys.UP) {\n                                this.keyDown(\"RETURN\", {shiftKey: true});\n                            }\n                            else if (e.which == info.eventKeys.DOWN) {\n                                this.keyDown(\"RETURN\", {});\n                            }\n                        }\n                        else {\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) { // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    this.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\n                                    U.stopEvent(e);\n                                } else if (e.which == info.eventKeys.ESC) {\n                                    if (this.focused) {\n                                        BODY.blur.call(self);\n                                    }\n                                } else if (e.which == info.eventKeys.RETURN || e.which == info.eventKeys.SPACE) {\n                                    this.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (Object.keys(this.focusedColumn).length) {\n                                    this.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n                        }\n                    }\n                });\n\n            jQuery(document.body).on(\"click.ax6grid-\" + this.id, (e) => {\n                let isPickerClick = false,\n                    target = U.findParentNode(e.target, function (_target) {\n                        if (isPickerClick = _target.getAttribute(\"data-ax6grid-inline-edit-picker\")) {\n                            return true;\n                        }\n                        return _target.getAttribute(\"data-ax6grid-container\") === \"root\";\n                    });\n\n                if (target && target.getAttribute(\"data-ax6grid-instance\") === this.id) {\n                    this.focused = true;\n                } else {\n                    this.focused = false;\n                    BODY.blur.call(this);\n                }\n            });\n\n\n            // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n            setTimeout(() => {\n                if (this.onLoad) {\n                    this.onLoad.call({\n                        self: this\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * @method\n     */\n    initOnce() {\n        if (this.initialized) return this;\n        this.initialized = true;\n    }\n\n    /**\n     * 그리드의 각 패널들의 크기를 변경된 설정에 맞추어 다시 그림\n     * @method\n     * @return {AX6UIGrid}\n     */\n    align(){\n        if (alignGrid.call(this)) {\n            BODY.repaint.call(this);\n            SCROLLER.resize.call(this);\n        }\n        return this;\n    }\n\n    /**\n     * 그리드에 키보드 액션을 전달\n     * @method\n     * @param _act\n     * @param _data\n     * @return {AX6UIGrid}\n     */\n    keyDown(_act, _data){\n        const processor = {\n            \"KEY_UP\": function () {\n                BODY.moveFocus.call(this, \"UP\");\n            },\n            \"KEY_DOWN\": function () {\n                BODY.moveFocus.call(this, \"DOWN\");\n            },\n            \"KEY_LEFT\": function () {\n                BODY.moveFocus.call(this, \"LEFT\");\n            },\n            \"KEY_RIGHT\": function () {\n                BODY.moveFocus.call(this, \"RIGHT\");\n            },\n            \"KEY_HOME\": function () {\n                BODY.moveFocus.call(this, \"HOME\");\n            },\n            \"KEY_END\": function () {\n                BODY.moveFocus.call(this, \"END\");\n            },\n            \"INLINE_EDIT\": function (_e) {\n                BODY.inlineEdit.active.call(this, this.focusedColumn, _e);\n                if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                    U.stopEvent(_e);\n                }\n            },\n            \"ESC\": function (_e) {\n                BODY.inlineEdit.keydown.call(this, \"ESC\");\n            },\n            \"RETURN\": function (_e) {\n                var activeEditLength = 0;\n                for (var columnKey in this.inlineEditing) {\n                    activeEditLength++;\n\n                    if(!BODY.inlineEdit.keydown.call(this, \"RETURN\", columnKey)){\n                        return false;\n                        U.stopEvent(_e);\n                    }\n                    // next focus\n                    if (activeEditLength == 1) {\n                        if (BODY.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\n                            BODY.inlineEdit.keydown.call(this, \"RETURN\");\n                        }\n                    }\n                }\n                if (activeEditLength == 0) {\n                    BODY.inlineEdit.keydown.call(this, \"RETURN\");\n                    U.stopEvent(_e);\n                } else {\n\n                }\n            },\n            \"TAB\": function (_e) {\n\n                var activeEditLength = 0;\n                for (var columnKey in this.inlineEditing) {\n                    activeEditLength++;\n\n                    BODY.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\n                    // next focus\n                    if (activeEditLength == 1) {\n                        if (BODY.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\n                            BODY.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\n                        }\n                    }\n                }\n            }\n        };\n        if (_act in processor) processor[_act].call(this, _data);\n        return this;\n    }\n\n    /**\n     * 선택된 셀을 클립보드에 복사합니다\n     * @method\n     * @return {*}\n     */\n    copySelect(){\n        let copysuccess,\n            $clipBoard = this.$[\"form\"][\"clipboard\"],\n            copyTextArray = [], copyText = \"\",\n            _rowIndex, _colIndex, _dindex, _di = 0;\n\n        for (let c in this.selectedColumn) {\n            let _column = this.selectedColumn[c];\n\n            if (_column) {\n                if (typeof _dindex === \"undefined\") {\n                    _dindex = _column.dindex;\n                    _rowIndex = _column.rowIndex;\n                    _colIndex = _column.rowIndex;\n                }\n\n                if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                    _di++;\n                }\n\n                if (!copyTextArray[_di]) {\n                    copyTextArray[_di] = [];\n                }\n                let originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                if (originalColumn) {\n                    if (this.list[_column.dindex].__isGrouping) {\n                        copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                    } else {\n                        copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                    }\n                } else {\n                    copyTextArray[_di].push(\"\");\n                }\n\n                _dindex = _column.dindex;\n                _rowIndex = _column.rowIndex;\n            }\n        }\n\n        copyTextArray.forEach(function (r) {\n            copyText += r.join('\\t') + \"\\n\";\n        });\n\n        $clipBoard.get(0).innerText = copyText;\n        $clipBoard.select();\n\n        try {\n            copysuccess = document.execCommand(\"copy\");\n        } catch (e) {\n            copysuccess = false;\n        }\n        return copysuccess;\n    }\n\n    /**\n     * @method\n     * @param _data\n     * @return {AX6UIGrid}\n     * @example\n     * ```js\n     * import {AX6UIGrid as Grid} from \"ax6ui\";\n     *\n     * let grid = new Grid({target: el});\n     * grid.setData([\n     *  {name: \"Thomas\"}\n     * ]);\n     *\n     * grid.setData({\n     *  list: [],\n     *  page: {\n     *      currentPage: 0,\n     *      pageSize: 50,\n     *      totalElements: 500,\n     *      totalPages: 100\n     *  }\n     * });\n     * ```\n     */\n    setData(_data){\n        let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\");\n\n        DATA.set.call(this, _data);\n        alignGrid.call(this);\n        BODY.repaint.call(this);\n        SCROLLER.resize.call(this);\n        PAGE.navigationUpdate.call(this);\n\n        if (!isFirstPaint) BODY.scrollTo.call(this, {top: 0});\n\n        isFirstPaint = null;\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _type\n     * @return {*}\n     * @example\n     * ```js\n     * import {AX6UIGrid as Grid} from \"ax6ui\";\n     * let grid = new Grid({target: el});\n     * grid.setData([]);\n     *\n     * grid.getList(); // return all\n     * grid.getList(\"selected\");\n     * grid.getList(\"modified\");\n     * grid.getList(\"deleted\");\n     * ```\n     */\n    getList(_type){\n        return DATA.getList.call(this, _type);\n    }\n\n    /**\n     * @method\n     * @param _height\n     * @return {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.setHeight(height);\n     * ```\n     */\n    setHeight(_height){\n        if (_height == \"100%\") {\n            _height = this.$target.offsetParent().innerHeight();\n        }\n        this.$target.css({height: _height});\n        this.$[\"container\"][\"root\"].css({height: _height});\n        alignGrid.call(this);\n        BODY.repaint.call(this, \"reset\");\n        SCROLLER.resize.call(this);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _row\n     * @param {Number|String} [_dindex=\"last\"]\n     * @param _options\n     * @param {Boolean} [_options.sort]\n     * @param {Number|String} [_options.focus] - HOME|END|[dindex]\n     * @return {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.addRow($.extend({}, {...}), \"first\");\n     * grid.addRow($.extend({}, {...}), \"last\", {focus: \"END\"});\n     * grid.addRow($.extend({}, {...}), \"last\", {focus: \"HOME\"});\n     * grid.addRow($.extend({}, {...}), \"last\", {focus: 10});\n     * ```\n     */\n    addRow(_row, _dindex, _options){\n        DATA.add.call(this, _row, _dindex, _options);\n        alignGrid.call(this);\n        BODY.repaint.call(this, \"reset\");\n        if(_options && _options.focus) {\n            BODY.moveFocus.call(this, _options.focus);\n        }\n        SCROLLER.resize.call(this);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _list\n     * @return {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.appendToList([{},{},{}]);\n     * grid.appendToList([{},{},{}]);\n     * ```\n     */\n    appendToList(_list){\n        DATA.append.call(this, _list, (function () {\n            alignGrid.call(this);\n            BODY.repaint.call(this);\n            SCROLLER.resize.call(this);\n        }).bind(this));\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Number|String} [_dindex=last]\n     * @return {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.removeRow();\n     * grid.removeRow(\"first\");\n     * grid.removeRow(\"last\");\n     * grid.removeRow(1);\n     * grid.removeRow(\"selected\");\n     * ```\n     */\n    removeRow(_dindex){\n        DATA.remove.call(this, _dindex);\n        alignGrid.call(this);\n        BODY.repaint.call(this, \"reset\");\n        BODY.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n        SCROLLER.resize.call(this);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _row\n     * @param _dindex\n     * @return {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.updateRow({price: 100, amount: 100, cost: 10000}, 1);\n     * ```\n     */\n    updateRow(_row, _dindex){\n        DATA.update.call(this, _row, _dindex);\n        // todo : mergeCells 옵션에 따라 예외처리\n        BODY.repaintRow.call(this, _dindex);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Number} _dindex\n     * @param {Object} _updateData\n     * @param {Object} [_options]\n     * @param {Function} [_options.filter]\n     * @returns {AX6UIGrid}\n     * @example\n     * ```js\n     * onDataChanged: function () {\n     *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked});\n     * }\n     *\n     * onDataChanged: function () {\n     *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked}, {filter: function(){\n     *          return this.item.type == \"A\";\n     *      });\n     * }\n     * ```\n     */\n    updateChildRows(_dindex, _updateData, _options){\n        DATA.updateChild.call(this, _dindex, _updateData, _options);\n        this.xvar.paintStartRowIndex = undefined;\n        this.xvar.paintStartColumnIndex = undefined;\n        BODY.repaint.call(this);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Number|String} _dindex\n     * @returns {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.deleteRow(\"first\");\n     * grid.deleteRow(\"last\");\n     * grid.deleteRow(1);\n     * grid.deleteRow(\"selected\");\n     * ```\n     */\n    deleteRow(_dindex){\n        DATA.deleteRow.call(this, _dindex);\n        alignGrid.call(this);\n        BODY.repaint.call(this, \"reset\");\n\n        SCROLLER.resize.call(this);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _dindex\n     * @param _key\n     * @param _value\n     * @returns {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.setValue(0, \"price\", 100);\n     * ```\n     */\n    setValue(_dindex, _key, _value) {\n        let doindex;\n\n        if (DATA.setValue.call(this, _dindex, doindex, _key, _value)) {\n            let repaintCell = function (_panelName, _rows, __dindex, __doindex, __key, __value) {\n                for (let r = 0, rl = _rows.length; r < rl; r++) {\n                    for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {\n                        if (_rows[r].cols[c].key == __key) {\n                            if (this.xvar.frozenRowIndex > __dindex) {\n                                BODY.repaintCell.call(this, \"top-\" + _panelName, __dindex, __doindex, r, c, __value);\n                            } else {\n                                BODY.repaintCell.call(this, _panelName + \"-scroll\", __dindex, __doindex, r, c, __value);\n                            }\n                        }\n                    }\n                }\n            };\n\n            repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, doindex, _key, _value);\n            repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, doindex, _key, _value);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Object} _column\n     * @param {Number|String} [_cindex=last]\n     * @returns {AX6UIGrid}\n     */\n    addColumn(_column, _cindex) {\n        const processor = {\n            \"first\": function (_column) {\n                this.config.columns = [].concat(_column).concat(this.config.columns);\n            },\n            \"last\": function (_column) {\n                this.config.columns = this.config.columns.concat([].concat(_column));\n            }\n        };\n\n        if (typeof _column === \"undefined\") throw '_column must not be null';\n        if (typeof _cindex === \"undefined\") _cindex = \"last\";\n        if (_cindex in processor) {\n            processor[_cindex].call(this, _column);\n        } else {\n            if (!U.isNumber(_cindex)) {\n                throw 'invalid argument _cindex';\n            }\n            if (U.isArray(_column)) {\n                for (let _i = 0, _l = _column.length; _i < _l; _i++) {\n                    this.config.columns.splice(_cindex + _i, 0, _column[_i]);\n                }\n            } else {\n                this.config.columns.splice(_cindex, 0, _column);\n            }\n        }\n        onResetColumns.call(this); // 컬럼이 변경되었을 때.\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Number|String} [_cindex=last]\n     * @returns {AX6UIGrid}\n     */\n    removeColumn(_cindex) {\n        const processor = {\n            \"first\": function (_cindex) {\n                this.config.columns.splice(_cindex, 1);\n            },\n            \"last\": function () {\n                this.config.columns.splice(this.config.columns.length - 1, 1);\n            }\n        };\n        if (typeof _cindex === \"undefined\") _cindex = \"last\";\n        if (_cindex in processor) {\n            processor[_cindex].call(this, _cindex);\n        } else {\n            if (!U.isNumber(_cindex)) {\n                throw 'invalid argument _cindex';\n            }\n            //\n            this.config.columns.splice(_cindex, 1);\n        }\n        onResetColumns.call(this); // 컬럼이 변경되었을 때.\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Object} _column\n     * @param {Number} _cindex\n     * @returns {AX6UIGrid}\n     */\n    updateColumn(_column, _cindex) {\n        if (!U.isNumber(_cindex)) {\n            throw 'invalid argument _cindex';\n        }\n        //\n        this.config.columns.splice(_cindex, 1, _column);\n        onResetColumns.call(this); // 컬럼이 변경되었을 때.\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Number} _width\n     * @param {Number} _cindex\n     * @returns {AX6UIGrid}\n     */\n    setColumnWidth(_width, _cindex) {\n        this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n        this.needToPaintSum = true;\n\n        // 컬럼너비 변경사항 적용.\n        HEADER.repaint.call(this);\n        BODY.repaint.call(this, true);\n        SCROLLER.resize.call(this);\n\n        alignGrid.call(this);\n        return this;\n    }\n\n    /**\n     * @method\n     * @returns {Object} sortInfo\n     */\n    getColumnSortInfo(){\n        let that = {sortInfo: []};\n        for (let k in this.sortInfo) {\n            that.sortInfo.push({\n                key: k,\n                orderBy: this.sortInfo[k].orderBy,\n                seq: this.sortInfo[k].seq\n            });\n        }\n        that.sortInfo.sort(function (a, b) {\n            return a.seq > b.seq;\n        });\n        return that.sortInfo;\n    }\n\n    /**\n     * @method\n     * @param {Object} _sortInfo\n     * @param {Object} _sortInfo.key\n     * @param {Number} _sortInfo.key.seq - seq of sortOrder\n     * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\n     * @returns {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\n     * ```\n     */\n    setColumnSort(_sortInfo) {\n        if (typeof _sortInfo !== \"undefined\") {\n            this.sortInfo = _sortInfo;\n            HEADER.applySortStatus.call(this, _sortInfo);\n        }\n\n        sortColumns.call(this, _sortInfo || this.sortInfo);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Number|Object} _selectObject\n     * @param {Number} _selectObject.index - index of row\n     * @param {Number} _selectObject.rowIndex - rowIndex of columns\n     * @param {Number} _selectObject.conIndex - colIndex of columns\n     * @param {Object} _options\n     * @param {Boolean} _options.selectedClear\n     * @param {Boolean} _options.selected\n     * @returns {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.select(0);\n     * grid.select(0, {selected: true});\n     * grid.select(0, {selected: false});\n     * grid.select(0, {selectedClear: true});\n     * ```\n     */\n    select(_selectObject, _options) {\n        if (U.isNumber(_selectObject)) {\n            let dindex = _selectObject;\n\n            if (!this.config.multipleSelect) {\n                this.clearSelect();\n            } else {\n                if (_options && _options.selectedClear) {\n                    this.clearSelect();\n                }\n            }\n\n            DATA.select.call(this, dindex, undefined, _options && _options.selected);\n            BODY.updateRowState.call(this, [\"selected\"], dindex, undefined);\n        }\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _dindex\n     * @return {AX6UIGrid}\n     */\n    clickBody(_dindex) {\n        BODY.click.call(this, _dindex);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _dindex\n     * @return {AX6UIGrid}\n     */\n    DBLClickBody(_dindex) {\n        BODY.dblClick.call(this, _dindex);\n        return this;\n    }\n\n    /**\n     * @method\n     * @return {AX6UIGrid}\n     */\n    clearSelect(){\n        BODY.updateRowState.call(this, [\"selectedClear\"]);\n        DATA.clearSelect.call(this);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {Object} _options\n     * @param {Boolean} _options.selected\n     * @param {Function} _options.filter\n     * @returns {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.selectAll();\n     * grid.selectAll({selected: true});\n     * grid.selectAll({selected: false});\n     * grid.selectAll({filter: function(){\n     *      return this[\"b\"] == \"A01\";\n     * });\n     * grid.selectAll({selected: true, filter: function(){\n     *      return this[\"b\"] == \"A01\";\n     * });\n     * ```\n     */\n    selectAll(_options) {\n        DATA.selectAll.call(this, _options && _options.selected, _options);\n        BODY.updateRowStateAll.call(this, [\"selected\"]);\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {String} _fileName\n     * @returns {AX6UIGrid|String}\n     * @example\n     * ```js\n     * grid.exportExcel(\"grid-to-excel.xls\");\n     * console.log(grid.exportExcel());\n     * ```\n     */\n    exportExcel(_fileName){\n        let table = [];\n        table.push('<table border=\"1\">');\n        table.push(HEADER.getExcelString.call(this));\n        table.push(BODY.getExcelString.call(this));\n        table.push('</table>');\n\n        if (typeof _fileName === \"undefined\") {\n            return table.join('');\n        }\n        else {\n            EXCEL.export.call(this, [table.join('')], _fileName);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END\n     * @returns {AX6UIGrid}\n     * @example\n     * ```js\n     * grid.focus(\"UP\");\n     * grid.focus(\"DOWN\");\n     * grid.focus(\"HOME\");\n     * grid.focus(\"END\");\n     * ```\n     */\n    focus(_pos) {\n\n        if (BODY.moveFocus.call(this, _pos)) {\n            let focusedColumn;\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (focusedColumn) {\n                this.select(focusedColumn.dindex, {selectedClear: true});\n            }\n        }\n        else {\n            if (typeof this.selectedDataIndexs[0] === \"undefined\") {\n                this.select(0);\n            } else {\n                let selectedIndex = this.selectedDataIndexs[0];\n                const processor = {\n                    \"UP\": function () {\n                        if (selectedIndex > 0) {\n                            this.select(selectedIndex - 1, {selectedClear: true});\n                            BODY.moveFocus.call(this, selectedIndex - 1);\n                        }\n                    },\n                    \"DOWN\": function () {\n                        if (selectedIndex < this.list.length - 1) {\n                            this.select(selectedIndex + 1, {selectedClear: true});\n                            BODY.moveFocus.call(this, selectedIndex + 1);\n                        }\n                    },\n                    \"HOME\": function () {\n                        this.select(0, {selectedClear: true});\n                        BODY.moveFocus.call(this, 0);\n                    },\n                    \"END\": function () {\n                        this.select(this.list.length - 1, {selectedClear: true});\n                        BODY.moveFocus.call(this, this.list.length - 1);\n                    }\n                };\n\n                if (_pos in processor) {\n                    processor[_pos].call(this);\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @method\n     * @return {null}\n     */\n    destroy(){\n        this.$target.empty();\n        this.list = [];\n\n        return null;\n    }\n}\n\nexport default AX6UIGrid;"]}