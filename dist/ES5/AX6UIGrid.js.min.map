{"version":3,"sources":["AX6UIGrid.js"],"names":["_jqmin","require","_AX6UICore2","_AX6Util","_AX6Info","_AX6Mustache","_AX6UIGrid_data","_AX6UIGrid_header","_AX6UIGrid_body","_AX6UIGrid_scroller","_AX6UIGrid_page","_AX6UIGrid_tmpl","_AX6UIGrid_util","formatter","collector","ctrlKeys","33","34","35","36","37","38","39","40","tmpl","initGrid","data","instanceId","this","id","$target","html","_AX6Mustache2","default","render","__tmpl","main","call","$","container","hidden","find","root","header","body","page","scroller","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","body-scroll","bottom-left-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal-bar","form","clipboard","resizer","horizontal","height","config","_height","initColumns","_columns","_AX6Util2","isArray","columns","deepCopy","headerTable","xvar","frozenColumnIndex","bodyRowTable","_AX6UIGrid_util2","makeBodyRowTable","bodyRowMap","makeBodyRowMap","bodyTrHeight","rows","length","columnHeight","colGroupMap","r","rl","row","c","cl","cols","_jqmin2","extend","colGroup","k","push","onResetColumns","resetColGroupWidth","footSum","initFootSum","needToPaintSum","grouping","initBodyGroup","alignGrid","_AX6UIGrid_header2","repaint","_AX6UIGrid_body2","_AX6UIGrid_scroller2","resize","_this","CT_WIDTH","width","showLineNumber","lineNumberColumnWidth","showRowSelector","rowSelectorColumnWidth","size","totalWidth","computedWidth","autoWidthColgroupIndexs","l","i","_width","right","left","_footSum","footSumTable","makeFootSumTable","footSumColumns","bodyGrouping","bodyGroupingTable","sortInfo","kl","by","orderBy","fixed","key","sort","_isFirst","_this2","Math","min","innerHeight","css","CT_HEIGHT","CT_INNER_HEIGHT","frozenPanelWidth","endIndex","verticalScrollerWidth","horizontalScrollerHeight","bodyHeight","footSumHeight","headerHeight","display","makeBodyGroupingTable","pageHeight","list","seq","bodyWidth","totalColGroupWidth","sortFixed","CT_INNER_WIDTH","panelDisplayProcess","vPosition","hPosition","containerType","isHide","asidePanelWidth","rightSum","frozenRowIndex","frozenRowHeight","scrollerHeight","scrollerWidth","scrollerDisplayProcess","remoteSort","that","_sortInfo","a","b","_AX6UIGrid_data2","initData","AX6UIGrid","_ret","_classCallCheck","_this3","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","theme","animateTime","debounceTime","appendDebouncer","appendDebounceTimes","appendProgressIcon","appendProgress","multipleSelect","virtualScrollY","virtualScrollX","virtualScrollYCountMargin","virtualScrollAccelerated","virtualScrollAcceleratedDelayTime","columnMinWidth","sortable","undefined","align","columnPadding","columnBorderWidth","mergeCells","statusDisplay","navigationItemCount","barMinSize","trackPadding","columnKeys","selected","modified","deleted","disableSelection","tree","use","hashDigit","indentWidth","arrowWidth","iconWidth","icons","parentKey","selfKey","scrollTimer","deletedList","groupIcon","parentHash","listIndexMap","contextMenu","leftHeaderData","headerData","rightHeaderData","leftBodyRowData","bodyRowData","rightBodyRowData","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","bodyGroupingMap","leftFootSumData","footSumData","customFormatter","getFormatter","customCollector","getCollector","assign","_AX6UIGrid_tmpl2","getTmpl","init","_formatter","_collector","_tmpl","_this4","onStateChanged","onLoad","initOnce","target","isObject","error","parseJson","attr","selfHash","window","on","throttle","e","bind","focused","isInlineEditing","which","_AX6Info2","eventKeys","ESC","keyDown","originalEvent","RETURN","TAB","stopEvent","shiftKey","DOWN","metaKey","ctrlKey","blur","self","SPACE","keys","focusedColumn","isPickerClick","findParentNode","_target","getAttribute","setTimeout","initialized","_act","_data","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","inlineEdit","active","_e","test","keydown","activeEditLength","columnKey","inlineEditing","copysuccess","$clipBoard","copyTextArray","copyText","_rowIndex","_dindex","_di","selectedColumn","_column","dindex","rowIndex","originalColumn","colIndex","forEach","join","get","innerText","select","isFirstPaint","paintStartRowIndex","set","_AX6UIGrid_page2","navigationUpdate","_colIndex","scrollTo","top","getList","_type","offsetParent","document","_row","_options","add","focus","_list","append","remove","update","repaintRow","_updateData","updateChild","paintStartColumnIndex","deleteRow","_key","_value","setValue","doindex","repaintCell","_panelName","_rows","__dindex","__doindex","__key","__value","_cindex","first","concat","last","isNumber","_i","_l","splice","columnResizerIndex","applySortStatus","sortColumns","_selectObject","selectedClear","clearSelect","click","dblClick","updateRowState","selectAll","updateRowStateAll","_fileName","table","getExcelString","EXCEL","export","_pos","selectedDataIndexs","selectedIndex","UP","HOME","END","empty"],"mappings":"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","file":"AX6UIGrid.js","sourcesContent":["import jQuery from \"jqmin\";\nimport AX6UICore from \"./AX6UICore.js\";\nimport U from \"./AX6Util\";\nimport info from \"./AX6Info\";\nimport mustache from \"./AX6Mustache\";\nimport DATA from \"./AX6UIGrid/AX6UIGrid_data\";\nimport HEADER from \"./AX6UIGrid/AX6UIGrid_header\";\nimport BODY from \"./AX6UIGrid/AX6UIGrid_body\";\nimport SCROLLER from \"./AX6UIGrid/AX6UIGrid_scroller\";\nimport PAGE from \"./AX6UIGrid/AX6UIGrid_page\";\nimport TMPL from \"./AX6UIGrid/AX6UIGrid_tmpl\";\nimport UTIL from \"./AX6UIGrid/AX6UIGrid_util\";\n\nimport \"./AX6UIGrid/index.scss\";\n\n\nlet formatter = {};\nlet collector = {};\nlet ctrlKeys = {\n  \"33\": \"KEY_PAGEUP\",\n  \"34\": \"KEY_PAGEDOWN\",\n  \"35\": \"KEY_END\",\n  \"36\": \"KEY_HOME\",\n  \"37\": \"KEY_LEFT\",\n  \"38\": \"KEY_UP\",\n  \"39\": \"KEY_RIGHT\",\n  \"40\": \"KEY_DOWN\"\n};\nlet tmpl = {};\n\nconst initGrid = function () {\n  // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n  let data = {\n    instanceId: this.id\n  };\n\n  this.$target.html(mustache.render(this.__tmpl.main.call(this), data));\n\n  // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n  this.$ = {\n    \"container\": {\n      \"hidden\": this.$target.find('[data-ax6grid-container=\"hidden\"]'),\n      \"root\": this.$target.find('[data-ax6grid-container=\"root\"]'),\n      \"header\": this.$target.find('[data-ax6grid-container=\"header\"]'),\n      \"body\": this.$target.find('[data-ax6grid-container=\"body\"]'),\n      \"page\": this.$target.find('[data-ax6grid-container=\"page\"]'),\n      \"scroller\": this.$target.find('[data-ax6grid-container=\"scroller\"]')\n    },\n    \"panel\": {\n      \"aside-header\": this.$target.find('[data-ax6grid-panel=\"aside-header\"]'),\n      \"left-header\": this.$target.find('[data-ax6grid-panel=\"left-header\"]'),\n      \"header\": this.$target.find('[data-ax6grid-panel=\"header\"]'),\n      \"header-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"header\"]'),\n      \"right-header\": this.$target.find('[data-ax6grid-panel=\"right-header\"]'),\n      \"top-aside-body\": this.$target.find('[data-ax6grid-panel=\"top-aside-body\"]'),\n      \"top-left-body\": this.$target.find('[data-ax6grid-panel=\"top-left-body\"]'),\n      \"top-body\": this.$target.find('[data-ax6grid-panel=\"top-body\"]'),\n      \"top-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"top-body\"]'),\n      \"top-right-body\": this.$target.find('[data-ax6grid-panel=\"top-right-body\"]'),\n      \"aside-body\": this.$target.find('[data-ax6grid-panel=\"aside-body\"]'),\n      \"aside-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"aside-body\"]'),\n      \"left-body\": this.$target.find('[data-ax6grid-panel=\"left-body\"]'),\n      \"left-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"left-body\"]'),\n      \"body\": this.$target.find('[data-ax6grid-panel=\"body\"]'),\n      \"body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"body\"]'),\n      \"right-body\": this.$target.find('[data-ax6grid-panel=\"right-body\"]'),\n      \"right-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"right-body\"]'),\n      \"bottom-aside-body\": this.$target.find('[data-ax6grid-panel=\"bottom-aside-body\"]'),\n      \"bottom-left-body\": this.$target.find('[data-ax6grid-panel=\"bottom-left-body\"]'),\n      \"bottom-body\": this.$target.find('[data-ax6grid-panel=\"bottom-body\"]'),\n      \"bottom-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"bottom-body\"]'),\n      \"bottom-right-body\": this.$target.find('[data-ax6grid-panel=\"bottom-right-body\"]')\n    },\n    \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n    \"scroller\": {\n      \"vertical\": this.$target.find('[data-ax6grid-scroller=\"vertical\"]'),\n      \"vertical-bar\": this.$target.find('[data-ax6grid-scroller=\"vertical-bar\"]'),\n      \"horizontal\": this.$target.find('[data-ax6grid-scroller=\"horizontal\"]'),\n      \"horizontal-bar\": this.$target.find('[data-ax6grid-scroller=\"horizontal-bar\"]'),\n      \"corner\": this.$target.find('[data-ax6grid-scroller=\"corner\"]')\n    },\n    \"page\": {\n      \"navigation\": this.$target.find('[data-ax6grid-page=\"navigation\"]'),\n      \"status\": this.$target.find('[data-ax6grid-page=\"status\"]')\n    },\n    \"form\": {\n      \"clipboard\": this.$target.find('[data-ax6grid-form=\"clipboard\"]')\n    },\n    \"resizer\": {\n      \"vertical\": this.$target.find('[data-ax6grid-resizer=\"vertical\"]'),\n      \"horizontal\": this.$target.find('[data-ax6grid-resizer=\"horizontal\"]')\n    }\n  };\n\n  this.$[\"container\"][\"root\"].css({height: this.config.height || this.config._height});\n\n  return this;\n};\nconst initColumns = function (_columns) {\n  if (!U.isArray(_columns)) _columns = [];\n  this.columns = U.deepCopy(_columns);\n  this.headerTable = UTIL.makeHeaderTable.call(this, this.columns);\n  this.xvar.frozenColumnIndex = this.config.frozenColumnIndex || 0;\n\n  this.bodyRowTable = UTIL.makeBodyRowTable.call(this, this.columns);\n  this.bodyRowMap = UTIL.makeBodyRowMap.call(this, this.bodyRowTable);\n  // 바디에 표현될 한줄의 높이를 계산합니다.\n  this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n  let colGroupMap = {};\n  for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n    let row = this.headerTable.rows[r];\n    for (let c = 0, cl = row.cols.length; c < cl; c++) {\n      colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n    }\n  }\n\n  this.colGroup = [];\n  for (var k in colGroupMap) {\n    this.colGroup.push(colGroupMap[k]);\n  }\n\n  return this;\n};\nconst onResetColumns = function () {\n  initColumns.call(this, this.config.columns);\n  resetColGroupWidth.call(this);\n  if (this.config.footSum) {\n    initFootSum.call(this, this.config.footSum);\n    this.needToPaintSum = true;\n  }\n  if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n  alignGrid.call(this, true);\n  HEADER.repaint.call(this, true);\n  BODY.repaint.call(this, true);\n  SCROLLER.resize.call(this);\n};\nconst resetColGroupWidth = function () {\n  /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n  let CT_WIDTH = this.$[\"container\"][\"root\"].width() - (() => {\n      let width = 0;\n      if (this.config.showLineNumber) width += this.config.lineNumberColumnWidth;\n      if (this.config.showRowSelector) width += this.config.rowSelectorColumnWidth;\n      width += this.config.scroller.size;\n      return width;\n    })(),\n    totalWidth = 0, computedWidth, autoWidthColgroupIndexs = [],\n    colGroup = this.colGroup,\n    i, l;\n\n  for (i = 0, l = colGroup.length; i < l; i++) {\n    if (U.isNumber(colGroup[i].width)) {\n      totalWidth += colGroup[i]._width = colGroup[i].width;\n    } else if (colGroup[i].width === \"*\") {\n      autoWidthColgroupIndexs.push(i);\n    } else if (U.right(colGroup[i].width, 1) === \"%\") {\n      totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n    }\n  }\n  if (autoWidthColgroupIndexs.length > 0) {\n    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n      colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n    }\n  }\n};\nconst initFootSum = function (_footSum) {\n  if (U.isArray(_footSum)) {\n    this.footSumTable = UTIL.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n  } else {\n    this.footSumColumns = [];\n    this.footSumTable = {};\n  }\n};\nconst initBodyGroup = function (_grouping) {\n  let grouping = jQuery.extend({}, _grouping);\n  if (\"by\" in grouping && \"columns\" in grouping) {\n    this.bodyGrouping = {\n      by: grouping.by,\n      columns: grouping.columns\n    };\n    this.bodyGroupingTable = UTIL.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n    this.sortInfo = (function () {\n      let sortInfo = {};\n      for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n        sortInfo[this.bodyGrouping.by[k]] = {\n          orderBy: \"asc\",\n          seq: k,\n          fixed: true\n        };\n        for (let c = 0, cl = this.colGroup.length; c < cl; c++) {\n          if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n            this.colGroup[c].sort = \"asc\";\n            this.colGroup[c].sortFixed = true;\n          }\n        }\n      }\n      return sortInfo;\n    }).call(this);\n  } else {\n    this.config.body.grouping = false;\n  }\n};\nconst alignGrid = function (_isFirst) {\n  // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\n  if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\n    return false;\n  }\n\n  if (!this.config.height) {\n    this.$[\"container\"][\"root\"].css({height: this.config._height = this.$target.height()});\n  }\n\n  let CT_WIDTH = this.$[\"container\"][\"root\"].width(),\n    CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\n    CT_INNER_WIDTH = CT_WIDTH,\n    CT_INNER_HEIGHT = CT_HEIGHT,\n    asidePanelWidth = this.config.asidePanelWidth = (() => {\n      let width = 0;\n      if (this.config.showLineNumber) width += this.config.lineNumberColumnWidth;\n      if (this.config.showRowSelector) width += this.config.rowSelectorColumnWidth;\n      return width;\n    })(),\n    frozenPanelWidth = this.config.frozenPanelWidth = ((colGroup, endIndex) => {\n      let width = 0;\n      for (let i = 0, l = endIndex; i < l; i++) {\n        width += colGroup[i]._width;\n      }\n      return width;\n    })(this.colGroup, this.config.frozenColumnIndex),\n    verticalScrollerWidth, horizontalScrollerHeight, bodyHeight;\n\n  // todo : 우측 함계컬럼 너비 계산\n  let rightPanelWidth = 0,\n    frozenRowHeight = this.config.frozenRowIndex * this.xvar.bodyTrHeight,\n    footSumHeight = this.footSumColumns.length * this.xvar.bodyTrHeight,\n    headerHeight = (this.config.header.display) ? this.headerTable.rows.length * this.config.header.columnHeight : 0,\n    pageHeight = (this.config.page.display) ? this.config.page.height : 0;\n\n  {\n    verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n    horizontalScrollerHeight = (() => {\n      let totalColGroupWidth = 0;\n      // aside 빼고 너비\n      // 수직 스크롤이 있으면 또 빼고 비교\n      let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n      for (let i = 0, l = this.colGroup.length; i < l; i++) {\n        totalColGroupWidth += this.colGroup[i]._width;\n      }\n      return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\n    })();\n\n    if (horizontalScrollerHeight > 0) {\n      verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n    }\n  }\n\n  // 수평 너비 결정\n  CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n  // 수직 스크롤러의 높이 결정.\n  CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n  bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n  const panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\n    let css = {\n        display: \"block\"\n      },\n      isHide = false;\n\n    switch (hPosition) {\n      case \"aside\":\n        if (asidePanelWidth === 0) {\n          isHide = true;\n        } else {\n          css[\"left\"] = 0;\n          css[\"width\"] = asidePanelWidth;\n        }\n        break;\n      case \"left\":\n        if (this.config.frozenColumnIndex === 0) {\n          isHide = true;\n        } else {\n          css[\"left\"] = asidePanelWidth;\n          css[\"width\"] = frozenPanelWidth;\n        }\n        break;\n      case \"right\":\n        if (!this.config.rightSum) {\n          isHide = true;\n        } else {\n\n        }\n        break;\n      default:\n        if (containerType !== \"page\") {\n          if (this.config.frozenColumnIndex === 0) {\n            css[\"left\"] = asidePanelWidth;\n          } else {\n            css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n          }\n          css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n        }\n        break;\n    }\n\n    if (isHide) {\n      panel.css({display: \"none\"});\n      // 프로세스 중지\n      return this;\n    }\n\n    if (containerType === \"body\") {\n      switch (vPosition) {\n        case \"top\":\n          if (this.config.frozenRowIndex == 0) {\n            isHide = true;\n          } else {\n            css[\"top\"] = 0;\n            css[\"height\"] = frozenRowHeight;\n          }\n          break;\n        case \"bottom\":\n          if (!this.config.footSum) {\n            isHide = true;\n          } else {\n            css[\"top\"] = bodyHeight - footSumHeight;\n            css[\"height\"] = footSumHeight; // footSum height\n          }\n          break;\n        default:\n          css[\"top\"] = frozenRowHeight;\n          css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n          break;\n      }\n    } else if (containerType === \"header\") {\n      css[\"height\"] = headerHeight;\n    } else if (containerType === \"page\") {\n      if (pageHeight == 0) {\n        isHide = true;\n      } else {\n        css[\"height\"] = pageHeight;\n\n      }\n    }\n\n    if (isHide) {\n      panel.css({display: \"none\"});\n      // 프로세스 중지\n      return this;\n    }\n\n    panel.css(css);\n    return this;\n  };\n  const scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\n    let css = {\n        display: \"block\"\n      },\n      isHide = false;\n\n    switch (containerType) {\n      case \"vertical\":\n        if (scrollerWidth > 0) {\n          css[\"width\"] = scrollerWidth;\n          css[\"height\"] = CT_INNER_HEIGHT;\n          css[\"bottom\"] = scrollerHeight + pageHeight;\n        } else {\n          isHide = true;\n        }\n        break;\n      case \"horizontal\":\n        if (scrollerHeight > 0) {\n          css[\"width\"] = CT_INNER_WIDTH;\n          css[\"height\"] = scrollerHeight;\n          css[\"right\"] = scrollerWidth;\n          css[\"bottom\"] = pageHeight;\n        } else {\n          isHide = true;\n        }\n        break;\n      case \"corner\":\n        if (scrollerWidth > 0 && scrollerHeight > 0) {\n          css[\"width\"] = scrollerWidth;\n          css[\"height\"] = scrollerHeight;\n          css[\"bottom\"] = pageHeight;\n        } else {\n          isHide = true;\n        }\n        break;\n    }\n\n    if (isHide) {\n      panel.css({display: \"none\"});\n      // 프로세스 중지\n      return this;\n    }\n\n    panel.css(css);\n  };\n\n  this.$[\"container\"][\"header\"].css({height: headerHeight});\n  this.$[\"container\"][\"body\"].css({height: bodyHeight});\n\n  // 각 패널들의 크기 표시여부를 결정합니다\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n  panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n\n  scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n  scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n  scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n  panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n\n  // 각 패널의 사이즈 결정\n  /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.\n  this.xvar.bodyHeight = this.$.panel[\"body\"].height();\n  this.xvar.bodyWidth = this.$.panel[\"body\"].width();\n  // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth\n\n  return true;\n};\nconst sortColumns = function (_sortInfo) {\n  HEADER.repaint.call(this);\n\n  if (U.isFunction(this.config.remoteSort)) {\n    let that = {sortInfo: []};\n    for (let k in _sortInfo) {\n      that.sortInfo.push({\n        key: k,\n        orderBy: _sortInfo[k].orderBy,\n        seq: _sortInfo[k].seq\n      });\n    }\n    that.sortInfo.sort(function (a, b) {\n      return a.seq > b.seq;\n    });\n    this.config.remoteSort.call(that, that);\n  } else {\n    if (this.config.body.grouping) {\n      this.list = DATA.initData.call(this,\n        DATA.sort.call(this,\n          _sortInfo,\n          DATA.clearGroupingData.call(this,\n            this.list\n          )\n        )\n      );\n    }\n    else {\n      this.list = DATA.sort.call(this, _sortInfo,\n        DATA.clearGroupingData.call(this,\n          this.list\n        ),\n        {resetLineNumber: true}\n      );\n    }\n    BODY.repaint.call(this, true);\n    SCROLLER.resize.call(this);\n  }\n};\n\n/**\n * @class\n */\nclass AX6UIGrid extends AX6UICore {\n\n  /**\n   * @static\n   * @param _formatter\n   */\n  static setFormatter(_formatter) {\n    return formatter = Object.assign(formatter, _formatter);\n  }\n\n  /**\n   * @static\n   * @return {Object}\n   */\n  static getFormatter() {\n    return formatter || {};\n  }\n\n  /**\n   * @static\n   * @param _collector\n   * @return {collector}\n   */\n  static setCollector(_collector) {\n    return collector = Object.assign(collector, _collector);\n  }\n\n  /**\n   * @static\n   * @return {collector}\n   */\n  static getCollector() {\n    return collector || {};\n  }\n\n  /**\n   * @static\n   * @param _tmpl\n   * @return {tmpl}\n   */\n  static setTmpl(_tmpl) {\n    return tmpl = Object.assign(tmpl, _tmpl);\n  }\n\n  /**\n   * @static\n   * @return {tmpl}\n   */\n  static getTmpl() {\n    return tmpl || {};\n  }\n\n  /**\n   * @constructor\n   * @param config\n   */\n  constructor(config) {\n    super();\n\n    /**\n     * @member {JSON}\n     * @param config\n     * @param {Element} config.target\n     * @param {Number} [config.frozenColumnIndex=0]\n     * @param {Number} [config.frozenRowIndex=0]\n     * @param {Boolean} [config.showLineNumber=false]\n     * @param {Boolean} [config.showRowSelector=false]\n     * @param {Boolean} [config.multipleSelect=true]\n     * @param {Number} [config.columnMinWidth=100]\n     * @param {Number} [config.lineNumberColumnWidth=30]\n     * @param {Number} [config.rowSelectorColumnWidth=25]\n     * @param {Boolean} [config.sortable=false]\n     * @param {Boolean} [config.multiSort=false]\n     * @param {Function} [config.remoteSort=false]\n     * @param {Boolean} [config.virtualScrollY=true] - 세로축 가상스크롤 처리여부\n     * @param {Boolean} [config.virtualScrollX=true] - 가로축 가상스크롤 처리여부\n     * @param {Object} [config.header]\n     * @param {String} [config.header.align]\n     * @param {Number} [config.header.columnHeight=25]\n     * @param {Number} [config.header.columnPadding=3]\n     * @param {Number} [config.header.columnBorderWidth=1]\n     * @param {Object} [config.body]\n     * @param {Function} [config.body.onClick]\n     * @param {Function} [config.body.onDBLClick]\n     * @param {Function} [config.body.onDataChanged]\n     * @param {Function} [config.body.onContextMenu]\n     * @param {String|Array} [config.body.mergeCells=false] -\n     * @param {String} [config.body.align]\n     * @param {Number} [config.body.columnHeight=25]\n     * @param {Number} [config.body.columnPadding=3]\n     * @param {Number} [config.body.columnBorderWidth=1]\n     * @param {Object} [config.body.grouping]\n     * @param {Array} [config.body.grouping.by] - list grouping keys\n     * @param {Array} [config.body.grouping.columns] - list grouping columns\n     * @param {(String|Function)} [config.body.trStyleClass]\n     * @param {Object} [config.page]\n     * @param {Number} [config.page.height=25]\n     * @param {Boolean} [config.page.display=true] - grid page display\n     * @param {Boolean} [config.page.statusDisplay=true] - grid status display\n     * @param {Number} [config.page.navigationItemCount=5]\n     * @param {Object} [config.scroller]\n     * @param {Number} [config.scroller.size=15]\n     * @param {Number} [config.scroller.barMinSize=15]\n     * @param {Number} [config.scroller.trackPadding=4]\n     * @param {Object} [config.columnKeys]\n     * @param {String} [config.columnKeys.selected=\"_SELECTED\"]\n     * @param {Object[]} config.columns\n     * @param {String} config.columns[].key\n     * @param {String} config.columns[].label\n     * @param {Number} config.columns[].width\n     * @param {(String|Function)} config.columns[].styleClass\n     * @param {(String|Function)} config.columns[].headerStyleClass\n     * @param {Boolean} config.columns[].enableFilter\n     * @param {Boolean} config.columns[].sortable\n     * @param {String} config.columns[].align\n     * @param {(String|Function)} config.columns[].formatter\n     * @param {Object} config.columns[].editor\n     * @param {String} config.columns[].editor.type - text,number,money,date\n     * @param {Object} config.columns[].editor.config\n     * @param {Array} config.columns[].editor.updateWith\n     * @param {Function} config.columns[].editor.disabled - disable editor\n     * @param {Boolean} [config.columns[].multiLine=false]\n     * @param {Object} [config.tree]\n     * @param {Boolean} [config.tree.use=false] - Whether tree-type data is used\n     * @param {Number} [config.tree.hashDigit=8]\n     * @param {Number} [config.tree.indentWidth=10]\n     * @param {Number} [config.tree.arrowWidth=15]\n     * @param {Number} [config.tree.iconWidth=18]\n     * @param {Object} [config.tree.icons]\n     * @param {String} [config.tree.icons.openedArrow='▾']\n     * @param {String} [config.tree.icons.collapsedArrow='▸']\n     * @param {String} [config.tree.icons.groupIcon='⊚']\n     * @param {String} [config.tree.icons.collapsedGroupIcon='⊚']\n     * @param {String} [config.tree.icons.itemIcon='⊙']\n     * @param {Object} [config.tree.columnKeys]\n     * @param {String} [config.tree.columnKeys.parentKey=\"pid\"]\n     * @param {String} [config.tree.columnKeys.selfKey=\"id\"]\n     * @param {String} [config.tree.columnKeys.collapse=\"collapse\"]\n     * @param {String} [config.tree.columnKeys.hidden=\"hidden\"]\n     * @param {String} [config.tree.columnKeys.parentHash=\"__hp__\"]\n     * @param {String} [config.tree.columnKeys.selfHash=\"__hs__\"]\n     * @param {String} [config.tree.columnKeys.children=\"__children__\"]\n     * @param {String} [config.tree.columnKeys.depth=\"__depth__\"]\n     */\n    this.config = {\n      theme: 'default',\n      animateTime: 250,\n      debounceTime: 250,\n      appendDebouncer: null,\n      appendDebounceTimes: 0,\n      appendProgressIcon: '...',\n      appendProgress: false,\n\n      // 틀고정 속성\n      frozenColumnIndex: 0,\n      frozenRowIndex: 0,\n      showLineNumber: false,\n      showRowSelector: false,\n      multipleSelect: true,\n      virtualScrollY: true,\n      virtualScrollX: true,\n\n      // 스크롤될 때 body 페인팅 딜레이를 주어 성능이 좋은 않은 브라우저에서 반응을 빠르게 할 때 사용하는 옵션들\n      virtualScrollYCountMargin: 0,\n      virtualScrollAccelerated: true,\n      virtualScrollAcceleratedDelayTime: 10,\n\n      height: 0,\n      columnMinWidth: 100,\n      lineNumberColumnWidth: 30,\n      rowSelectorColumnWidth: 26,\n      sortable: undefined,\n      remoteSort: false,\n\n      header: {\n        display: true,\n        align: false,\n        columnHeight: 26,\n        columnPadding: 3,\n        columnBorderWidth: 1\n      },\n      body: {\n        align: false,\n        columnHeight: 26,\n        columnPadding: 3,\n        columnBorderWidth: 1,\n        grouping: false,\n        mergeCells: false\n      },\n      rightSum: false,\n      footSum: false,\n      page: {\n        height: 25,\n        display: true,\n        statusDisplay: true,\n        navigationItemCount: 5\n      },\n      scroller: {\n        size: 15,\n        barMinSize: 15,\n        trackPadding: 4\n      },\n      columnKeys: {\n        selected: '__selected__',\n        modified: '__modified__',\n        deleted: '__deleted__',\n        disableSelection: '__disable_selection__'\n      },\n      tree: {\n        use: false,\n        hashDigit: 8,\n        indentWidth: 10,\n        arrowWidth: 15,\n        iconWidth: 18,\n        icons: {\n          openedArrow: '▾',\n          collapsedArrow: '▸',\n          groupIcon: '⊚',\n          collapsedGroupIcon: '⊚',\n          itemIcon: '⊙'\n        },\n        columnKeys: {\n          parentKey: \"pid\",\n          selfKey: \"id\",\n          collapse: \"collapse\",\n          hidden: \"hidden\",\n          parentHash: \"__hp__\",\n          selfHash: \"__hs__\",\n          children: \"__children__\",\n          depth: \"__depth__\",\n        }\n      }\n    };\n    jQuery.extend(true, this.config, config);\n\n    // 멤버 변수 초기화\n    /**\n     * @member {Object}\n     */\n    this.xvar = {\n      bodyTrHeight: 0, // 한줄의 높이\n      scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n      scrollContentHeight: 0, // 스크롤 된 내용물의 높이\n      scrollTimer: null\n    };\n\n    // 그리드 데이터셋\n    /**\n     * @member {Array}\n     */\n    this.columns = []; // config.columns에서 복제된 오브젝트\n    /**\n     * @member {Array}\n     */\n    this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n    /**\n     * @member {Array}\n     */\n    this.footSumColumns = [];\n    /**\n     * @member {Object}\n     */\n    this.bodyGrouping = {};\n    /**\n     * @member {Array}\n     */\n    this.list = []; // 그리드의 데이터\n    /**\n     * @member {Array}\n     */\n    this.proxyList = null; // 그리드 데이터의 대리자\n    /**\n     * @member {Object}\n     */\n    this.page = null; // 그리드의 페이지 정보\n\n    this.selectedDataIndexs = [];\n    this.deletedList = [];\n\n    /**\n     * @member {Object}\n     */\n    this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n    this.focused = false;\n    /**\n     * @member {Object}\n     */\n    this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n    /**\n     * @member {Object}\n     */\n    this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n    this.isInlineEditing = false;\n    /**\n     * @member {Object}\n     */\n    this.inlineEditing = {};\n    /**\n     * @member {Object}\n     */\n    this.listIndexMap = {}; // tree데이터 사용시 데이터 인덱싱 맵\n    /**\n     * @member {Object}\n     */\n    this.contextMenu = null; // contentMenu 의 인스턴스\n\n    // header\n    /**\n     * @member {Object}\n     */\n    this.headerTable = {};\n    /**\n     * @member {Object}\n     */\n    this.leftHeaderData = {};\n    /**\n     * @member {Object}\n     */\n    this.headerData = {};\n    /**\n     * @member {Object}\n     */\n    this.rightHeaderData = {};\n\n    // body\n    /**\n     * @member {Object}\n     */\n    this.bodyRowTable = {};\n    /**\n     * @member {Object}\n     */\n    this.leftBodyRowData = {};\n    /**\n     * @member {Object}\n     */\n    this.bodyRowData = {};\n    /**\n     * @member {Object}\n     */\n    this.rightBodyRowData = {};\n    /**\n     * @member {Object}\n     */\n    this.bodyRowMap = {};\n\n    /**\n     * @member {Object}\n     */\n    this.bodyGroupingTable = {};\n    /**\n     * @member {Object}\n     */\n    this.leftBodyGroupingData = {};\n    /**\n     * @member {Object}\n     */\n    this.bodyGroupingData = {};\n    /**\n     * @member {Object}\n     */\n    this.rightBodyGroupingData = {};\n    /**\n     * @member {Object}\n     */\n    this.bodyGroupingMap = {};\n\n    // footSum\n    /**\n     * @member {Object}\n     */\n    this.footSumTable = {}; // footSum의 출력레이아웃\n    /**\n     * @member {Object}\n     */\n    this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n    /**\n     * @member {Object}\n     */\n    this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n    /**\n     * @member {Boolean}\n     */\n    this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n    /**\n     * 사용자 정의 formatter. AX6UIGrid.setFormatter 를 이용하여 확장\n     * @member\n     */\n    this.customFormatter = AX6UIGrid.getFormatter();\n\n    /**\n     * 사용자 정의 collector. AX6UIGrid.setCollector 를 이용하여 확장\n     * @member\n     */\n    this.customCollector = AX6UIGrid.getCollector();\n\n    this.__tmpl = Object.assign(TMPL, AX6UIGrid.getTmpl());\n\n    if (typeof config !== \"undefined\") this.init();\n\n    return this;\n  }\n\n  /**\n   * @method\n   * @param config\n   */\n  init() {\n    // 그리드의 이벤트 정의 구간\n    this.onStateChanged = this.config.onStateChanged;\n    this.onLoad = this.config.onLoad;\n\n    // init 호출 여부\n    this.initOnce();\n\n    if (typeof this.config.target !== \"undefined\") {\n\n      this.$target = jQuery(this.config.target);\n\n      // target attribute data\n      (function (data) {\n        if (U.isObject(data) && !data.error) {\n          this.config = jQuery.extend(true, {}, this.config, data);\n        }\n      }).call(this, U.parseJson(this.$target.attr(\"data-ax6ui-grid-config\"), true));\n\n      if (!this.config.height) {\n        this.config._height = this.$target.height();\n      }\n\n      if (!this.id) this.id = this.$target.data(\"ax6ui-grid-id\");\n      if (!this.id) {\n        this.id = 'ax6ui-grid-' + this.instanceId;\n        this.$target.data(\"ax6ui-grid-id\", this.id);\n      }\n\n      DATA.init.call(this);\n\n      if (this.config.tree.use) { // 트리라면\n        this.sortInfo = {};\n        this.sortInfo[this.config.tree.columnKeys.selfHash] = {orderBy: \"asc\", seq: 0, fixed: true};\n      }\n\n      ///========\n      // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n      initGrid.call(this);\n\n      // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n      initColumns.call(this, this.config.columns);\n      resetColGroupWidth.call(this);\n\n      // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n      if (this.config.footSum) initFootSum.call(this, this.config.footSum);\n\n      // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n      if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n\n      // 그리드의 각 요소의 크기를 맞춤니다.\n      alignGrid.call(this, true);\n\n      // columns의 데이터로 header데이터를 만들고\n      HEADER.init.call(this);\n      // header를 출력합니다.\n      HEADER.repaint.call(this);\n\n      // columns의 데이터로 body데이터를 만들고\n      BODY.init.call(this);\n      // body를 출력합니다.\n      BODY.repaint.call(this);\n\n      // scroller\n      SCROLLER.init.call(this);\n      SCROLLER.resize.call(this);\n\n      jQuery(window)\n        .on(\"resize.ax6grid-\" + this.id, U.throttle(function (e) {\n          alignGrid.call(this);\n          SCROLLER.resize.call(this);\n          BODY.repaint.call(this);  // window resize시 repaint 함수 호출\n        }, 30).bind(this))\n        .on(\"keydown.ax6grid-\" + this.instanceId, (e) => {\n          if (this.focused) {\n            if (this.isInlineEditing) {\n              if (e.which == info.eventKeys.ESC) {\n                this.keyDown(\"ESC\", e.originalEvent);\n              }\n              else if (e.which == info.eventKeys.RETURN) {\n                this.keyDown(\"RETURN\", e.originalEvent);\n              }\n              else if (e.which == info.eventKeys.TAB) {\n                this.keyDown(\"TAB\", e.originalEvent);\n                U.stopEvent(e);\n              }\n              else if (e.which == info.eventKeys.UP) {\n                this.keyDown(\"RETURN\", {shiftKey: true});\n              }\n              else if (e.which == info.eventKeys.DOWN) {\n                this.keyDown(\"RETURN\", {});\n              }\n            }\n            else {\n              if (e.metaKey || e.ctrlKey) {\n                if (e.which == 67) { // c\n                  self.copySelect();\n                }\n              } else {\n                if (ctrlKeys[e.which]) {\n                  this.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\n                  U.stopEvent(e);\n                } else if (e.which == info.eventKeys.ESC) {\n                  if (this.focused) {\n                    BODY.blur.call(self);\n                  }\n                } else if (e.which == info.eventKeys.RETURN || e.which == info.eventKeys.SPACE) {\n                  this.keyDown(\"RETURN\", e.originalEvent);\n                } else if (e.which == info.eventKeys.TAB) {\n                  //self.keyDown(\"RETURN\", e.originalEvent);\n                  U.stopEvent(e);\n                } else if (Object.keys(this.focusedColumn).length) {\n                  this.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                }\n              }\n            }\n          }\n        });\n\n      jQuery(document.body).on(\"click.ax6grid-\" + this.id, (e) => {\n        let isPickerClick = false,\n          target = U.findParentNode(e.target, function (_target) {\n            if (isPickerClick = _target.getAttribute(\"data-ax6grid-inline-edit-picker\")) {\n              return true;\n            }\n            return _target.getAttribute(\"data-ax6grid-container\") === \"root\";\n          });\n\n        if (target && target.getAttribute(\"data-ax6grid-instance\") === this.id) {\n          this.focused = true;\n        } else {\n          this.focused = false;\n          BODY.blur.call(this);\n        }\n      });\n\n\n      // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n      setTimeout(() => {\n        if (this.onLoad) {\n          this.onLoad.call({\n            self: this\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * @method\n   */\n  initOnce() {\n    if (this.initialized) return this;\n    this.initialized = true;\n  }\n\n  /**\n   * 그리드의 각 패널들의 크기를 변경된 설정에 맞추어 다시 그림\n   * @method\n   * @return {AX6UIGrid}\n   */\n  align() {\n    if (alignGrid.call(this)) {\n      BODY.repaint.call(this);\n      SCROLLER.resize.call(this);\n    }\n    return this;\n  }\n\n  /**\n   * 그리드에 키보드 액션을 전달\n   * @method\n   * @param _act\n   * @param _data\n   * @return {AX6UIGrid}\n   */\n  keyDown(_act, _data) {\n    const processor = {\n      \"KEY_UP\": function () {\n        BODY.moveFocus.call(this, \"UP\");\n      },\n      \"KEY_DOWN\": function () {\n        BODY.moveFocus.call(this, \"DOWN\");\n      },\n      \"KEY_LEFT\": function () {\n        BODY.moveFocus.call(this, \"LEFT\");\n      },\n      \"KEY_RIGHT\": function () {\n        BODY.moveFocus.call(this, \"RIGHT\");\n      },\n      \"KEY_HOME\": function () {\n        BODY.moveFocus.call(this, \"HOME\");\n      },\n      \"KEY_END\": function () {\n        BODY.moveFocus.call(this, \"END\");\n      },\n      \"INLINE_EDIT\": function (_e) {\n        BODY.inlineEdit.active.call(this, this.focusedColumn, _e);\n        if (!/[0-9a-zA-Z]/.test(_e.key)) {\n          U.stopEvent(_e);\n        }\n      },\n      \"ESC\": function (_e) {\n        BODY.inlineEdit.keydown.call(this, \"ESC\");\n      },\n      \"RETURN\": function (_e) {\n        var activeEditLength = 0;\n        for (var columnKey in this.inlineEditing) {\n          activeEditLength++;\n\n          if (!BODY.inlineEdit.keydown.call(this, \"RETURN\", columnKey)) {\n            return false;\n            U.stopEvent(_e);\n          }\n          // next focus\n          if (activeEditLength == 1) {\n            if (BODY.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\n              BODY.inlineEdit.keydown.call(this, \"RETURN\");\n            }\n          }\n        }\n        if (activeEditLength == 0) {\n          BODY.inlineEdit.keydown.call(this, \"RETURN\");\n          U.stopEvent(_e);\n        } else {\n\n        }\n      },\n      \"TAB\": function (_e) {\n\n        var activeEditLength = 0;\n        for (var columnKey in this.inlineEditing) {\n          activeEditLength++;\n\n          BODY.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\n          // next focus\n          if (activeEditLength == 1) {\n            if (BODY.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\n              BODY.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\n            }\n          }\n        }\n      }\n    };\n    if (_act in processor) processor[_act].call(this, _data);\n    return this;\n  }\n\n  /**\n   * 선택된 셀을 클립보드에 복사합니다\n   * @method\n   * @return {*}\n   */\n  copySelect() {\n    let copysuccess,\n      $clipBoard = this.$[\"form\"][\"clipboard\"],\n      copyTextArray = [], copyText = \"\",\n      _rowIndex, _colIndex, _dindex, _di = 0;\n\n    for (let c in this.selectedColumn) {\n      let _column = this.selectedColumn[c];\n\n      if (_column) {\n        if (typeof _dindex === \"undefined\") {\n          _dindex = _column.dindex;\n          _rowIndex = _column.rowIndex;\n          _colIndex = _column.rowIndex;\n        }\n\n        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n          _di++;\n        }\n\n        if (!copyTextArray[_di]) {\n          copyTextArray[_di] = [];\n        }\n        let originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n        if (originalColumn) {\n          if (this.list[_column.dindex].__isGrouping) {\n            copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n          } else {\n            copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n          }\n        } else {\n          copyTextArray[_di].push(\"\");\n        }\n\n        _dindex = _column.dindex;\n        _rowIndex = _column.rowIndex;\n      }\n    }\n\n    copyTextArray.forEach(function (r) {\n      copyText += r.join('\\t') + \"\\n\";\n    });\n\n    $clipBoard.get(0).innerText = copyText;\n    $clipBoard.select();\n\n    try {\n      copysuccess = document.execCommand(\"copy\");\n    }\n    catch (e) {\n      copysuccess = false;\n    }\n    return copysuccess;\n  }\n\n  /**\n   * @method\n   * @param _data\n   * @return {AX6UIGrid}\n   * @example\n   * ```js\n   * import {AX6UIGrid as Grid} from \"ax6ui\";\n   *\n   * let grid = new Grid({target: el});\n   * grid.setData([\n   *  {name: \"Thomas\"}\n   * ]);\n   *\n   * grid.setData({\n     *  list: [],\n     *  page: {\n     *      currentPage: 0,\n     *      pageSize: 50,\n     *      totalElements: 500,\n     *      totalPages: 100\n     *  }\n     * });\n   * ```\n   */\n  setData(_data) {\n    let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\");\n\n    DATA.set.call(this, _data);\n    alignGrid.call(this);\n    BODY.repaint.call(this);\n    SCROLLER.resize.call(this);\n    PAGE.navigationUpdate.call(this);\n\n    if (!isFirstPaint) BODY.scrollTo.call(this, {top: 0});\n\n    isFirstPaint = null;\n    return this;\n  }\n\n  /**\n   * @method\n   * @param _type\n   * @return {*}\n   * @example\n   * ```js\n   * import {AX6UIGrid as Grid} from \"ax6ui\";\n   * let grid = new Grid({target: el});\n   * grid.setData([]);\n   *\n   * grid.getList(); // return all\n   * grid.getList(\"selected\");\n   * grid.getList(\"modified\");\n   * grid.getList(\"deleted\");\n   * ```\n   */\n  getList(_type) {\n    return DATA.getList.call(this, _type);\n  }\n\n  /**\n   * @method\n   * @param _height\n   * @return {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.setHeight(height);\n   * ```\n   */\n  setHeight(_height) {\n    if (_height == \"100%\") {\n      _height = this.$target.offsetParent().innerHeight();\n    }\n    this.$target.css({height: _height});\n    this.$[\"container\"][\"root\"].css({height: _height});\n    alignGrid.call(this);\n    BODY.repaint.call(this, \"reset\");\n    SCROLLER.resize.call(this);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param _row\n   * @param {Number|String} [_dindex=\"last\"]\n   * @param _options\n   * @param {Boolean} [_options.sort]\n   * @param {Number|String} [_options.focus] - HOME|END|[dindex]\n   * @return {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.addRow($.extend({}, {...}), \"first\");\n   * grid.addRow($.extend({}, {...}), \"last\", {focus: \"END\"});\n   * grid.addRow($.extend({}, {...}), \"last\", {focus: \"HOME\"});\n   * grid.addRow($.extend({}, {...}), \"last\", {focus: 10});\n   * ```\n   */\n  addRow(_row, _dindex, _options) {\n    DATA.add.call(this, _row, _dindex, _options);\n    alignGrid.call(this);\n    BODY.repaint.call(this, \"reset\");\n    if (_options && _options.focus) {\n      BODY.moveFocus.call(this, _options.focus);\n    }\n    SCROLLER.resize.call(this);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param _list\n   * @return {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.appendToList([{},{},{}]);\n   * grid.appendToList([{},{},{}]);\n   * ```\n   */\n  appendToList(_list) {\n    DATA.append.call(this, _list, (function () {\n      alignGrid.call(this);\n      BODY.repaint.call(this);\n      SCROLLER.resize.call(this);\n    }).bind(this));\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Number|String} [_dindex=last]\n   * @return {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.removeRow();\n   * grid.removeRow(\"first\");\n   * grid.removeRow(\"last\");\n   * grid.removeRow(1);\n   * grid.removeRow(\"selected\");\n   * ```\n   */\n  removeRow(_dindex) {\n    DATA.remove.call(this, _dindex);\n    alignGrid.call(this);\n    BODY.repaint.call(this, \"reset\");\n    BODY.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n    SCROLLER.resize.call(this);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param _row\n   * @param _dindex\n   * @return {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.updateRow({price: 100, amount: 100, cost: 10000}, 1);\n   * ```\n   */\n  updateRow(_row, _dindex) {\n    DATA.update.call(this, _row, _dindex);\n    // todo : mergeCells 옵션에 따라 예외처리\n    BODY.repaintRow.call(this, _dindex);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Number} _dindex\n   * @param {Object} _updateData\n   * @param {Object} [_options]\n   * @param {Function} [_options.filter]\n   * @returns {AX6UIGrid}\n   * @example\n   * ```js\n   * onDataChanged: function () {\n     *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked});\n     * }\n   *\n   * onDataChanged: function () {\n     *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked}, {filter: function(){\n     *          return this.item.type == \"A\";\n     *      });\n     * }\n     * ```\n     */\n  updateChildRows(_dindex, _updateData, _options) {\n    DATA.updateChild.call(this, _dindex, _updateData, _options);\n    this.xvar.paintStartRowIndex = undefined;\n    this.xvar.paintStartColumnIndex = undefined;\n    BODY.repaint.call(this);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Number|String} _dindex\n   * @returns {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.deleteRow(\"first\");\n   * grid.deleteRow(\"last\");\n   * grid.deleteRow(1);\n   * grid.deleteRow(\"selected\");\n   * ```\n   */\n  deleteRow(_dindex) {\n    DATA.deleteRow.call(this, _dindex);\n    alignGrid.call(this);\n    BODY.repaint.call(this, \"reset\");\n\n    SCROLLER.resize.call(this);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param _dindex\n   * @param _key\n   * @param _value\n   * @returns {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.setValue(0, \"price\", 100);\n   * ```\n   */\n  setValue(_dindex, _key, _value) {\n    let doindex;\n\n    if (DATA.setValue.call(this, _dindex, doindex, _key, _value)) {\n      let repaintCell = function (_panelName, _rows, __dindex, __doindex, __key, __value) {\n        for (let r = 0, rl = _rows.length; r < rl; r++) {\n          for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {\n            if (_rows[r].cols[c].key == __key) {\n              if (this.xvar.frozenRowIndex > __dindex) {\n                BODY.repaintCell.call(this, \"top-\" + _panelName, __dindex, __doindex, r, c, __value);\n              } else {\n                BODY.repaintCell.call(this, _panelName + \"-scroll\", __dindex, __doindex, r, c, __value);\n              }\n            }\n          }\n        }\n      };\n\n      repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, doindex, _key, _value);\n      repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, doindex, _key, _value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Object} _column\n   * @param {Number|String} [_cindex=last]\n   * @returns {AX6UIGrid}\n   */\n  addColumn(_column, _cindex) {\n    const processor = {\n      \"first\": function (_column) {\n        this.config.columns = [].concat(_column).concat(this.config.columns);\n      },\n      \"last\": function (_column) {\n        this.config.columns = this.config.columns.concat([].concat(_column));\n      }\n    };\n\n    if (typeof _column === \"undefined\") throw '_column must not be null';\n    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n    if (_cindex in processor) {\n      processor[_cindex].call(this, _column);\n    } else {\n      if (!U.isNumber(_cindex)) {\n        throw 'invalid argument _cindex';\n      }\n      if (U.isArray(_column)) {\n        for (let _i = 0, _l = _column.length; _i < _l; _i++) {\n          this.config.columns.splice(_cindex + _i, 0, _column[_i]);\n        }\n      } else {\n        this.config.columns.splice(_cindex, 0, _column);\n      }\n    }\n    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Number|String} [_cindex=last]\n   * @returns {AX6UIGrid}\n   */\n  removeColumn(_cindex) {\n    const processor = {\n      \"first\": function (_cindex) {\n        this.config.columns.splice(_cindex, 1);\n      },\n      \"last\": function () {\n        this.config.columns.splice(this.config.columns.length - 1, 1);\n      }\n    };\n    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n    if (_cindex in processor) {\n      processor[_cindex].call(this, _cindex);\n    } else {\n      if (!U.isNumber(_cindex)) {\n        throw 'invalid argument _cindex';\n      }\n      //\n      this.config.columns.splice(_cindex, 1);\n    }\n    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Object} _column\n   * @param {Number} _cindex\n   * @returns {AX6UIGrid}\n   */\n  updateColumn(_column, _cindex) {\n    if (!U.isNumber(_cindex)) {\n      throw 'invalid argument _cindex';\n    }\n    //\n    this.config.columns.splice(_cindex, 1, _column);\n    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Number} _width\n   * @param {Number} _cindex\n   * @returns {AX6UIGrid}\n   */\n  setColumnWidth(_width, _cindex) {\n    this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n    this.needToPaintSum = true;\n\n    // 컬럼너비 변경사항 적용.\n    HEADER.repaint.call(this);\n    BODY.repaint.call(this, true);\n    SCROLLER.resize.call(this);\n\n    alignGrid.call(this);\n    return this;\n  }\n\n  /**\n   * @method\n   * @returns {Object} sortInfo\n   */\n  getColumnSortInfo() {\n    let that = {sortInfo: []};\n    for (let k in this.sortInfo) {\n      that.sortInfo.push({\n        key: k,\n        orderBy: this.sortInfo[k].orderBy,\n        seq: this.sortInfo[k].seq\n      });\n    }\n    that.sortInfo.sort(function (a, b) {\n      return a.seq > b.seq;\n    });\n    return that.sortInfo;\n  }\n\n  /**\n   * @method\n   * @param {Object} _sortInfo\n   * @param {Object} _sortInfo.key\n   * @param {Number} _sortInfo.key.seq - seq of sortOrder\n   * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\n   * @returns {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\n   * ```\n   */\n  setColumnSort(_sortInfo) {\n    if (typeof _sortInfo !== \"undefined\") {\n      this.sortInfo = _sortInfo;\n      HEADER.applySortStatus.call(this, _sortInfo);\n    }\n\n    sortColumns.call(this, _sortInfo || this.sortInfo);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Number|Object} _selectObject\n   * @param {Number} _selectObject.index - index of row\n   * @param {Number} _selectObject.rowIndex - rowIndex of columns\n   * @param {Number} _selectObject.conIndex - colIndex of columns\n   * @param {Object} _options\n   * @param {Boolean} _options.selectedClear\n   * @param {Boolean} _options.selected\n   * @returns {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.select(0);\n   * grid.select(0, {selected: true});\n   * grid.select(0, {selected: false});\n   * grid.select(0, {selectedClear: true});\n   * ```\n   */\n  select(_selectObject, _options) {\n    if (U.isNumber(_selectObject)) {\n      let dindex = _selectObject;\n\n      if (!this.config.multipleSelect) {\n        this.clearSelect();\n      } else {\n        if (_options && _options.selectedClear) {\n          this.clearSelect();\n        }\n      }\n\n      DATA.select.call(this, dindex, undefined, _options && _options.selected);\n      BODY.updateRowState.call(this, [\"selected\"], dindex, undefined);\n    }\n    return this;\n  }\n\n  /**\n   * @method\n   * @param _dindex\n   * @return {AX6UIGrid}\n   */\n  clickBody(_dindex) {\n    BODY.click.call(this, _dindex);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param _dindex\n   * @return {AX6UIGrid}\n   */\n  DBLClickBody(_dindex) {\n    BODY.dblClick.call(this, _dindex);\n    return this;\n  }\n\n  /**\n   * @method\n   * @return {AX6UIGrid}\n   */\n  clearSelect() {\n    BODY.updateRowState.call(this, [\"selectedClear\"]);\n    DATA.clearSelect.call(this);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {Object} _options\n   * @param {Boolean} _options.selected\n   * @param {Function} _options.filter\n   * @returns {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.selectAll();\n   * grid.selectAll({selected: true});\n   * grid.selectAll({selected: false});\n   * grid.selectAll({filter: function(){\n     *      return this[\"b\"] == \"A01\";\n     * });\n     * grid.selectAll({selected: true, filter: function(){\n     *      return this[\"b\"] == \"A01\";\n     * });\n     * ```\n     */\n  selectAll(_options) {\n    DATA.selectAll.call(this, _options && _options.selected, _options);\n    BODY.updateRowStateAll.call(this, [\"selected\"]);\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {String} _fileName\n   * @returns {AX6UIGrid|String}\n   * @example\n   * ```js\n   * grid.exportExcel(\"grid-to-excel.xls\");\n   * console.log(grid.exportExcel());\n   * ```\n   */\n  exportExcel(_fileName) {\n    let table = [];\n    table.push('<table border=\"1\">');\n    table.push(HEADER.getExcelString.call(this));\n    table.push(BODY.getExcelString.call(this));\n    table.push('</table>');\n\n    if (typeof _fileName === \"undefined\") {\n      return table.join('');\n    }\n    else {\n      EXCEL.export.call(this, [table.join('')], _fileName);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method\n   * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END\n   * @returns {AX6UIGrid}\n   * @example\n   * ```js\n   * grid.focus(\"UP\");\n   * grid.focus(\"DOWN\");\n   * grid.focus(\"HOME\");\n   * grid.focus(\"END\");\n   * ```\n   */\n  focus(_pos) {\n\n    if (BODY.moveFocus.call(this, _pos)) {\n      let focusedColumn;\n      for (let c in this.focusedColumn) {\n        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n        break;\n      }\n      if (focusedColumn) {\n        this.select(focusedColumn.dindex, {selectedClear: true});\n      }\n    }\n    else {\n      if (typeof this.selectedDataIndexs[0] === \"undefined\") {\n        this.select(0);\n      } else {\n        let selectedIndex = this.selectedDataIndexs[0];\n        const processor = {\n          \"UP\": function () {\n            if (selectedIndex > 0) {\n              this.select(selectedIndex - 1, {selectedClear: true});\n              BODY.moveFocus.call(this, selectedIndex - 1);\n            }\n          },\n          \"DOWN\": function () {\n            if (selectedIndex < this.list.length - 1) {\n              this.select(selectedIndex + 1, {selectedClear: true});\n              BODY.moveFocus.call(this, selectedIndex + 1);\n            }\n          },\n          \"HOME\": function () {\n            this.select(0, {selectedClear: true});\n            BODY.moveFocus.call(this, 0);\n          },\n          \"END\": function () {\n            this.select(this.list.length - 1, {selectedClear: true});\n            BODY.moveFocus.call(this, this.list.length - 1);\n          }\n        };\n\n        if (_pos in processor) {\n          processor[_pos].call(this);\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @method\n   * @return {null}\n   */\n  destroy() {\n    this.$target.empty();\n    this.list = [];\n\n    return null;\n  }\n}\n\nexport default AX6UIGrid;"]}