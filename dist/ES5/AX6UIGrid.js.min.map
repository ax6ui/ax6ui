{"version":3,"sources":["AX6UIGrid.js"],"names":["_jqmin","require","_AX6UICore2","_AX6Util","_AX6Info","_AX6Mustache","_AX6UIGrid_data","_AX6UIGrid_header","_AX6UIGrid_body","_AX6UIGrid_scroller","_AX6UIGrid_page","_AX6UIGrid_tmpl","_AX6UIGrid_util","ctrlKeys","33","34","35","36","37","38","39","40","initGrid","data","instanceId","this","id","$target","html","_AX6Mustache2","default","render","_AX6UIGrid_tmpl2","main","call","$","container","hidden","find","root","header","body","page","scroller","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","body-scroll","right-body","right-body-scroll","bottom-aside-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal","corner","status","form","clipboard","resizer","css","height","config","_height","initColumns","_columns","columns","_AX6Util2","deepCopy","headerTable","_AX6UIGrid_util2","xvar","frozenColumnIndex","bodyRowTable","makeBodyRowTable","bodyRowMap","makeBodyRowMap","bodyTrHeight","length","columnHeight","colGroupMap","r","rl","row","c","cl","cols","_jqmin2","extend","colGroup","k","push","onResetColumns","resetColGroupWidth","footSum","initFootSum","needToPaintSum","grouping","initBodyGroup","alignGrid","_AX6UIGrid_header2","repaint","_AX6UIGrid_body2","_AX6UIGrid_scroller2","resize","_this","CT_WIDTH","width","showLineNumber","lineNumberColumnWidth","showRowSelector","rowSelectorColumnWidth","size","totalWidth","computedWidth","autoWidthColgroupIndexs","i","l","_width","right","rows","left","_footSum","isArray","footSumColumns","footSumTable","_grouping","by","makeBodyGroupingTable","bodyGrouping","sortInfo","kl","seq","fixed","key","sortFixed","_isFirst","_this2","Math","min","isNumber","innerHeight","CT_INNER_WIDTH","asidePanelWidth","frozenPanelWidth","endIndex","verticalScrollerWidth","horizontalScrollerHeight","bodyHeight","frozenRowHeight","frozenRowIndex","footSumHeight","bodyGroupingTable","headerHeight","display","pageHeight","orderBy","CT_HEIGHT","list","totalColGroupWidth","bodyWidth","CT_INNER_HEIGHT","innerWidth","panelDisplayProcess","vPosition","hPosition","containerType","isHide","rightSum","scrollerDisplayProcess","scrollerWidth","scrollerHeight","_sortInfo","isFunction","remoteSort","that","sort","a","b","_AX6UIGrid_data2","initData","clearGroupingData","AX6UIGrid","_ret","_classCallCheck","_this3","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","theme","animateTime","debounceTime","appendDebouncer","appendDebounceTimes","appendProgressIcon","appendProgress","multipleSelect","virtualScrollY","virtualScrollX","virtualScrollYCountMargin","virtualScrollAccelerated","virtualScrollAcceleratedDelayTime","columnMinWidth","sortable","undefined","align","columnPadding","columnBorderWidth","mergeCells","barMinSize","trackPadding","tree","use","iconWidth","selfHash","children","statusDisplay","navigationItemCount","scrollTimer","selected","indentWidth","openedArrow","itemIcon","selfKey","depth","deletedList","focused","focusedColumn","selectedColumn","isInlineEditing","inlineEditing","listIndexMap","contextMenu","leftHeaderData","headerData","rightHeaderData","leftBodyRowData","bodyRowData","rightBodyRowData","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","bodyGroupingMap","leftFootSumData","footSumData","init","_this4","onStateChanged","onClick","onLoad","onDataChanged","initOnce","target","isObject","error","parseJson","attr","columnKeys","window","on","throttle","e","bind","which","_AX6Info2","ESC","keyDown","originalEvent","eventKeys","RETURN","TAB","UP","DOWN","metaKey","ctrlKey","copySelect","stopEvent","blur","self","SPACE","keys","document","isPickerClick","findParentNode","_target","getAttribute","setTimeout","initialized","_act","_data","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","_e","active","inlineEdit","keydown","activeEditLength","columnKey","shiftKey","copysuccess","$clipBoard","copyTextArray","copyText","_rowIndex","_dindex","_di","_column","dindex","rowIndex","originalColumn","colIndex","__isGrouping","forEach","join","get","innerText","select","execCommand","isFirstPaint","paintStartRowIndex","set","_colIndex","_AX6UIGrid_page2","navigationUpdate","scrollTo","top","_type","getList","_row","_options","_list","append","remove","update","repaintRow","_updateData","updateChild","paintStartColumnIndex","deleteRow","_key","_value","setValue","doindex","repaintCell","_panelName","_rows","__dindex","__doindex","__key","__value","add","focus","_cindex","first","concat","_i","_l","splice","last","columnResizerIndex","applySortStatus","sortColumns","_selectObject","selectedClear","clearSelect","updateRowState","click","dblClick","selectAll","updateRowStateAll","table","getExcelString","_fileName","_pos","selectedDataIndexs","selectedIndex","HOME","END","empty"],"mappings":"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","file":"AX6UIGrid.js","sourcesContent":["import jQuery from \"jqmin\";\nimport AX6UICore from \"./AX6UICore.js\";\nimport U from \"./AX6Util\";\nimport info from \"./AX6Info\";\nimport mustache from \"./AX6Mustache\";\n\nimport DATA from \"./AX6UIGrid_data\";\nimport HEADER from \"./AX6UIGrid_header\";\nimport BODY from \"./AX6UIGrid_body\";\nimport SCROLLER from \"./AX6UIGrid_scroller\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport TMPL from \"./AX6UIGrid_tmpl\";\nimport UTIL from \"./AX6UIGrid_util\";\n\nimport \"./AX6UIGrid/index.scss\";\n\n\nconst ctrlKeys = {\n    \"33\": \"KEY_PAGEUP\",\n    \"34\": \"KEY_PAGEDOWN\",\n    \"35\": \"KEY_END\",\n    \"36\": \"KEY_HOME\",\n    \"37\": \"KEY_LEFT\",\n    \"38\": \"KEY_UP\",\n    \"39\": \"KEY_RIGHT\",\n    \"40\": \"KEY_DOWN\"\n};\nconst initGrid = function () {\n    // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n    let data = {\n        instanceId: this.id\n    };\n\n    this.$target.html(mustache.render(TMPL.main.call(this), data));\n\n    // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n    this.$ = {\n        \"container\": {\n            \"hidden\": this.$target.find('[data-ax6grid-container=\"hidden\"]'),\n            \"root\": this.$target.find('[data-ax6grid-container=\"root\"]'),\n            \"header\": this.$target.find('[data-ax6grid-container=\"header\"]'),\n            \"body\": this.$target.find('[data-ax6grid-container=\"body\"]'),\n            \"page\": this.$target.find('[data-ax6grid-container=\"page\"]'),\n            \"scroller\": this.$target.find('[data-ax6grid-container=\"scroller\"]')\n        },\n        \"panel\": {\n            \"aside-header\": this.$target.find('[data-ax6grid-panel=\"aside-header\"]'),\n            \"left-header\": this.$target.find('[data-ax6grid-panel=\"left-header\"]'),\n            \"header\": this.$target.find('[data-ax6grid-panel=\"header\"]'),\n            \"header-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"header\"]'),\n            \"right-header\": this.$target.find('[data-ax6grid-panel=\"right-header\"]'),\n            \"top-aside-body\": this.$target.find('[data-ax6grid-panel=\"top-aside-body\"]'),\n            \"top-left-body\": this.$target.find('[data-ax6grid-panel=\"top-left-body\"]'),\n            \"top-body\": this.$target.find('[data-ax6grid-panel=\"top-body\"]'),\n            \"top-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"top-body\"]'),\n            \"top-right-body\": this.$target.find('[data-ax6grid-panel=\"top-right-body\"]'),\n            \"aside-body\": this.$target.find('[data-ax6grid-panel=\"aside-body\"]'),\n            \"aside-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"aside-body\"]'),\n            \"left-body\": this.$target.find('[data-ax6grid-panel=\"left-body\"]'),\n            \"left-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"left-body\"]'),\n            \"body\": this.$target.find('[data-ax6grid-panel=\"body\"]'),\n            \"body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"body\"]'),\n            \"right-body\": this.$target.find('[data-ax6grid-panel=\"right-body\"]'),\n            \"right-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"right-body\"]'),\n            \"bottom-aside-body\": this.$target.find('[data-ax6grid-panel=\"bottom-aside-body\"]'),\n            \"bottom-left-body\": this.$target.find('[data-ax6grid-panel=\"bottom-left-body\"]'),\n            \"bottom-body\": this.$target.find('[data-ax6grid-panel=\"bottom-body\"]'),\n            \"bottom-body-scroll\": this.$target.find('[data-ax6grid-panel-scroll=\"bottom-body\"]'),\n            \"bottom-right-body\": this.$target.find('[data-ax6grid-panel=\"bottom-right-body\"]')\n        },\n        \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n        \"scroller\": {\n            \"vertical\": this.$target.find('[data-ax6grid-scroller=\"vertical\"]'),\n            \"vertical-bar\": this.$target.find('[data-ax6grid-scroller=\"vertical-bar\"]'),\n            \"horizontal\": this.$target.find('[data-ax6grid-scroller=\"horizontal\"]'),\n            \"horizontal-bar\": this.$target.find('[data-ax6grid-scroller=\"horizontal-bar\"]'),\n            \"corner\": this.$target.find('[data-ax6grid-scroller=\"corner\"]')\n        },\n        \"page\": {\n            \"navigation\": this.$target.find('[data-ax6grid-page=\"navigation\"]'),\n            \"status\": this.$target.find('[data-ax6grid-page=\"status\"]')\n        },\n        \"form\": {\n            \"clipboard\": this.$target.find('[data-ax6grid-form=\"clipboard\"]')\n        },\n        \"resizer\": {\n            \"vertical\": this.$target.find('[data-ax6grid-resizer=\"vertical\"]'),\n            \"horizontal\": this.$target.find('[data-ax6grid-resizer=\"horizontal\"]')\n        }\n    };\n\n    this.$[\"container\"][\"root\"].css({height: this.config.height || this.config._height});\n\n    return this;\n};\nconst initColumns = function (_columns) {\n    this.columns = U.deepCopy(_columns);\n    this.headerTable = UTIL.makeHeaderTable.call(this, this.columns);\n    this.xvar.frozenColumnIndex = this.config.frozenColumnIndex || 0;\n\n    this.bodyRowTable = UTIL.makeBodyRowTable.call(this, this.columns);\n    this.bodyRowMap = UTIL.makeBodyRowMap.call(this, this.bodyRowTable);\n    // 바디에 표현될 한줄의 높이를 계산합니다.\n    this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n    let colGroupMap = {};\n    for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n        let row = this.headerTable.rows[r];\n        for (let c = 0, cl = row.cols.length; c < cl; c++) {\n            colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n        }\n    }\n\n    this.colGroup = [];\n    for (var k in colGroupMap) {\n        this.colGroup.push(colGroupMap[k]);\n    }\n\n    return this;\n};\nconst onResetColumns = function () {\n    initColumns.call(this, this.config.columns);\n    resetColGroupWidth.call(this);\n    if (this.config.footSum) {\n        initFootSum.call(this, this.config.footSum);\n        this.needToPaintSum = true;\n    }\n    if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n    alignGrid.call(this, true);\n    HEADER.repaint.call(this, true);\n    BODY.repaint.call(this, true);\n    SCROLLER.resize.call(this);\n};\nconst resetColGroupWidth = function () {\n    /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n    let CT_WIDTH = this.$[\"container\"][\"root\"].width() - (() => {\n            let width = 0;\n            if (this.config.showLineNumber) width += this.config.lineNumberColumnWidth;\n            if (this.config.showRowSelector) width += this.config.rowSelectorColumnWidth;\n            width += this.config.scroller.size;\n            return width;\n        })(),\n        totalWidth = 0, computedWidth, autoWidthColgroupIndexs = [],\n        colGroup = this.colGroup,\n        i, l;\n\n    for (i = 0, l = colGroup.length; i < l; i++) {\n        if (U.isNumber(colGroup[i].width)) {\n            totalWidth += colGroup[i]._width = colGroup[i].width;\n        } else if (colGroup[i].width === \"*\") {\n            autoWidthColgroupIndexs.push(i);\n        } else if (U.right(colGroup[i].width, 1) === \"%\") {\n            totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n        }\n    }\n    if (autoWidthColgroupIndexs.length > 0) {\n        computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n        for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n            colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n        }\n    }\n};\nconst initFootSum = function (_footSum) {\n    if (U.isArray(_footSum)) {\n        this.footSumTable = UTIL.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n    } else {\n        this.footSumColumns = [];\n        this.footSumTable = {};\n    }\n};\nconst initBodyGroup = function (_grouping) {\n    let grouping = jQuery.extend({}, _grouping);\n    if (\"by\" in grouping && \"columns\" in grouping) {\n        this.bodyGrouping = {\n            by: grouping.by,\n            columns: grouping.columns\n        };\n        this.bodyGroupingTable = UTIL.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n        this.sortInfo = (function () {\n            let sortInfo = {};\n            for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                sortInfo[this.bodyGrouping.by[k]] = {\n                    orderBy: \"asc\",\n                    seq: k,\n                    fixed: true\n                };\n                for (let c = 0, cl = this.colGroup.length; c < cl; c++) {\n                    if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                        this.colGroup[c].sort = \"asc\";\n                        this.colGroup[c].sortFixed = true;\n                    }\n                }\n            }\n            return sortInfo;\n        }).call(this);\n    } else {\n        this.config.body.grouping = false;\n    }\n};\nconst alignGrid = function (_isFirst) {\n    // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\n    if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\n        return false;\n    }\n\n    if (!this.config.height) {\n        this.$[\"container\"][\"root\"].css({height: this.config._height = this.$target.height()});\n    }\n\n    let CT_WIDTH = this.$[\"container\"][\"root\"].width(),\n        CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\n        CT_INNER_WIDTH = CT_WIDTH,\n        CT_INNER_HEIGHT = CT_HEIGHT,\n        asidePanelWidth = this.config.asidePanelWidth = (() => {\n            let width = 0;\n            if (this.config.showLineNumber) width += this.config.lineNumberColumnWidth;\n            if (this.config.showRowSelector) width += this.config.rowSelectorColumnWidth;\n            return width;\n        })(),\n        frozenPanelWidth = this.config.frozenPanelWidth = ((colGroup, endIndex) => {\n            let width = 0;\n            for (let i = 0, l = endIndex; i < l; i++) {\n                width += colGroup[i]._width;\n            }\n            return width;\n        })(this.colGroup, this.config.frozenColumnIndex),\n        verticalScrollerWidth, horizontalScrollerHeight, bodyHeight;\n\n    // todo : 우측 함계컬럼 너비 계산\n    let rightPanelWidth = 0,\n        frozenRowHeight = this.config.frozenRowIndex * this.xvar.bodyTrHeight,\n        footSumHeight = this.footSumColumns.length * this.xvar.bodyTrHeight,\n        headerHeight = (this.config.header.display) ? this.headerTable.rows.length * this.config.header.columnHeight : 0,\n        pageHeight = (this.config.page.display) ? this.config.page.height : 0;\n\n    {\n        verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n        // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n        horizontalScrollerHeight = (() => {\n            let totalColGroupWidth = 0;\n            // aside 빼고 너비\n            // 수직 스크롤이 있으면 또 빼고 비교\n            let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n            for (let i = 0, l = this.colGroup.length; i < l; i++) {\n                totalColGroupWidth += this.colGroup[i]._width;\n            }\n            return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\n        })();\n\n        if (horizontalScrollerHeight > 0) {\n            verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n        }\n    }\n\n    // 수평 너비 결정\n    CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n    // 수직 스크롤러의 높이 결정.\n    CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n    bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n    const panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\n        let css = {\n                display: \"block\"\n            },\n            isHide = false;\n\n        switch (hPosition) {\n            case \"aside\":\n                if (asidePanelWidth === 0) {\n                    isHide = true;\n                } else {\n                    css[\"left\"] = 0;\n                    css[\"width\"] = asidePanelWidth;\n                }\n                break;\n            case \"left\":\n                if (this.config.frozenColumnIndex === 0) {\n                    isHide = true;\n                } else {\n                    css[\"left\"] = asidePanelWidth;\n                    css[\"width\"] = frozenPanelWidth;\n                }\n                break;\n            case \"right\":\n                if (!this.config.rightSum) {\n                    isHide = true;\n                } else {\n\n                }\n                break;\n            default:\n                if (containerType !== \"page\") {\n                    if (this.config.frozenColumnIndex === 0) {\n                        css[\"left\"] = asidePanelWidth;\n                    } else {\n                        css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                    }\n                    css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                }\n                break;\n        }\n\n        if (isHide) {\n            panel.css({display: \"none\"});\n            // 프로세스 중지\n            return this;\n        }\n\n        if (containerType === \"body\") {\n            switch (vPosition) {\n                case \"top\":\n                    if (this.config.frozenRowIndex == 0) {\n                        isHide = true;\n                    } else {\n                        css[\"top\"] = 0;\n                        css[\"height\"] = frozenRowHeight;\n                    }\n                    break;\n                case \"bottom\":\n                    if (!this.config.footSum) {\n                        isHide = true;\n                    } else {\n                        css[\"top\"] = bodyHeight - footSumHeight;\n                        css[\"height\"] = footSumHeight; // footSum height\n                    }\n                    break;\n                default:\n                    css[\"top\"] = frozenRowHeight;\n                    css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                    break;\n            }\n        } else if (containerType === \"header\") {\n            css[\"height\"] = headerHeight;\n        } else if (containerType === \"page\") {\n            if (pageHeight == 0) {\n                isHide = true;\n            } else {\n                css[\"height\"] = pageHeight;\n\n            }\n        }\n\n        if (isHide) {\n            panel.css({display: \"none\"});\n            // 프로세스 중지\n            return this;\n        }\n\n        panel.css(css);\n        return this;\n    };\n    const scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\n        let css = {\n                display: \"block\"\n            },\n            isHide = false;\n\n        switch (containerType) {\n            case \"vertical\":\n                if (scrollerWidth > 0) {\n                    css[\"width\"] = scrollerWidth;\n                    css[\"height\"] = CT_INNER_HEIGHT;\n                    css[\"bottom\"] = scrollerHeight + pageHeight;\n                } else {\n                    isHide = true;\n                }\n                break;\n            case \"horizontal\":\n                if (scrollerHeight > 0) {\n                    css[\"width\"] = CT_INNER_WIDTH;\n                    css[\"height\"] = scrollerHeight;\n                    css[\"right\"] = scrollerWidth;\n                    css[\"bottom\"] = pageHeight;\n                } else {\n                    isHide = true;\n                }\n                break;\n            case \"corner\":\n                if (scrollerWidth > 0 && scrollerHeight > 0) {\n                    css[\"width\"] = scrollerWidth;\n                    css[\"height\"] = scrollerHeight;\n                    css[\"bottom\"] = pageHeight;\n                } else {\n                    isHide = true;\n                }\n                break;\n        }\n\n        if (isHide) {\n            panel.css({display: \"none\"});\n            // 프로세스 중지\n            return this;\n        }\n\n        panel.css(css);\n    };\n\n    this.$[\"container\"][\"header\"].css({height: headerHeight});\n    this.$[\"container\"][\"body\"].css({height: bodyHeight});\n\n    // 각 패널들의 크기 표시여부를 결정합니다\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n    panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n\n    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n    scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n    panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n\n    // 각 패널의 사이즈 결정\n    /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.\n    this.xvar.bodyHeight = this.$.panel[\"body\"].height();\n    this.xvar.bodyWidth = this.$.panel[\"body\"].width();\n    // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth\n\n    return true;\n};\nconst sortColumns = function (_sortInfo) {\n    HEADER.repaint.call(this);\n\n    if (U.isFunction(this.config.remoteSort)) {\n        let that = {sortInfo: []};\n        for (let k in _sortInfo) {\n            that.sortInfo.push({\n                key: k,\n                orderBy: _sortInfo[k].orderBy,\n                seq: _sortInfo[k].seq\n            });\n        }\n        that.sortInfo.sort(function (a, b) {\n            return a.seq > b.seq;\n        });\n        this.config.remoteSort.call(that, that);\n    } else {\n        if (this.config.body.grouping) {\n            this.list = DATA.initData.call(this,\n                DATA.sort.call(this,\n                    _sortInfo,\n                    DATA.clearGroupingData.call(this,\n                        this.list\n                    )\n                )\n            );\n        }\n        else {\n            this.list = DATA.sort.call(this, _sortInfo,\n                DATA.clearGroupingData.call(this,\n                    this.list\n                ),\n                {resetLineNumber: true}\n            );\n        }\n        BODY.repaint.call(this, true);\n        SCROLLER.resize.call(this);\n    }\n};\n\n\n/**\n * @class\n */\nclass AX6UIGrid extends AX6UICore {\n    /**\n     * @constructor\n     * @param config\n     */\n    constructor(config) {\n        super();\n\n        /**\n         * @member {JSON}\n         * @param config\n         * @param {Element} config.target\n         * @param {Number} [config.frozenColumnIndex=0]\n         * @param {Number} [config.frozenRowIndex=0]\n         * @param {Boolean} [config.showLineNumber=false]\n         * @param {Boolean} [config.showRowSelector=false]\n         * @param {Boolean} [config.multipleSelect=true]\n         * @param {Number} [config.columnMinWidth=100]\n         * @param {Number} [config.lineNumberColumnWidth=30]\n         * @param {Number} [config.rowSelectorColumnWidth=25]\n         * @param {Boolean} [config.sortable=false]\n         * @param {Boolean} [config.multiSort=false]\n         * @param {Function} [config.remoteSort=false]\n         * @param {Boolean} [config.virtualScrollY=true] - 세로축 가상스크롤 처리여부\n         * @param {Boolean} [config.virtualScrollX=true] - 가로축 가상스크롤 처리여부\n         * @param {Object} [config.header]\n         * @param {String} [config.header.align]\n         * @param {Number} [config.header.columnHeight=25]\n         * @param {Number} [config.header.columnPadding=3]\n         * @param {Number} [config.header.columnBorderWidth=1]\n         * @param {Object} [config.body]\n         * @param {Function} [config.body.onClick]\n         * @param {Function} [config.body.onDBLClick]\n         * @param {Function} [config.body.onDataChanged]\n         * @param {String|Array} [config.body.mergeCells=false] -\n         * @param {String} [config.body.align]\n         * @param {Number} [config.body.columnHeight=25]\n         * @param {Number} [config.body.columnPadding=3]\n         * @param {Number} [config.body.columnBorderWidth=1]\n         * @param {Object} [config.body.grouping]\n         * @param {Array} [config.body.grouping.by] - list grouping keys\n         * @param {Array} [config.body.grouping.columns] - list grouping columns\n         * @param {(String|Function)} [config.body.trStyleClass]\n         * @param {Object} [config.page]\n         * @param {Number} [config.page.height=25]\n         * @param {Boolean} [config.page.display=true] - grid page display\n         * @param {Boolean} [config.page.statusDisplay=true] - grid status display\n         * @param {Number} [config.page.navigationItemCount=5]\n         * @param {Object} [config.scroller]\n         * @param {Number} [config.scroller.size=15]\n         * @param {Number} [config.scroller.barMinSize=15]\n         * @param {Number} [config.scroller.trackPadding=4]\n         * @param {Object} [config.columnKeys]\n         * @param {String} [config.columnKeys.selected=\"_SELECTED\"]\n         * @param {Object[]} config.columns\n         * @param {String} config.columns[].key\n         * @param {String} config.columns[].label\n         * @param {Number} config.columns[].width\n         * @param {(String|Function)} config.columns[].styleClass\n         * @param {(String|Function)} config.columns[].headerStyleClass\n         * @param {Boolean} config.columns[].enableFilter\n         * @param {Boolean} config.columns[].sortable\n         * @param {String} config.columns[].align\n         * @param {(String|Function)} config.columns[].formatter\n         * @param {Object} config.columns[].editor\n         * @param {String} config.columns[].editor.type - text,number,money,date\n         * @param {Object} config.columns[].editor.config\n         * @param {Array} config.columns[].editor.updateWith\n         * @param {Function} config.columns[].editor.disabled - disable editor\n         * @param {Boolean} [config.columns[].multiLine=false]\n         * @param {Object} [config.tree]\n         * @param {Boolean} [config.tree.use=false] - Whether tree-type data is used\n         * @param {Number} [config.tree.hashDigit=8]\n         * @param {Number} [config.tree.indentWidth=10]\n         * @param {Number} [config.tree.arrowWidth=15]\n         * @param {Number} [config.tree.iconWidth=18]\n         * @param {Object} [config.tree.icons]\n         * @param {String} [config.tree.icons.openedArrow='▾']\n         * @param {String} [config.tree.icons.collapsedArrow='▸']\n         * @param {String} [config.tree.icons.groupIcon='⊚']\n         * @param {String} [config.tree.icons.collapsedGroupIcon='⊚']\n         * @param {String} [config.tree.icons.itemIcon='⊙']\n         * @param {Object} [config.tree.columnKeys]\n         * @param {String} [config.tree.columnKeys.parentKey=\"pid\"]\n         * @param {String} [config.tree.columnKeys.selfKey=\"id\"]\n         * @param {String} [config.tree.columnKeys.collapse=\"collapse\"]\n         * @param {String} [config.tree.columnKeys.hidden=\"hidden\"]\n         * @param {String} [config.tree.columnKeys.parentHash=\"__hp__\"]\n         * @param {String} [config.tree.columnKeys.selfHash=\"__hs__\"]\n         * @param {String} [config.tree.columnKeys.children=\"__children__\"]\n         * @param {String} [config.tree.columnKeys.depth=\"__depth__\"]\n         *\n         */\n        this.config = {\n            theme: 'default',\n            animateTime: 250,\n            debounceTime: 250,\n            appendDebouncer: null,\n            appendDebounceTimes: 0,\n            appendProgressIcon: '...',\n            appendProgress: false,\n\n            // 틀고정 속성\n            frozenColumnIndex: 0,\n            frozenRowIndex: 0,\n            showLineNumber: false,\n            showRowSelector: false,\n            multipleSelect: true,\n            virtualScrollY: true,\n            virtualScrollX: true,\n\n            // 스크롤될 때 body 페인팅 딜레이를 주어 성능이 좋은 않은 브라우저에서 반응을 빠르게 할 때 사용하는 옵션들\n            virtualScrollYCountMargin: 0,\n            virtualScrollAccelerated: true,\n            virtualScrollAcceleratedDelayTime: 10,\n\n            height: 0,\n            columnMinWidth: 100,\n            lineNumberColumnWidth: 30,\n            rowSelectorColumnWidth: 26,\n            sortable: undefined,\n            remoteSort: false,\n\n            header: {\n                display: true,\n                align: false,\n                columnHeight: 26,\n                columnPadding: 3,\n                columnBorderWidth: 1\n            },\n            body: {\n                align: false,\n                columnHeight: 26,\n                columnPadding: 3,\n                columnBorderWidth: 1,\n                grouping: false,\n                mergeCells: false\n            },\n            rightSum: false,\n            footSum: false,\n            page: {\n                height: 25,\n                display: true,\n                statusDisplay: true,\n                navigationItemCount: 5\n            },\n            scroller: {\n                size: 15,\n                barMinSize: 15,\n                trackPadding: 4\n            },\n            columnKeys: {\n                selected: '__selected__',\n                modified: '__modified__',\n                deleted: '__deleted__',\n                disableSelection: '__disable_selection__'\n            },\n            tree: {\n                use: false,\n                hashDigit: 8,\n                indentWidth: 10,\n                arrowWidth: 15,\n                iconWidth: 18,\n                icons: {\n                    openedArrow: '▾',\n                    collapsedArrow: '▸',\n                    groupIcon: '⊚',\n                    collapsedGroupIcon: '⊚',\n                    itemIcon: '⊙'\n                },\n                columnKeys: {\n                    parentKey: \"pid\",\n                    selfKey: \"id\",\n                    collapse: \"collapse\",\n                    hidden: \"hidden\",\n                    parentHash: \"__hp__\",\n                    selfHash: \"__hs__\",\n                    children: \"__children__\",\n                    depth: \"__depth__\",\n                }\n            }\n        };\n        jQuery.extend(true, this.config, config);\n\n        // 멤버 변수 초기화\n        /**\n         * @member {Object}\n         */\n        this.xvar = {\n            bodyTrHeight: 0, // 한줄의 높이\n            scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n            scrollContentHeight: 0, // 스크롤 된 내용물의 높이\n            scrollTimer: null\n        };\n\n        // 그리드 데이터셋\n        /**\n         * @member {Array}\n         */\n        this.columns = []; // config.columns에서 복제된 오브젝트\n        /**\n         * @member {Array}\n         */\n        this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n        /**\n         * @member {Array}\n         */\n        this.footSumColumns = [];\n        /**\n         * @member {Object}\n         */\n        this.bodyGrouping = {};\n        /**\n         * @member {Array}\n         */\n        this.list = []; // 그리드의 데이터\n        /**\n         * @member {Array}\n         */\n        this.proxyList = null; // 그리드 데이터의 대리자\n        /**\n         * @member {Object}\n         */\n        this.page = {}; // 그리드의 페이지 정보\n\n        this.selectedDataIndexs = [];\n        this.deletedList = [];\n\n        this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n        this.focused = false;\n        this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n        this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n        this.isInlineEditing = false;\n        this.inlineEditing = {};\n        this.listIndexMap = {}; // tree데이터 사용시 데이터 인덱싱 맵\n        this.contextMenu = null; // contentMenu 의 인스턴스\n\n        // header\n        /**\n         * @member {Object}\n         */\n        this.headerTable = {};\n        /**\n         * @member {Object}\n         */\n        this.leftHeaderData = {};\n        /**\n         * @member {Object}\n         */\n        this.headerData = {};\n        /**\n         * @member {Object}\n         */\n        this.rightHeaderData = {};\n\n        // body\n        /**\n         * @member {Object}\n         */\n        this.bodyRowTable = {};\n        /**\n         * @member {Object}\n         */\n        this.leftBodyRowData = {};\n        /**\n         * @member {Object}\n         */\n        this.bodyRowData = {};\n        /**\n         * @member {Object}\n         */\n        this.rightBodyRowData = {};\n        /**\n         * @member {Object}\n         */\n        this.bodyRowMap = {};\n\n        /**\n         * @member {Object}\n         */\n        this.bodyGroupingTable = {};\n        /**\n         * @member {Object}\n         */\n        this.leftBodyGroupingData = {};\n        /**\n         * @member {Object}\n         */\n        this.bodyGroupingData = {};\n        /**\n         * @member {Object}\n         */\n        this.rightBodyGroupingData = {};\n        /**\n         * @member {Object}\n         */\n        this.bodyGroupingMap = {};\n\n        // footSum\n        /**\n         * @member {Object}\n         */\n        this.footSumTable = {}; // footSum의 출력레이아웃\n        /**\n         * @member {Object}\n         */\n        this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n        /**\n         * @member {Object}\n         */\n        this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n        /**\n         * @member {Boolean}\n         */\n        this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n        if (typeof config !== \"undefined\") this.init();\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param config\n     */\n    init() {\n        // 그리드의 이벤트 정의 구간\n        this.onStateChanged = this.config.onStateChanged;\n        this.onClick = this.config.onClick;\n        this.onLoad = this.config.onLoad;\n        this.onDataChanged = this.config.body.onDataChanged;\n\n        // init 호출 여부\n        this.initOnce();\n\n        if (typeof this.config.target !== \"undefined\") {\n\n            this.$target = jQuery(this.config.target);\n\n            // target attribute data\n            (function (data) {\n                if (U.isObject(data) && !data.error) {\n                    this.config = jQuery.extend(true, {}, this.config, data);\n                }\n            }).call(this, U.parseJson(this.$target.attr(\"data-ax6ui-grid-config\"), true));\n\n            if (!this.config.height) {\n                this.config._height = this.$target.height();\n            }\n\n            if (!this.id) this.id = this.$target.data(\"ax6ui-grid-id\");\n            if (!this.id) {\n                this.id = 'ax6ui-grid-' + this.instanceId;\n                this.$target.data(\"ax6ui-grid-id\", this.id);\n            }\n\n            DATA.init.call(this);\n\n            if (this.config.tree.use) { // 트리라면\n                this.sortInfo = {};\n                this.sortInfo[this.config.tree.columnKeys.selfHash] = {orderBy: \"asc\", seq: 0, fixed: true};\n            }\n\n            ///========\n            // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n            initGrid.call(this);\n\n            // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n            initColumns.call(this, this.config.columns);\n            resetColGroupWidth.call(this);\n\n            // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n            if (this.config.footSum) initFootSum.call(this, this.config.footSum);\n\n            // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n            if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n\n            // 그리드의 각 요소의 크기를 맞춤니다.\n            alignGrid.call(this, true);\n\n            // columns의 데이터로 header데이터를 만들고\n            HEADER.init.call(this);\n            // header를 출력합니다.\n            HEADER.repaint.call(this);\n\n            // columns의 데이터로 body데이터를 만들고\n            BODY.init.call(this);\n            // body를 출력합니다.\n            BODY.repaint.call(this);\n\n            // scroller\n            SCROLLER.init.call(this);\n            SCROLLER.resize.call(this);\n\n            jQuery(window)\n                .on(\"resize.ax6grid-\" + this.id, U.throttle(function (e) {\n                    alignGrid.call(this);\n                    SCROLLER.resize.call(this);\n                    BODY.repaint.call(this);  // window resize시 repaint 함수 호출\n                }, 30).bind(this))\n                .on(\"keydown.ax6grid-\" + this.instanceId, (e) => {\n                    if (this.focused) {\n                        if (this.isInlineEditing) {\n                            if (e.which == info.eventKeys.ESC) {\n                                this.keyDown(\"ESC\", e.originalEvent);\n                            }\n                            else if (e.which == info.eventKeys.RETURN) {\n                                this.keyDown(\"RETURN\", e.originalEvent);\n                            }\n                            else if (e.which == info.eventKeys.TAB) {\n                                this.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == info.eventKeys.UP) {\n                                this.keyDown(\"RETURN\", {shiftKey: true});\n                            }\n                            else if (e.which == info.eventKeys.DOWN) {\n                                this.keyDown(\"RETURN\", {});\n                            }\n                        }\n                        else {\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) { // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    this.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\n                                    U.stopEvent(e);\n                                } else if (e.which == info.eventKeys.ESC) {\n                                    if (this.focused) {\n                                        BODY.blur.call(self);\n                                    }\n                                } else if (e.which == info.eventKeys.RETURN || e.which == info.eventKeys.SPACE) {\n                                    this.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (Object.keys(this.focusedColumn).length) {\n                                    this.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n                        }\n                    }\n                });\n\n            jQuery(document.body).on(\"click.ax6grid-\" + this.id, (e) => {\n                let isPickerClick = false,\n                    target = U.findParentNode(e.target, function (_target) {\n                        if (isPickerClick = _target.getAttribute(\"data-ax6grid-inline-edit-picker\")) {\n                            return true;\n                        }\n                        return _target.getAttribute(\"data-ax6grid-container\") === \"root\";\n                    });\n\n                if (target && target.getAttribute(\"data-ax6grid-instance\") === this.id) {\n                    this.focused = true;\n                } else {\n                    this.focused = false;\n                    BODY.blur.call(this);\n                }\n            });\n\n\n            // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n            setTimeout(() => {\n                if (this.onLoad) {\n                    this.onLoad.call({\n                        self: this\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * @method\n     */\n    initOnce() {\n        if (this.initialized) return this;\n        this.initialized = true;\n    }\n\n    align(){\n        if (alignGrid.call(this)) {\n            BODY.repaint.call(this);\n            SCROLLER.resize.call(this);\n        }\n        return this;\n    }\n\n    keyDown(_act, _data){\n        const processor = {\n            \"KEY_UP\": function () {\n                BODY.moveFocus.call(this, \"UP\");\n            },\n            \"KEY_DOWN\": function () {\n                BODY.moveFocus.call(this, \"DOWN\");\n            },\n            \"KEY_LEFT\": function () {\n                BODY.moveFocus.call(this, \"LEFT\");\n            },\n            \"KEY_RIGHT\": function () {\n                BODY.moveFocus.call(this, \"RIGHT\");\n            },\n            \"KEY_HOME\": function () {\n                BODY.moveFocus.call(this, \"HOME\");\n            },\n            \"KEY_END\": function () {\n                BODY.moveFocus.call(this, \"END\");\n            },\n            \"INLINE_EDIT\": function (_e) {\n                BODY.inlineEdit.active.call(this, this.focusedColumn, _e);\n                if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                    U.stopEvent(_e);\n                }\n            },\n            \"ESC\": function (_e) {\n                BODY.inlineEdit.keydown.call(this, \"ESC\");\n            },\n            \"RETURN\": function (_e) {\n                var activeEditLength = 0;\n                for (var columnKey in this.inlineEditing) {\n                    activeEditLength++;\n\n                    if(!BODY.inlineEdit.keydown.call(this, \"RETURN\", columnKey)){\n                        return false;\n                        U.stopEvent(_e);\n                    }\n                    // next focus\n                    if (activeEditLength == 1) {\n                        if (BODY.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\n                            BODY.inlineEdit.keydown.call(this, \"RETURN\");\n                        }\n                    }\n                }\n                if (activeEditLength == 0) {\n                    BODY.inlineEdit.keydown.call(this, \"RETURN\");\n                    U.stopEvent(_e);\n                } else {\n\n                }\n            },\n            \"TAB\": function (_e) {\n\n                var activeEditLength = 0;\n                for (var columnKey in this.inlineEditing) {\n                    activeEditLength++;\n\n                    BODY.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\n                    // next focus\n                    if (activeEditLength == 1) {\n                        if (BODY.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\n                            BODY.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\n                        }\n                    }\n                }\n            }\n        };\n        if (_act in processor) processor[_act].call(this, _data);\n        return this;\n    }\n\n    copySelect(){\n        let copysuccess,\n            $clipBoard = this.$[\"form\"][\"clipboard\"],\n            copyTextArray = [], copyText = \"\",\n            _rowIndex, _colIndex, _dindex, _di = 0;\n\n        for (let c in this.selectedColumn) {\n            let _column = this.selectedColumn[c];\n\n            if (_column) {\n                if (typeof _dindex === \"undefined\") {\n                    _dindex = _column.dindex;\n                    _rowIndex = _column.rowIndex;\n                    _colIndex = _column.rowIndex;\n                }\n\n                if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                    _di++;\n                }\n\n                if (!copyTextArray[_di]) {\n                    copyTextArray[_di] = [];\n                }\n                let originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                if (originalColumn) {\n                    if (this.list[_column.dindex].__isGrouping) {\n                        copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                    } else {\n                        copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                    }\n                } else {\n                    copyTextArray[_di].push(\"\");\n                }\n\n                _dindex = _column.dindex;\n                _rowIndex = _column.rowIndex;\n            }\n        }\n\n        copyTextArray.forEach(function (r) {\n            copyText += r.join('\\t') + \"\\n\";\n        });\n\n        $clipBoard.get(0).innerText = copyText;\n        $clipBoard.select();\n\n        try {\n            copysuccess = document.execCommand(\"copy\");\n        } catch (e) {\n            copysuccess = false;\n        }\n        return copysuccess;\n    }\n\n    setData(_data){\n        let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\");\n\n        DATA.set.call(this, _data);\n        alignGrid.call(this);\n        BODY.repaint.call(this);\n        SCROLLER.resize.call(this);\n        PAGE.navigationUpdate.call(this);\n\n        if (!isFirstPaint) BODY.scrollTo.call(this, {top: 0});\n\n        isFirstPaint = null;\n        return this;\n    }\n\n    getList(_type){\n        return DATA.getList.call(this, _type);\n    }\n\n    setHeight(_height){\n        if (_height == \"100%\") {\n            _height = this.$target.offsetParent().innerHeight();\n        }\n        this.$target.css({height: _height});\n        this.$[\"container\"][\"root\"].css({height: _height});\n        alignGrid.call(this);\n        BODY.repaint.call(this, \"reset\");\n        SCROLLER.resize.call(this);\n        return this;\n    }\n\n    addRow(_row, _dindex, _options){\n        DATA.add.call(this, _row, _dindex, _options);\n        alignGrid.call(this);\n        BODY.repaint.call(this, \"reset\");\n        if(_options && _options.focus) {\n            BODY.moveFocus.call(this, _options.focus);\n        }\n        SCROLLER.resize.call(this);\n        return this;\n    }\n\n    appendToList(_list){\n        DATA.append.call(this, _list, (function () {\n            alignGrid.call(this);\n            BODY.repaint.call(this);\n            SCROLLER.resize.call(this);\n        }).bind(this));\n        return this;\n    }\n\n    removeRow(_dindex){\n        DATA.remove.call(this, _dindex);\n        alignGrid.call(this);\n        BODY.repaint.call(this, \"reset\");\n        BODY.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n        SCROLLER.resize.call(this);\n        return this;\n    }\n\n    updateRow(_row, _dindex){\n        DATA.update.call(this, _row, _dindex);\n        // todo : mergeCells 옵션에 따라 예외처리\n        BODY.repaintRow.call(this, _dindex);\n        return this;\n    }\n\n    updateChildRows(_dindex, _updateData, _options){\n        DATA.updateChild.call(this, _dindex, _updateData, _options);\n        this.xvar.paintStartRowIndex = undefined;\n        this.xvar.paintStartColumnIndex = undefined;\n        BODY.repaint.call(this);\n        return this;\n    }\n\n    deleteRow(_dindex){\n        DATA.deleteRow.call(this, _dindex);\n        alignGrid.call(this);\n        BODY.repaint.call(this, \"reset\");\n\n        SCROLLER.resize.call(this);\n        return this;\n    }\n\n    setValue(_dindex, _key, _value) {\n        let doindex;\n\n        if (DATA.setValue.call(this, _dindex, doindex, _key, _value)) {\n            let repaintCell = function (_panelName, _rows, __dindex, __doindex, __key, __value) {\n                for (let r = 0, rl = _rows.length; r < rl; r++) {\n                    for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {\n                        if (_rows[r].cols[c].key == __key) {\n                            if (this.xvar.frozenRowIndex > __dindex) {\n                                BODY.repaintCell.call(this, \"top-\" + _panelName, __dindex, __doindex, r, c, __value);\n                            } else {\n                                BODY.repaintCell.call(this, _panelName + \"-scroll\", __dindex, __doindex, r, c, __value);\n                            }\n                        }\n                    }\n                }\n            };\n\n            repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, doindex, _key, _value);\n            repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, doindex, _key, _value);\n        }\n\n        return this;\n    }\n\n    addColumn(_column, _cindex) {\n        const processor = {\n            \"first\": function (_column) {\n                this.config.columns = [].concat(_column).concat(this.config.columns);\n            },\n            \"last\": function (_column) {\n                this.config.columns = this.config.columns.concat([].concat(_column));\n            }\n        };\n\n        if (typeof _column === \"undefined\") throw '_column must not be null';\n        if (typeof _cindex === \"undefined\") _cindex = \"last\";\n        if (_cindex in processor) {\n            processor[_cindex].call(this, _column);\n        } else {\n            if (!U.isNumber(_cindex)) {\n                throw 'invalid argument _cindex';\n            }\n            if (U.isArray(_column)) {\n                for (let _i = 0, _l = _column.length; _i < _l; _i++) {\n                    this.config.columns.splice(_cindex + _i, 0, _column[_i]);\n                }\n            } else {\n                this.config.columns.splice(_cindex, 0, _column);\n            }\n        }\n        onResetColumns.call(this); // 컬럼이 변경되었을 때.\n        return this;\n    }\n\n    removeColumn(_cindex) {\n        const processor = {\n            \"first\": function (_cindex) {\n                this.config.columns.splice(_cindex, 1);\n            },\n            \"last\": function () {\n                this.config.columns.splice(this.config.columns.length - 1, 1);\n            }\n        };\n        if (typeof _cindex === \"undefined\") _cindex = \"last\";\n        if (_cindex in processor) {\n            processor[_cindex].call(this, _cindex);\n        } else {\n            if (!U.isNumber(_cindex)) {\n                throw 'invalid argument _cindex';\n            }\n            //\n            this.config.columns.splice(_cindex, 1);\n        }\n        onResetColumns.call(this); // 컬럼이 변경되었을 때.\n        return this;\n    }\n\n    updateColumn(_column, _cindex) {\n        if (!U.isNumber(_cindex)) {\n            throw 'invalid argument _cindex';\n        }\n        //\n        this.config.columns.splice(_cindex, 1, _column);\n        onResetColumns.call(this); // 컬럼이 변경되었을 때.\n        return this;\n    }\n\n    setColumnWidth(_width, _cindex) {\n        this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n        this.needToPaintSum = true;\n\n        // 컬럼너비 변경사항 적용.\n        HEADER.repaint.call(this);\n        BODY.repaint.call(this, true);\n        SCROLLER.resize.call(this);\n\n        alignGrid.call(this);\n        return this;\n    }\n\n    getColumnSortInfo(){\n        let that = {sortInfo: []};\n        for (let k in this.sortInfo) {\n            that.sortInfo.push({\n                key: k,\n                orderBy: this.sortInfo[k].orderBy,\n                seq: this.sortInfo[k].seq\n            });\n        }\n        that.sortInfo.sort(function (a, b) {\n            return a.seq > b.seq;\n        });\n        return that.sortInfo;\n    }\n\n    setColumnSort(_sortInfo) {\n        if (typeof _sortInfo !== \"undefined\") {\n            this.sortInfo = _sortInfo;\n            HEADER.applySortStatus.call(this, _sortInfo);\n        }\n\n        sortColumns.call(this, _sortInfo || this.sortInfo);\n        return this;\n    }\n\n    select(_selectObject, _options) {\n        if (U.isNumber(_selectObject)) {\n            let dindex = _selectObject;\n\n            if (!this.config.multipleSelect) {\n                this.clearSelect();\n            } else {\n                if (_options && _options.selectedClear) {\n                    this.clearSelect();\n                }\n            }\n\n            DATA.select.call(this, dindex, undefined, _options && _options.selected);\n            BODY.updateRowState.call(this, [\"selected\"], dindex, undefined);\n        }\n        return this;\n    }\n\n    clickBody(_dindex) {\n        BODY.click.call(this, _dindex);\n        return this;\n    }\n\n    DBLClickBody(_dindex) {\n        BODY.dblClick.call(this, _dindex);\n        return this;\n    }\n\n    clearSelect(){\n        BODY.updateRowState.call(this, [\"selectedClear\"]);\n        DATA.clearSelect.call(this);\n        return this;\n    }\n\n    selectAll(_options) {\n        DATA.selectAll.call(this, _options && _options.selected, _options);\n        BODY.updateRowStateAll.call(this, [\"selected\"]);\n        return this;\n    }\n\n    exportExcel(_fileName){\n        let table = [];\n        table.push('<table border=\"1\">');\n        table.push(HEADER.getExcelString.call(this));\n        table.push(BODY.getExcelString.call(this));\n        table.push('</table>');\n\n        if (typeof _fileName === \"undefined\") {\n            return table.join('');\n        }\n        else {\n            EXCEL.export.call(this, [table.join('')], _fileName);\n        }\n\n        return this;\n    }\n\n    focus(_pos) {\n\n        if (BODY.moveFocus.call(this, _pos)) {\n            let focusedColumn;\n            for (let c in this.focusedColumn) {\n                focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                break;\n            }\n            if (focusedColumn) {\n                this.select(focusedColumn.dindex, {selectedClear: true});\n            }\n        }\n        else {\n            if (typeof this.selectedDataIndexs[0] === \"undefined\") {\n                this.select(0);\n            } else {\n                let selectedIndex = this.selectedDataIndexs[0];\n                const processor = {\n                    \"UP\": function () {\n                        if (selectedIndex > 0) {\n                            this.select(selectedIndex - 1, {selectedClear: true});\n                            BODY.moveFocus.call(this, selectedIndex - 1);\n                        }\n                    },\n                    \"DOWN\": function () {\n                        if (selectedIndex < this.list.length - 1) {\n                            this.select(selectedIndex + 1, {selectedClear: true});\n                            BODY.moveFocus.call(this, selectedIndex + 1);\n                        }\n                    },\n                    \"HOME\": function () {\n                        this.select(0, {selectedClear: true});\n                        BODY.moveFocus.call(this, 0);\n                    },\n                    \"END\": function () {\n                        this.select(this.list.length - 1, {selectedClear: true});\n                        BODY.moveFocus.call(this, this.list.length - 1);\n                    }\n                };\n\n                if (_pos in processor) {\n                    processor[_pos].call(this);\n                }\n            }\n        }\n        return this;\n    }\n\n    destroy(){\n        this.$target.empty();\n        this.list = [];\n\n        return null;\n    }\n}\n\nexport default AX6UIGrid;"]}