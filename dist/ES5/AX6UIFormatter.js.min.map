{"version":3,"sources":["AX6UIFormatter.js"],"names":["_jqmin","require","_AX6UICore2","_AX6Info","_AX6Util","_AX6UIFormatter_formatter","formatter","setSelectionRange","input","pos","value","length","focus","createTextRange","range","collapse","moveEnd","moveStart","select","selectionStart","selectionEnd","formatterEvent","opts","optIdx","e","$input","data","val","keydown","isStop","enterableKeyCodes","which","ctrlKey","shiftKey","get","elemFocusPosition","elem","document","selection","createRange","selectionLength","text","beforeValue","newValue","pattern","this","customFormatter","getPatternValue","call","trigger","blur","_force","removeData","_AX6UIFormatter_formatter2","default","bindFormatterTarget","$target","tagName","find","log","_AX6Info2","getError","re","matched","match","attr","getEnterableKeyCodes","off","on","bind","queue","keyup","patternArgument","boundID","_AX6Util2","isString","_jqmin2","search","id","AX6UIFormatter","config","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","animateTime","extend","closeTimer","init","initOnce","initialized","formatterConfig","getFormatter","target","console","self","_AX6UICore3","getInstanceId","isNumber","queIdx","i","each","unbind","unbindFormatterTarget","splice","_formatter"],"mappings":"2/BAAAA,OAAAC,QAAA,gDACAC,YAAAD,QAAA,+DACAE,SAAAF,QAAA,wDACAG,SAAAH,QAAA,wDACAI,0BAAAJ,QAAA,0HAEIK,aACEC,kBAAoB,SAAUC,EAAOC,GAIvC,QAXJ,IAAAA,IASQA,EAAMD,EAAME,MAAMC,QAElBH,EAAMD,kBAVdC,EAAAI,QAYQJ,EAAMD,kBAAkBE,EAAKA,QAE5B,GAAID,EAAMK,gBAAiB,CAbpC,IAAAC,EAAAN,EAAAK,kBAeQC,EAAMC,UAAS,GACfD,EAAME,QAAQ,YAAaP,GAC3BK,EAAMG,UAAU,YAAaR,GAhBrCK,EAAAI,cAmBaV,EAAMW,iBACXX,EAAMI,QAnBdJ,EAAAW,eAAAV,EAqBQD,EAAMY,aAAeX,IAGvBY,gBACFT,MAAS,SAAUU,EAAMC,EAAQC,GACxBF,EAAKG,OAAOC,KAAK,oBAAoBJ,EAAKG,OAAOC,KAAK,kBAAmBJ,EAAKG,OAAOE,QAG9FC,QAAW,SAAUN,EAAMC,EAAQC,GAC/B,IAAIK,GAAS,EACRP,EAAKQ,oBA3BHrB,EAAPsB,OAAcT,EAAlBQ,kBAA+BN,EAAAO,QAGrBxB,EAAAA,SAAViB,EAA6BQ,SAAAR,EAAAS,WAEzBzB,GAAMD,IAGFO,GAAQN,UAAAA,QAAAA,UAAMK,IAGlBC,MAAAA,SAAAQ,EAAgBC,EAAad,GAC7BK,IAAAA,EAAMI,EAANO,OAAAS,IAAA,GAECC,OAAAA,EACD3B,OAAAA,EACAA,OAAAA,EACAA,OAAAA,EAAMY,OAAAA,EAlBd,mBAAAgB,EAsBID,EAASC,EAAgBb,eADNc,SAAAC,YAMXT,EAASQ,SAAbC,UAAAC,cACIC,EAAMV,SAAVQ,UAGSd,cAAWF,KAAKQ,OAIrBQ,EAAArB,UAAA,aAAAmB,EAAA1B,MAAAC,QACAkB,EAAAS,EAAAG,KAAA9B,OAAA6B,GAfWE,EAAAN,EAAA1B,OAoBnBiC,EADArB,EAAAsB,WAAAC,KAAAC,gBACSD,KAAUvB,gBAAVA,EAA2BsB,SAAAG,gBAAAC,KAAAH,KAAAvB,EAAAC,EAAAC,EAAAY,EAAA1B,OACrBY,EAAKG,WAALH,2BAAAA,QACPa,2BAAAA,QAAAA,EADJS,SAAAG,gBAAAC,KAAAH,KAAAvB,EAAAC,EAAAC,EAAAY,EAAA1B,OAGIiC,IAyBYD,IAtBZpB,EAAAG,OAAAE,IAAAgB,GAA0BM,QAAA,UAC1B1C,kBAAA6B,EAAAD,EAAAQ,EAAAhC,OAAA+B,EAAA/B,UAIAuC,KAAA,SAAA5B,EAAAC,EAAAC,EAAA2B,GACA,IAAAf,EAAAd,EAAAG,OAAAS,IAAA,GACAI,OAAAA,EACAE,OAAAA,EAGHlB,EAAAG,OAAA2B,WAAA,mBAEDV,EAAcN,EAAK1B,MAEfiC,EADJrB,EAAIA,WAAAuB,KAAgBC,gBACLD,KAAKC,gBAAgBxB,EAAKsB,SAASG,gBAAgBC,KAAKH,KAAMvB,EAAMC,EAAQC,EAAGY,EAAK1B,MAA/F,QACOY,EAAKsB,WAALtB,2BAAAA,QACI+B,2BAAAC,QAAAhC,EAAAsB,SAAAG,gBAAeH,KAAAA,KAASG,EAAAA,EAAgBC,EAAAA,EAAKtC,MAA7C,QAEAgC,EAGXC,EACArB,EAAKG,OAAOE,IAAIgB,GAEnBA,GAAAD,GApDcpB,EAAAG,OAAAE,IAAAgB,GAAAM,QAAA,YAgFjBM,oBAAsB,SAAUjC,EAAMC,GApBpCD,IAAAA,EAAKG,UAsB8B,SAA/BH,EAAKkC,QAAQtB,IAAI,GAAGuB,QApBxBf,EAAAA,QAAmBhC,EAAnB8C,QACQZ,KAAAA,qBAGJD,EAAAA,QAAWrB,EAAAkC,QACRE,KAAA,sBACHf,KAAAA,sBAuBCrB,EAAKsB,SApBV,OAAIO,QAAQQ,IAAAC,UAAAN,QAAAO,SAAA,eAAA,MAAA,SACRvC,QAAKG,IAAOE,EAAIgB,QACbE,KAIN,IAAAiB,EAAA,eACJC,EAAAzC,EAAAsB,QAAAoB,MAAAF,GA4BGxC,OA1BFiC,EAAAA,QAAAA,EAAsB,GACxBjC,EAAKA,gBAAcyC,EAAA,IAAA,GAIdzC,EAHDsB,WAIKC,KAAAC,gBACDxB,EAAAA,kBAAoBkC,KAAAA,gBACVlC,EAAAsB,SACLqB,qBAAKjB,KAFVH,KAAAvB,EAAAC,GAGHD,EAAAsB,WAAAS,2BAAAC,UACDhC,EAAKA,kBAAc+B,2BAAAC,QAAAhC,EAAAsB,SAAAsB,qBAAAlB,KAAAH,KAAAvB,EAAAC,IAGfD,EAAAG,OACH0C,IAAA,sBACJC,GAAA,qBAAA/C,eAAAT,MAAAyD,KAAAxB,KAAAA,KAAAyB,MAAA/C,GAAAA,IAkBI4C,IAAI,wBAhBLL,GAAAA,uBAAJzC,eAAAO,QAAAyC,KAAAxB,KAAAA,KAAAyB,MAAA/C,GAAAA,IACIwC,IAAAA,sBAkBCK,GAAG,qBAAsB/C,eAAekD,MAAMF,KAAKxB,KAAMA,KAAKyB,MAAM/C,GAASA,IAhB7EqB,IAAAA,qBACA4B,GAAAA,oBAAkBT,eAAvBb,KAAAmB,KAAAxB,KAAAA,KAAAyB,MAAA/C,GAAAA,IAEAF,eAAA6B,KAAAF,KAAAH,KAAAA,KAAAyB,MAAA/C,GAAAA,GAEID,MAEAA,sBAAA,SAAyBA,EAAAC,GAe7B,OAdCD,EAAAG,OAkBI0C,IAAI,sBAhBJ1C,IAAAA,wBAkBA0C,IAAI,sBART9C,IAAAA,qBAEOwB,MAGPvB,UACK6C,SAAIM,GAkBT,OATKC,UAAApB,QAAEqB,SAASF,KAJhBA,GAAA,EAAAG,QAAAtB,SAAAmB,GAAA/C,KAAA,mBAaOgD,UAAApB,QAAEuB,OAAOhC,KAAKyB,MAAO,WACxB,OAAOzB,KAAKiC,IAAML,KAX1BM,2BAqDI,SAAAA,EAAYC,GAAQC,gBAAApC,KAAAkC,GAAA,IAAAG,EAAAC,2BAAAtC,MAAAkC,EAAAK,WAAAC,OAAAC,eAAAP,IAAA/B,KAAAH,OAAA,OAApBqC,EAAAF,QAAoBO,YAAA,KAGhBX,QAAAtB,QAAAkC,QAAA,EAAAN,EAAAF,OAAAA,GAKAE,EAAAZ,SACIiB,EAAAA,UAAa,KADHL,EAAdO,WAAA,KAcAP,EAAKQ,OAtBWR,uFA+BhBrC,KAAK8C,8CAQL,GAAI9C,KAAK+C,YAAa,OAAO/C,KAC7BA,KAAK+C,aAAc,+BANvBtE,GAgBI,IAAIuE,KAAsBtE,OAAAA,EAT7B,GAYGsB,KAAKC,gBAAkBiC,EAAee,eAEtClB,QAAAtB,QAAOkC,QAAO,EAAMK,EAAiBhD,KAAKmC,QACtC1D,GAAMsD,QAAAtB,QAAOkC,QAAO,EAlBjBK,EAAAvE,KACPA,EAAAuE,GAEHE,OAED,OAiBQC,QAAQrC,IAAIC,UAAAN,QAAKO,SAAS,eAAgB,MAAO,SAjBzDhB,KAsBI,GAFAvB,EAAKkC,SAAU,EAAAoB,QAAAtB,SAAOhC,EAAKyE,QAEQ,SAA/BzE,EAAKkC,QAAQtB,IAAI,GAAGuB,QACpBnC,EAAKG,OAASH,EAAKkC,aAInB,GADAlC,EAAKG,OAASH,EAAKkC,QAAQE,KAAK,sBAC5BpC,EAAKG,OAAOd,OArBb,EAIP,OAHIkF,EAAAA,OAAAA,KAAAA,WAAsBtE,EAAAA,OAA1BsB,KAuBYoD,KAAK5B,KAAK/C,KApBjBwB,KA0BLxB,OAtBAA,EAAAA,OAAA,SAAOuE,EAAAA,QAAP3D,IAAA,GAAAuB,QAAAnC,EAAAkC,QAAAlC,EAAAkC,QAAAE,KAAA,sBAEApC,EAAKA,KAAKyE,EAAAA,GAAQzE,EAAAG,OAAAC,KAAA,kBAEdJ,EAAAwD,KACHxD,EAAAwD,GAAA,iBAAAoB,YAAA5C,QAAA6C,gBACD7E,EAAKkC,OAAL9B,KAAe,gBAAAJ,EAAOA,MAOdA,KALRC,EAAID,UAAAA,QAAAA,OAAKkC,KAAQtB,MAAOuB,WACpBnC,OAAAA,KAAKG,IAASH,EAAKkC,OAKflC,KAAAA,MAAAA,KAAKG,GACDH,oBAAKyE,KAALlD,KAAAA,KAAAyB,MAAAzB,KAAAyB,MAAA3D,OAAA,GAAAkC,KAAAyB,MAAA3D,OAAA,KAGJkC,KAAAyB,MAAA/C,GAAAD,EACHiC,oBAAAP,KAAAH,KAAAA,KAAAyB,MAAA/C,GAAAA,IAGLD,0CAQAC,IAAAA,EAASmD,UAAApB,QAAA8C,SAAA3B,SAAAA,QAAcH,UAAOtB,KAAYH,KAAA4B,SACtC,IAAO,IAAP4B,EAuBA,IAtBH,IAFDC,EAAAzD,KAAAyB,MAAA3D,OAwBW2F,KApBP/E,eAAe2B,KAAAF,KAAAH,KAAAA,KAAAyB,MAAAgC,GAAAA,EAAA,MAAA,QAGlBjF,eACI6B,KAAAF,KAAAH,KAAAA,KAAAyB,MAAA+B,GAAAA,EAAA,MAAA,GAED9C,OAAAA,oCA4BDjC,GACH,IAAI2E,EAAOpD,KACPtB,OAAAA,EAEJ,IAAKD,EAAKyE,OArBV,OAsBIC,QAAQrC,IAAIC,UAAAN,QAAKO,SAvBZ,eAAA,MAAA,WACLwC,KAIIhF,GAFJC,EAAAkC,SAAI8C,EAAAA,QAAAA,SAAShC,EAAM3D,QAEKqC,SAApB3B,EAAAA,QAAAA,IAAAA,GAAAA,QACHC,EAAAG,OAAAH,EAAAkC,aAIL,GADClC,EAAAG,OAAAH,EAAAkC,QAAAE,KAAA,sBACDpC,EAAOG,OAAPd,OAAA,EA4BQ,OA3BXW,EAAAG,OAAA8E,KAAA,WAwBejF,EAAKyE,OAASlD,KAtB9BoD,EAAAO,OAAAlF,KAyBmBuB,KAVf,OAcAvB,EAAKG,OAAyC,SAA/BH,EAAKkC,QAAQtB,IAAI,GAAGuB,QAAsBnC,EAAKkC,QAAUlC,EAAKkC,QAAQE,KAAK,sBAC1FpC,EAAKwD,GAAKxD,EAAKG,OAAOC,KAAK,iBAxB3BJ,EAAI2E,KACJ1E,EAAIA,UAAAA,QAAAA,OAAAA,KAAJ+C,MAAA,WA2BQ,OAAOzB,KAAKiC,IAAMxD,EAAKwD,KAvB3B2B,sBAAAzD,KAAAH,KAAAA,KAAAyB,MAAA/C,IACHsB,KAAAyB,MAAAoC,OAAAnF,EAAA,IAGDsB,4CAQYoD,GACH3F,UAAAqG,yCAQT,OAAArG,uCA6BOyE","file":"AX6UIFormatter.js","sourcesContent":["import jQuery from \"jqmin\";\nimport AX6UICore from \"./AX6UICore\";\nimport info from \"./AX6Info\";\nimport U from \"./AX6Util\";\nimport FORMATTER from \"./AX6UIFormatter/AX6UIFormatter_formatter\";\n\nlet formatter = {};\nconst setSelectionRange = function (input, pos) {\n    if (typeof pos == \"undefined\") {\n        pos = input.value.length;\n    }\n    if (input.setSelectionRange) {\n        input.focus();\n        input.setSelectionRange(pos, pos);\n    }\n    else if (input.createTextRange) {\n        var range = input.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', pos);\n        range.moveStart('character', pos);\n        range.select();\n    }\n    else if (input.selectionStart) {\n        input.focus();\n        input.selectionStart = pos;\n        input.selectionEnd = pos;\n    }\n};\nconst formatterEvent = {\n    'focus': function (opts, optIdx, e) {\n        if (!opts.$input.data(\"__originValue__\")) opts.$input.data(\"__originValue__\", opts.$input.val());\n    },\n    /* 키 다운 이벤트에서 입력할 수 없는 키 입력을 방어 */\n    'keydown': function (opts, optIdx, e) {\n        let isStop = false;\n        if (!opts.enterableKeyCodes) {\n\n        }\n        else if (e.which && opts.enterableKeyCodes[e.which]) {\n\n        }\n        else if (!e.metaKey && !e.ctrlKey && !e.shiftKey) {\n            //console.log(e.which, opts.enterableKeyCodes);\n            isStop = true;\n        }\n        if (isStop) U.stopEvent(e);\n    },\n    /* 키 업 이벤트에서 패턴을 적용 */\n    'keyup': function (opts, optIdx, e) {\n        let elem = opts.$input.get(0),\n            elemFocusPosition,\n            beforeValue,\n            newValue,\n            selection, selectionLength;\n\n        if ('selectionStart' in elem) {\n            // Standard-compliant browsers\n            elemFocusPosition = elem.selectionStart;\n        }\n        else if (document.selection) {\n            // IE\n            //elem.focus();\n            selection = document.selection.createRange();\n            selectionLength = document.selection.createRange().text.length;\n            selection.moveStart('character', -elem.value.length);\n            elemFocusPosition = selection.text.length - selectionLength;\n        }\n\n        beforeValue = elem.value;\n        if (opts.pattern in this.customFormatter) {\n            newValue = this.customFormatter[opts.pattern].getPatternValue.call(this, opts, optIdx, e, elem.value);\n        } else if (opts.pattern in FORMATTER) {\n            newValue = FORMATTER[opts.pattern].getPatternValue.call(this, opts, optIdx, e, elem.value);\n        } else {\n            newValue = beforeValue\n        }\n\n        if (newValue != beforeValue) {\n            opts.$input.val(newValue).trigger(\"change\");\n            setSelectionRange(elem, elemFocusPosition + newValue.length - beforeValue.length);\n        }\n    },\n    'blur': function (opts, optIdx, e, _force) {\n        let elem = opts.$input.get(0),\n            beforeValue,\n            newValue\n        ;\n\n        opts.$input.removeData(\"__originValue__\");\n\n        beforeValue = elem.value;\n        if(opts.pattern in this.customFormatter) {\n            newValue = this.customFormatter[opts.pattern].getPatternValue.call(this, opts, optIdx, e, elem.value, 'blur');\n        } else if (opts.pattern in FORMATTER) {\n            newValue = FORMATTER[opts.pattern].getPatternValue.call(this, opts, optIdx, e, elem.value, 'blur');\n        } else {\n            newValue = beforeValue\n        }\n\n        if (_force) {\n            opts.$input.val(newValue);\n        } else {\n            if (newValue != beforeValue) {\n                opts.$input.val(newValue).trigger(\"change\");\n            }\n        }\n    }\n};\nconst bindFormatterTarget = function (opts, optIdx) {\n    if (!opts.pattern) {\n        if (opts.$target.get(0).tagName == \"INPUT\") {\n            opts.pattern = opts.$target\n                .attr('data-ax6formatter');\n        }\n        else {\n            opts.pattern = opts.$target\n                .find('input[type=\"text\"]')\n                .attr('data-ax6formatter');\n        }\n        if (!opts.pattern) {\n            console.log(info.getError(\"ax6formatter\", \"501\", \"bind\"));\n            console.log(opts.target);\n            return this;\n        }\n    }\n\n    let re = /[^\\(^\\))]+/gi,\n        matched = opts.pattern.match(re);\n\n    opts.pattern = matched[0];\n    opts.patternArgument = matched[1] || \"\";\n\n    // 함수타입\n    if (opts.pattern in this.customFormatter) {\n        opts.enterableKeyCodes = this.customFormatter[opts.pattern].getEnterableKeyCodes.call(this, opts, optIdx);\n    } else if (opts.pattern in FORMATTER) {\n        opts.enterableKeyCodes = FORMATTER[opts.pattern].getEnterableKeyCodes.call(this, opts, optIdx);\n    }\n\n    opts.$input\n        .off('focus.ax6formatter')\n        .on('focus.ax6formatter', formatterEvent.focus.bind(this, this.queue[optIdx], optIdx))\n        .off('keydown.ax6formatter')\n        .on('keydown.ax6formatter', formatterEvent.keydown.bind(this, this.queue[optIdx], optIdx))\n        .off('keyup.ax6formatter')\n        .on('keyup.ax6formatter', formatterEvent.keyup.bind(this, this.queue[optIdx], optIdx))\n        .off('blur.ax6formatter')\n        .on('blur.ax6formatter', formatterEvent.blur.bind(this, this.queue[optIdx], optIdx));\n\n    formatterEvent.blur.call(this, this.queue[optIdx], optIdx);\n\n    return this;\n};\nconst unbindFormatterTarget = function (opts, optIdx) {\n    opts.$input\n        .off('focus.ax6formatter')\n        .off('keydown.ax6formatter')\n        .off('keyup.ax6formatter')\n        .off('blur.ax6formatter');\n\n    return this;\n};\n\nconst getQueIdx = function (boundID) {\n    if (!U.isString(boundID)) {\n        boundID = jQuery(boundID).data(\"data-formatter\");\n    }\n    /*\n     if (!U.isString(boundID)) {\n     console.log(info.getError(\"ax6formatter\", \"402\", \"getQueIdx\"));\n     return;\n     }\n     */\n    return U.search(this.queue, function () {\n        return this.id == boundID;\n    });\n};\n\n/**\n * @class\n */\nclass AX6UIFormatter extends AX6UICore {\n    /**\n     * @constructor\n     * @param config\n     * @param {Object} [config.formatter]\n     * @example\n     * ```js\n     * var formatter = new Formatter();\n     *\n     * // Extend formatter\n     * var myFormatter = new Formatter({\n     *  formatter: {\n     *      \"mystyle\": {\n     *          getEnterableKeyCodes: function (_opts) {\n     *              var enterableKeyCodes = {\n     *                  '189': '-' // eventKeyCode\n     *              };\n     *              return jQuery.extend(enterableKeyCodes, {});\n     *          }\n     *          getPatternValue: function (_opts, optIdx, e, val, eType) {\n     *              val = val.replace(/\\D/g, \"\");\n     *              var regExpPattern = /^([0-9]{2})\\-?([0-9]{2})?\\-?([0-9]{2})?\\-?([0-9]{2})?/;\n     *              return val.replace(regExpPattern, function (a, b) {\n     *                  var nval = [arguments[1]];\n     *                  if (arguments[2]) nval.push(arguments[2]);\n     *                  if (arguments[3]) nval.push(arguments[3]);\n     *                  if (arguments[4]) nval.push(arguments[4]);\n     *                  return nval.join(\"-\");\n     *              });\n     *          }\n     *      }\n     *  }\n     * });\n     * ```\n     */\n    constructor(config) {\n        super();\n\n        /**\n         * @member {JSON}\n         * @param config\n         * @param [config.animateTime=250]\n         */\n        this.config = {\n            animateTime: 250\n        };\n        jQuery.extend(true, this.config, config);\n\n        // 멤버 변수 초기화\n        /**\n         * @member\n         * @type {Array}\n         */\n        this.queue = [];\n        this.openTimer = null;\n        this.closeTimer = null;\n\n        this.init();\n    }\n\n    /**\n     * @method\n     */\n    init() {\n\n        // init 호출 여부\n        this.initOnce();\n    }\n\n    /**\n     * @method\n     * @return {AX6UIFormatter}\n     */\n    initOnce() {\n        if (this.initialized) return this;\n        this.initialized = true;\n    }\n\n    /**\n     * @method\n     * @param {Object} opts\n     * @param {Element} opts.target\n     * @return {AX6UIFormatter}\n     */\n    bind(opts) {\n        let formatterConfig = {}, optIdx;\n\n        // 사용자 포메터 체크\n        this.customFormatter = AX6UIFormatter.getFormatter();\n\n        jQuery.extend(true, formatterConfig, this.config);\n        if (opts) jQuery.extend(true, formatterConfig, opts);\n        opts = formatterConfig;\n\n        if (!opts.target) {\n            console.log(info.getError(\"ax6formatter\", \"401\", \"bind\"));\n            return this;\n        }\n        opts.$target = jQuery(opts.target);\n\n        if (opts.$target.get(0).tagName == \"INPUT\") {\n            opts.$input = opts.$target;\n        }\n        else {\n            opts.$input = opts.$target.find('input[type=\"text\"]');\n            if (opts.$input.length > 1) {\n                opts.$input.each(function () {\n                    opts.target = this;\n                    self.bind(opts);\n                });\n                return this;\n            }\n        }\n\n        opts.$input = (opts.$target.get(0).tagName == \"INPUT\") ? opts.$target : opts.$target.find('input[type=\"text\"]');\n\n        if (!opts.id) opts.id = opts.$input.data(\"ax6-formatter\");\n\n        if (!opts.id) {\n            opts.id = 'ax6-formatter-' + AX6UICore.getInstanceId();\n            opts.$input.data(\"ax6-formatter\", opts.id);\n        }\n        optIdx = U.search(this.queue, function () {\n            return this.id == opts.id;\n        });\n\n        if (optIdx === -1) {\n            this.queue.push(opts);\n            bindFormatterTarget.call(this, this.queue[this.queue.length - 1], this.queue.length - 1);\n        }\n        else {\n            this.queue[optIdx] = opts;\n            bindFormatterTarget.call(this, this.queue[optIdx], optIdx);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @return {AX6UIFormatter}\n     */\n    formatting() {\n        let queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n        if (queIdx === -1) {\n            let i = this.queue.length;\n            while (i--) {\n                formatterEvent.blur.call(this, this.queue[i], i, null, true);\n            }\n        } else {\n            formatterEvent.blur.call(this, this.queue[queIdx], queIdx, null, true);\n        }\n        return this;\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @return {AX6UIFormatter}\n     */\n    unbind(opts) {\n        let self = this;\n        let optIdx;\n\n        if (!opts.target) {\n            console.log(info.getError(\"ax6formatter\", \"401\", \"unbind\"));\n            return this;\n        }\n        opts.$target = jQuery(opts.target);\n\n        if (opts.$target.get(0).tagName == \"INPUT\") {\n            opts.$input = opts.$target;\n        }\n        else {\n            opts.$input = opts.$target.find('input[type=\"text\"]');\n            if (opts.$input.length > 1) {\n                opts.$input.each(function () {\n                    opts.target = this;\n                    self.unbind(opts);\n                });\n                return this;\n            }\n        }\n\n        opts.$input = (opts.$target.get(0).tagName == \"INPUT\") ? opts.$target : opts.$target.find('input[type=\"text\"]');\n        opts.id = opts.$input.data(\"ax6-formatter\");\n\n        if (opts.id) {\n            optIdx = U.search(this.queue, function () {\n                return this.id == opts.id;\n            });\n\n            unbindFormatterTarget.call(this, this.queue[optIdx]);\n            this.queue.splice(optIdx, 1);\n        }\n        \n        return this;\n    }\n\n    /**\n     * @static\n     * @param _formatter\n     */\n    static setFormatter(_formatter) {\n        formatter = _formatter;\n    }\n\n    /**\n     * @static\n     * @return {{}}\n     */\n    static getFormatter() {\n        return formatter || {};\n    }\n}\n\nexport default AX6UIFormatter;"]}