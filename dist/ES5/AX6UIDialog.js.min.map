{"version":3,"sources":["AX6UIDialog.js"],"names":["_jqmin","require","_AX6UICore2","_AX6Util","_AX6Info","_AX6Mustache","dialogTmpl","columnKeys","that","opts","onStateChanged","call","data","dialogId","input","btns","getContent","additionalContent","title","msg","this","config","replace","_crlf","render","_AX6Util2","default","isFunction","open","width","align","e","event","document","_this","pos","box","activeDialog","throttledResize","throttle","callback","window","_jqmin2","body","append","id","dialogConfig","height","css","position","top","dialogType","left","zIndex","find","get","focus","bind","on","clickEventName","self","state","autoCloseTime","onKeyup","autoCloseTimer","setTimeout","close","innerWidth","innerHeight","emptyKey","target","btnOnClick","k","getAttribute","srcElement","key","btnTarget","value","doNotCallback","oi","val","onClick","keyCode","eventKeys","ESC","_AX6Info2","RETURN","AX6UIDialog","_classCallCheck","_this2","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","animateTime","instanceId","theme","lang","ok","cancel","extend","queue","init","initOnce","initialized","tryCount","label","push","isString","_option","clearTimeout","addClass","off","remove","length","shift"],"mappings":"2/BAAAA,OAAAC,QAAA,gDACAC,YAAAD,QAAA,kEACAE,SAAAF,QAAA,2DACAG,SAAAH,QAAA,2DACAI,aAAAJ,QAAA,uEACAA,QAAA,4BAEA,IAAMK,WAAa,SAAUC,GAP7B,MAAA,m9CA0DIC,eAAA,SAAAC,EAAAD,GAUI,OATJC,GAAAA,EAAAC,eAVJD,EAAAC,eAAAC,KAAAH,EAAAA,GAaQI,KAAOF,gBACPG,KAAAA,eADOF,KAAAH,EAAAA,GAIPM,EAAAA,KACAC,EAAAA,MACA,GAECC,WARM,SAAAH,EAAAJ,GASPQ,IAAAA,GACIJ,SAAIA,EACAK,MAAAT,EAAAS,OAAOD,KAAAA,OAAkBN,OAAzB,GACHQ,KAFDV,EAGKU,KAAAC,KAAAC,OAAAF,KAAA,IAAAG,QAAA,MAAA,SACDR,MAAAL,EAAAK,MACHC,KAAAN,EAAAM,KACJQ,MAAON,WAhBZ,OAAAG,KAAAE,QAAA,MAAA,UAmBAL,kBAAO,SAASO,GApBpB,OAAAC,UAAAC,QAAAC,WAAAV,GAsBMW,EAAiCjB,KAAAF,GACnCQ,EAHO,CAKCY,EAAOpB,oBAGXqB,OAAAA,cAAAA,QAAWN,OAAMO,WAAYC,KAA7BZ,MAAAR,IAEJgB,KAAA,SAAAnB,EAAOwB,GAAP,IAAAC,EAAAd,KAPIe,KASJC,GACKC,MAAAA,EAAeR,OANdS,EAAkBb,UAAAC,QAAEa,SAAS,SAAUR,GAS1CD,MAAAnB,KAAO6B,KAAPT,GAAoBU,OAAAT,QACnBQ,KACH,EAAAE,QAAAhB,SAAAO,SAAAU,MAAAC,OAAA5B,WAAAL,KAAAS,KAAAX,EAAAoC,GAAApC,IAEDW,KAAA0B,aAAArC,EACAA,KAAKsC,cAAaA,EAAAA,QAAAA,SAAS,IAAKV,EAAAA,IAPhCjB,KAAKiB,aAAaW,KAAKnB,MAAOO,EAAIP,aAUlBoB,IAAZT,IACAL,EAAU1B,EAAA+B,UAKVL,EAAAA,OAAU1B,EAAAA,OAAAW,KAAAiB,aAAVU,cAGsB1B,IAAlBZ,EAAAwC,UAAJ,WAAAxC,EAAAwC,UACHd,EAAAe,KAAA,EAAAR,QAAAhB,SAAAe,QAAAM,SAAA,EAAAX,EAAAW,OAAA,EACDZ,EAAKE,MAAAA,EAAAA,QAAAA,SAAiBF,QAAtBN,QAAA,EAAAO,EAAAP,MAAA,IAGIpB,EAAAA,KAAK0C,EAALF,SAAoBG,MAAU,EAC9BjB,EAAAe,IAAKb,EAAAA,SAAkBa,KAAA,GAGvB9B,KAAKiB,OAAAA,SACRF,EAAA,WAAAf,KAAAC,OAAAgC,QAEDjC,KAAKiB,aAAaiB,IAAlBnB,GAPwB,WAApB1B,EAAK0C,WAWT/B,KAAAiB,aAAAiB,KAAA,wBAAAC,IAAA,GAAAC,QAGGC,KAAKpB,aAFRiB,KAAA,qBAAAC,IAAA,GAAAC,QAKA9C,KAAAA,aAAeC,KAAK,qBAAY+C,GAAAtC,KAAAC,OAAAsC,eAAA,SAAA5B,GAC5B6B,WAD4BjD,KAAAS,KAAAW,GAAAU,OAAAT,MAAAvB,EAAA+B,IAE5BqB,KAAAA,QAGJ,EAAAnB,QAAAhB,SAAIjB,QAAKqD,GAAAA,oBAAe,SAAA/B,GACpBgC,QAAKC,KAAAA,KAALjC,GAAsBkC,OAAAA,MAAWxD,EAAA+B,IAC7BiB,KAAArC,QACH,EAAAsB,QAAAhB,SAAEjB,QAAKqD,GAAAA,mBAFRxB,EAAAmB,KAAArC,OANJV,eAAeC,KAAKS,KAAMX,GAW1B0B,KAAAf,KACAgB,MAAA,SAGI3B,EAACqD,gBACDrD,KAAAA,eAAYqC,WAAhB,WACIV,EAAM8B,SACFrC,EAAOpB,gBAPf0B,EAAM,KAWNC,EAAA,MAEIA,MAAIc,SAAMT,GACVL,IAAAA,KAAIgB,aAAce,OAAAA,KACrB,IAHD1D,EAIKW,KAAA0B,aACDV,GACIc,MAAMzC,EAAKwC,MAClBF,OAAAtC,EAAAsC,QAoBI,YAhBL,IAAKV,EAAAA,UAAL,WAAA5B,EAAAwC,UAVIb,EAAIc,IAAMT,OAAO2B,YAAc,EAAIhC,EAAIW,OAAS,EAYpDtC,EAAO2C,KAAPX,OAAA0B,WAAA,EAAA/B,EAAAP,MAAA,IAGAO,EAAOgB,KAAP3C,EAAAwC,SAAAG,MAAA,EAzBJhB,EAAAc,IAAAzC,EAAAwC,SAAAC,KAAA,GA4BQ1C,EAAAA,KAAAA,IAAJ4B,EAAAgB,KAAA,GACIiB,EAAAA,IAAAA,IAAWjC,EADfc,IAAA,GAGA9B,KAAIW,aAAcA,IAAEuC,GAEpBA,EAAAA,KACIlC,EAAA,KAEChB,MATHmD,WAAa,SAAUxC,EAAGtB,EAAM+B,EAAU8B,EAAQE,GAYpD,IAAIF,OAAAA,EACAE,EAAWC,KAUHjE,GARRA,EAAAA,aAAOuB,EAAAuC,OAAAvC,EAAA2C,YAEHC,EAAAA,UAAAA,QAAAA,eAAelE,EAAKM,OAFjB,SAAAuD,GAGHzD,GAAAA,EAAAA,aAHG,mBAIH+D,OAAAA,IAIIpE,CASP,GAROgE,EAAAF,EAAAG,aAAgB,mBAEZjE,GACHoD,KAAAxC,KACJuD,IAAAH,EAAAK,MAAApE,EAAAM,KAAAyD,GACJ3D,SAAAJ,EAAAoC,GACGpC,UAAA6D,GAGUnB,WAHd1C,EAGK0C,WACD,IAAIX,IAAAA,KAAUA,EAAAA,MAGb,GAFDhC,EAAK0D,GAAOY,KAAAA,aAADxB,KAAX,uBAAAyB,EAAA,KAAAC,MAEU7B,IAAL1C,EAAK0C,IAA0B,MAA/B3C,EAAoBuE,GAAW,CAChCvC,EAAUA,EACT0B,MAKG,GAAAzD,EAAAM,KAAAyD,GAAKnC,QACL5B,EAAAM,KAAAyD,GAAAS,QAAAtE,KAAAH,EAAAA,QAEP,GAAA,UAAAC,EAAA0C,WACGX,GAAUA,EAAS7B,KAAKH,EAAMA,GAClCY,KAAK8C,OAAMY,eAACA,SAEnB,GAAA,YAAArE,EAAA0C,WAbWX,GAAUA,EAAS7B,KAAKH,EAAMA,GAenCY,KAAP8C,OAAAY,eAAA,SAEAtC,GAAA,WAAW/B,EAAX0C,WAAA,CACAmB,GAAA,OAASE,GACTH,EAEY,OA3DhBjD,KAAAiB,aAAAiB,KAAA,wBAAAe,EAAA,MAAAd,IAAA,GAAAC,SA2DMO,EAXUvB,GAAUA,EAAS7B,KAAKH,EAAMA,GAepC0E,KAAFhB,OAAaY,eAAKK,KAIlB3E,EAAA,KACIA,EAAAA,KACIoD,EAAAA,KACAe,EAAAA,KACA9D,EAAAA,MAHGkD,QAAP,SAAAhC,EAAAtB,EAAA+B,EAAA8B,EAAAE,GARR,IAAIhE,OAAAA,EAeI6D,EAAK,KAKA,GAHDtC,EAAAmD,SAAI1E,UAAAA,QAAKuE,UAALK,KACAf,KAAAA,QAEH,WAAA5D,EAAA0C,YACJpB,EAAAmD,SAAAG,UAAA3D,QAAAyD,UAAAG,OAAA,CACD9E,GACIA,KAAAA,KACA6D,IAAAA,EAAAA,MAAA5D,EAAAM,KAAAyD,GACA3D,SAAOJ,EAAPoC,GACH+B,UAAAN,GAGJ,IAAA,IAAAS,KAAAtE,EAAAK,MAZO,GAaXN,EAAAuE,GAAA3D,KAAAiB,aAAAiB,KAAA,uBAAAyB,EAAA,KAAAC,MAb2B,IAAZxE,EAAKuE,IAAyB,MAAZvE,EAAKuE,GAAa,CAepDV,EAAAU,EACA,MAGAT,GAASD,EAXG,OAYZ7D,EAAA,KAtCJ6D,EAAA,MA0BuB,EAEP7B,GAAUA,EAAS7B,KAAKH,EAAMA,GAClCY,KAAK8C,OAAOY,eAAe,IAInCtE,EAAO,KAYP6D,EAAA,KAVA5D,EAAO,KACP+B,EAAW,KACX8B,EAAS,KAYTE,EAAA,MALEe,wBAKF,SAAAA,EAAYlE,GAAQmE,gBAAApE,KAAAmE,GAAA,IAAAE,EAAAC,2BAAAtE,MAAAmE,EAAAI,WAAAC,OAAAC,eAAAN,IAAA5E,KAAAS,OAAA,OAyBNqE,EAPIpE,QAUVyE,GAAAA,cAVUL,EAAAM,WAWVjC,eAAe,QAXnBkC,MAAA,UAaAnE,MAAA,IARIX,MAAO,cAUXC,IAAA,GACA8E,MACAC,GAAA,KAAAC,OAAA,UAPIL,YAAa,IAUjBhC,cAAA,GAPApB,QAAAhB,QAAO0E,QAAO,EAAMX,EAAKpE,OAAQA,GAGjCoE,EAAKY,SAILZ,EAAKpD,aAAe,KAIpBoD,EAAKzB,eAAiB,UAEA,IAAX3C,GAAwBoE,EAAKa,OA5CxBb,uFAwDhBrE,KAAAV,eAAAU,KAAAC,OAAAX,sBACHU,KAAAC,OAAAX,eADGU,KAAKmF,8CASL,GAAAnF,KAAKoF,YAAL,OAAApF,KACHA,KAAAoF,aAAA,gCAoBK/F,EAAM+B,EAAUiE,QACE,IAAThG,EACPA,GADAS,MAAOT,KAAPY,OAAgBH,MAChBT,IAAAA,IAEIU,UAAAA,QAAAA,SAAKV,KAFFA,GADXS,MAKWE,KAAAC,OAAAH,MACPT,IAAAA,KAIHA,EAAAiC,QAAAhB,QAAA0E,QAAA,KAAAhF,KAAAC,OAAAZ,IAGI0C,WAAa,QADlB1C,EAAAA,MAAOA,EAAAuF,OAAOI,GACd3F,EAAAA,SAAK0C,OAEWX,IAAXA,EAAAA,OAGD/B,EAAKM,MADLmF,IAAAQ,MAAY3F,EAAZkF,KAAYlF,GAASiF,MAAavF,EAAAuF,SAIrC5E,KAAAiB,aAGGjB,KAAKiF,MAAMM,KAAKlG,GAAhBmB,KAAAjB,KAAK0F,KAAMM,EAAKlG,mCA2ChBA,EAAM+B,EAAUiE,GA0BhB,YAzBgB,IAAThG,EACPA,GACIS,MAAOE,KAAKC,OAAOH,MACnBC,IAAK,IAHTM,UAAAC,QAAAkF,SAAAnG,KACAA,GACIS,MAAAA,KAAOG,OAAKA,MACZF,IAAAA,IAIAD,EAAAA,QAAAA,QAAAA,QAAO,KAAYA,KADhBG,OAAAZ,GAEHU,EAAAA,WAAKV,UAFFA,EAAAuF,MAAPvF,EAAAuF,OAAA5E,KAAAC,OAAA2E,OAAA,GAIHvF,EAAA+B,SAAAA,OAEM,IAAA/B,EAAAM,OACPN,EAAK0C,MACL1C,IAAKuF,MAASvF,EAAKuF,KAALvF,GAAmBY,MAAO2E,EAA1BA,OACdvF,QAAAiG,MAAgBlE,EAAhByD,KAAgBzD,UAIR0D,KAAAA,aACAC,KAAAA,MAAAA,KAAQ1F,GAEfmB,KAAAjB,KAAAS,KAAAX,EAAA+B,GAGGpB,oCAgCDX,EAAM+B,EAAUiE,GA6BlB,YA5BmB,IAAThG,EACPA,GACIS,MAAOE,KAAKC,OAAOH,MACnBC,IAAK,IAEFM,UAAAC,QAAEkF,SAASnG,KAClBA,GACIS,MAAOE,KAAKC,OAAOH,MAPvBC,IAAAV,IACOA,EAAAiC,QAAAhB,QAAP0E,QAAA,KAAAhF,KAAAC,OAAAZ,GAKAA,EAAAA,WAAO,SACHS,EAAAA,MAAAA,EAAO8E,OAAK3E,KAAOH,OADhB8E,OAAA,GAEH7E,EAAAA,SAAAA,OAEP,IAAAV,EAAAK,QASGL,EAAKK,OAPTL,OAAOiG,MAAA,WAGYV,IAAdA,EAALjF,OACAN,EAAK+B,MASG0D,IAAKQ,MAAOjG,EAAKwF,KAAL,GAAiBD,MAAOvF,EAAKuF,OAP7CG,QAAO1F,MAAKK,EAAZmF,KAAYnF,UAIfM,KAAAiB,aACDjB,KAAIiF,MAAO5F,KAAKM,GAERmF,KAAAA,KAAAA,KAAKQ,EAAOjG,GAGnBW,mCAuBCyF,GACF,IAAIpG,OAAAA,EAAMD,OAAAA,EAkCD,OAhCLY,KAAKiB,eACDjB,KAAK4C,gBAAgB8C,aAAa1F,KAAK4C,gBAE3CvD,EAAOW,KAAK0B,aAEZ1B,KAAKiB,aAAa0E,SAAS,YAC3B,EAAArE,QAAAhB,SAAOe,QAAQuE,IAAI,sBACnB,EAAAtE,QAAAhB,SAAOe,QAAQuE,IAAI,oBATvB/C,WAAIxD,WAAMD,KAAAA,eAaEY,KAAKiB,aAAa4E,SAX1B7F,KAAKiB,aAAc,MAGnB5B,GAaQmD,KAAMxC,KAXdyC,MAAKxB,QACLxB,SAAAJ,EAAAoC,IAGAoB,GAAYxC,UAAAC,QAAAC,WAAYkF,EAAArE,UACpBqE,EAAIrE,SAAKH,KAAT7B,EAAuBA,IACnBC,EAAK4B,UAAa4E,GAAlBJ,EAAA/B,eACArE,EAAA+B,SAAKH,KAAAA,EAAe7B,GAGxBA,GAAOC,EAAAC,eACHkD,EAAAA,eADGjD,KAAAH,EAAAA,GAGHK,KAAAA,gBAHGO,KAAPV,eAAAC,KAAAH,EAAAA,GAQCY,KAFDiF,OAEW5F,KAAK+B,MAAL0E,QACPzG,KAAAA,KAAK+B,KAAAA,KAAS7B,MAAdwG,SAGJ1G,EAAA,KACIA,EAAAA,MACHgD,KAAArC,MACIA,KAAIC,OAAKX,cAEbU,8BAIGQ","file":"AX6UIDialog.js","sourcesContent":["import jQuery from \"jqmin\";\nimport AX6UICore from \"./AX6UICore.js\";\nimport U from \"./AX6Util.js\";\nimport info from \"./AX6Info.js\";\nimport mustache from \"./AX6Mustache.js\";\nimport \"./AX6UIDialog/index.scss\";\n\nconst dialogTmpl = function (columnKeys) {\n    return ` \n<div id=\"{{dialogId}}\" data-dialog-els=\"root\" data-ax6ui-dialog=\"\" class=\"{{theme}}\">\n    <div class=\"ax-dialog-header\" data-dialog-els=\"header\">\n        {{{title}}}\n    </div>\n    <div class=\"ax-dialog-body\" data-dialog-els=\"body\">\n        <div class=\"ax-dialog-msg\">{{{msg}}}</div>\n        \n        {{#input}}\n        <div class=\"ax-dialog-prompt\">\n            {{#@each}}\n            <div class=\"form-group\">\n            {{#@value.label}}\n            <label>{{#_crlf}}{{{.}}}{{/_crlf}}</label>\n            {{/@value.label}}\n            <input type=\"{{@value.type}}\" placeholder=\"{{@value.placeholder}}\" class=\"form-control {{@value.theme}}\" data-dialog-prompt=\"{{@key}}\" style=\"width:100%;\" value=\"{{@value.value}}\" />\n            {{#@value.help}}\n            <p class=\"help-block\">{{#_crlf}}{{.}}{{/_crlf}}</p>\n            {{/@value.help}}\n            </div>\n            {{/@each}}\n        </div>\n        {{/input}}\n        \n        <div class=\"ax-dialog-buttons\" data-dialog-els=\"buttons\">\n            <div class=\"ax-button-wrap\">\n            {{#btns}}\n                {{#@each}}\n                <button type=\"button\" data-dialog-btn=\"{{@key}}\" class=\"btn btn-{{@value.theme}}\">{{@value.label}}</button>\n                {{/@each}}\n            {{/btns}}\n            </div>\n        </div>\n        \n        {{#additionalContent}}\n        <div data-dialog-els=\"additional-content\">{{{.}}}</div>\n        {{/additionalContent}}\n    </div>\n</div>  \n`;\n};\nconst onStateChanged = function (opts, that) {\n    if (opts && opts.onStateChanged) {\n        opts.onStateChanged.call(that, that);\n    }\n    else if (this.onStateChanged) {\n        this.onStateChanged.call(that, that);\n    }\n\n    opts = null;\n    that = null;\n    return true;\n};\nconst getContent = function (dialogId, opts) {\n    let data = {\n        dialogId: dialogId,\n        title: (opts.title || this.config.title || \"\"),\n        msg: (opts.msg || this.config.msg || \"\").replace(/\\n/g, \"<br/>\"),\n        input: opts.input,\n        btns: opts.btns,\n        '_crlf': function () {\n            return this.replace(/\\n/g, \"<br/>\");\n        },\n        additionalContent: (function (additionalContent) {\n            if (U.isFunction(additionalContent)) {\n                return additionalContent.call(opts);\n            }\n            else {\n                return additionalContent;\n            }\n        })(opts.additionalContent)\n    };\n\n    return mustache.render(dialogTmpl.call(this), data);\n};\nconst open = function (opts, callback) {\n    let pos = {},\n        box = {\n            width: opts.width\n        };\n    const throttledResize = U.throttle(function (e) {\n        align.call(this, e || window.event);\n    }, 30);\n    jQuery(document.body).append(getContent.call(this, opts.id, opts));\n\n    this.dialogConfig = opts;\n    this.activeDialog = jQuery('#' + opts.id);\n    this.activeDialog.css({width: box.width});\n\n    if(typeof callback === \"undefined\"){\n        callback = opts.callback;\n    }\n\n    // dialog 높이 구하기 - 너비가 정해지면 높이가 변경 될 것.\n    opts.height = box.height = this.activeDialog.height();\n\n    //- position 정렬\n    if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n        pos.top = jQuery(window).height() / 2 - box.height / 2;\n        pos.left = jQuery(window).width() / 2 - box.width / 2;\n    }\n    else {\n        pos.left = opts.position.left || 0;\n        pos.top = opts.position.top || 0;\n    }\n    if (this.config.zIndex) {\n        pos[\"z-index\"] = this.config.zIndex;\n    }\n    this.activeDialog.css(pos);\n\n    // bind button event\n    if (opts.dialogType === \"prompt\") {\n        this.activeDialog.find(\"[data-dialog-prompt]\").get(0).focus();\n    }\n    else {\n        this.activeDialog.find(\"[data-dialog-btn]\").get(0).focus();\n    }\n\n    this.activeDialog.find(\"[data-dialog-btn]\").on(this.config.clickEventName, (function (e) {\n        btnOnClick.call(this, e || window.event, opts, callback);\n    }).bind(this));\n\n    // bind key event\n    jQuery(window).on(\"keydown.ax6dialog\", (function (e) {\n        onKeyup.call(this, e || window.event, opts, callback);\n    }).bind(this));\n    jQuery(window).on(\"resize.ax6dialog\", throttledResize.bind(this));\n\n    onStateChanged.call(this, opts, {\n        self: this,\n        state: \"open\"\n    });\n\n    if (opts.autoCloseTime) {\n        this.autoCloseTimer = setTimeout(() => {\n            this.close();\n        }, opts.autoCloseTime);\n    }\n\n    pos = null;\n    box = null;\n};\nconst align = function (e) {\n    if (!this.activeDialog) return this;\n    let opts = this.dialogConfig,\n        box = {\n            width: opts.width,\n            height: opts.height\n        };\n\n    //- position 정렬\n    if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n        box.top = window.innerHeight / 2 - box.height / 2;\n        box.left = window.innerWidth / 2 - box.width / 2;\n    }\n    else {\n        box.left = opts.position.left || 0;\n        box.top = opts.position.top || 0;\n    }\n    if (box.left < 0) box.left = 0;\n    if (box.top < 0) box.top = 0;\n\n    this.activeDialog.css(box);\n\n    opts = null;\n    box = null;\n\n    return this;\n};\nconst btnOnClick = function (e, opts, callback, target, k) {\n    let that,\n        emptyKey = null;\n\n    if (e.srcElement) e.target = e.srcElement;\n\n    target = U.findParentNode(e.target, function (target) {\n        if (target.getAttribute(\"data-dialog-btn\")) {\n            return true;\n        }\n    });\n\n    if (target) {\n        k = target.getAttribute(\"data-dialog-btn\");\n\n        that = {\n            self: this,\n            key: k, value: opts.btns[k],\n            dialogId: opts.id,\n            btnTarget: target\n        };\n        if (opts.dialogType === \"prompt\") {\n            for (let oi in opts.input) {\n                that[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                if (that[oi] == \"\" || that[oi] == null) {\n                    emptyKey = oi;\n                    break;\n                }\n            }\n        }\n        if (opts.btns[k].onClick) {\n            opts.btns[k].onClick.call(that, that);\n        }\n        else if (opts.dialogType === \"alert\") {\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n        else if (opts.dialogType === \"confirm\") {\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n        else if (opts.dialogType === \"prompt\") {\n            if (k === 'ok') {\n                if (emptyKey) {\n                    this.activeDialog.find('[data-dialog-prompt=\"' + emptyKey + '\"]').get(0).focus();\n                    return false;\n                }\n            }\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n    }\n\n    that = null;\n    opts = null;\n    callback = null;\n    target = null;\n    k = null;\n};\nconst onKeyup = function (e, opts, callback, target, k) {\n    let that,\n        emptyKey = null;\n\n    if (e.keyCode == info.eventKeys.ESC) {\n        this.close();\n    }\n    if (opts.dialogType === \"prompt\") {\n        if (e.keyCode == info.eventKeys.RETURN) {\n            that = {\n                self: this,\n                key: k, value: opts.btns[k],\n                dialogId: opts.id,\n                btnTarget: target\n            };\n\n            for (let oi in opts.input) {\n                that[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                if (that[oi] == \"\" || that[oi] == null) {\n                    emptyKey = oi;\n                    break;\n                }\n            }\n            if (emptyKey) {\n                that = null;\n                emptyKey = null;\n                return false;\n            }\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n    }\n\n    that = null;\n    emptyKey = null;\n    opts = null;\n    callback = null;\n    target = null;\n    k = null;\n};\n\n/**\n * @class\n */\nclass AX6UIDialog extends AX6UICore {\n    /**\n     * @constructor\n     * @param config\n     */\n    constructor(config) {\n        super();\n\n        /**\n         * @member {JSON}\n         * @param config\n         * @param [config.theme='default']\n         * @param [config.width=300]\n         * @param [config.title='']\n         * @param [config.msg='']\n         * @param [config.lang]\n         * @param [config.lang.ok='ok']\n         * @param [config.lang.cancel='cancel']\n         * @param [config.animateTime=150]\n         * @param [config.autoCloseTime=0]\n         * @param [config.onStateChanged]\n         *\n         */\n        this.config = {\n            id: 'ax6-dialog-' + this.instanceId,\n            clickEventName: \"click\",\n            theme: 'default',\n            width: 300,\n            title: 'AX6UIDialog',\n            msg: '',\n            lang: {\n                \"ok\": \"ok\", \"cancel\": \"cancel\"\n            },\n            animateTime: 150,\n            autoCloseTime: 0\n        };\n        jQuery.extend(true, this.config, config);\n\n        // 멤버 변수 초기화\n        this.queue = [];\n        /**\n         * @member {Object}\n         */\n        this.activeDialog = null;\n        /**\n         * @member {Object}\n         */\n        this.autoCloseTimer = null;\n\n        if (typeof config !== \"undefined\") this.init();\n    }\n\n    /**\n     * @method\n     * @param config\n     */\n    init() {\n        this.onStateChanged = this.config.onStateChanged;\n        delete this.config.onStateChanged;\n\n        // init 호출 여부\n        this.initOnce();\n    }\n\n    /**\n     * @method\n     * @return {AX6UIMask}\n     */\n    initOnce() {\n        if (this.initialized) return this;\n        this.initialized = true;\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     * dialog.alert(\"Alert Message\");\n     * dialog.alert({\n     *     title: \"Title\",\n     *     msg: \"Alert Message\"\n     * });\n     * ```\n     */\n    alert(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts);\n        opts.dialogType = \"alert\";\n        opts.theme = (opts.theme || \"\");\n        opts.callback = callback;\n\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     * dialog.confirm({\n     *     title: \"확인\",\n     *     msg: \"확인 또는 취소를 누르세요\"\n     * }, function (res) {\n     *     //console.log(this, a, b);\n     *     if(res.key == \"ok\"){\n     *         console.log(\"OK\");\n     *     }\n     *     else if(res.key == \"cancel\"){\n     *         console.log(\"CANCEL\");\n     *     }\n     * });\n     *\n     * // btns custom\n     * dialog.config({\n     *  title: \"예/아니오\",\n     *  msg: \"당신은 개발자 입니까?\",\n     *  btns: {\n     *      Y: {label: \"예\"},\n     *      N: {label: \"아니오\"}\n     *  }\n     * }, function (res) {\n     *      console.log(res);\n     * });\n     * ```\n     */\n    confirm(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts);\n        opts.dialogType = \"confirm\";\n        opts.theme = (opts.theme || this.config.theme || \"\");\n        opts.callback = callback;\n\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme},\n                cancel: {label: opts.lang[\"cancel\"]}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     *\n     * dialog.prompt({\n     *  title: \"prompt\",\n     *  msg: '다음의 값을 입력하세요.',\n     *  input: {\n     *      data1: {label: \"data1의 라벨\", type: \"password\"},\n     *      data2: {label: \"data2의 라벨\"}\n     *  }\n     * }, function(res){\n     *      console.log(res);\n     * });\n     * ```\n     */\n    prompt(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts);\n\n        opts.dialogType = \"prompt\";\n        opts.theme = (opts.theme || this.config.theme || \"\");\n        opts.callback = callback;\n\n        if (typeof opts.input === \"undefined\") {\n            opts.input = {\n                value: {label: \"\"}\n            };\n        }\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme},\n                cancel: {label: opts.lang[\"cancel\"]}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _option\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * dialog.close();\n     * dialog.close({callback: function(){\n     *\n     * });\n     * ```\n     */\n    close(_option) {\n        let opts, that;\n\n        if (this.activeDialog) {\n            if (this.autoCloseTimer) clearTimeout(this.autoCloseTimer);\n\n            opts = this.dialogConfig;\n\n            this.activeDialog.addClass(\"destroy\");\n            jQuery(window).off(\"keydown.ax6dialog\");\n            jQuery(window).off(\"resize.ax6dialog\");\n\n            setTimeout((function () {\n                if (this.activeDialog) {\n                    this.activeDialog.remove();\n                    this.activeDialog = null;\n                }\n\n                that = {\n                    self: this,\n                    state: \"close\",\n                    dialogId: opts.id\n                };\n\n                if (_option && U.isFunction(_option.callback)) {\n                    _option.callback.call(that, that);\n                } else if (opts.callback && (!_option || !_option.doNotCallback)) {\n                    opts.callback.call(that, that);\n                }\n\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                //console.log(this.queue);\n                if(this.queue && this.queue.length) {\n                    open.call(this, this.queue.shift());\n                }\n\n                opts = null;\n                that = null;\n            }).bind(this), this.config.animateTime);\n        }\n        return this;\n    }\n}\n\nexport default AX6UIDialog;"]}