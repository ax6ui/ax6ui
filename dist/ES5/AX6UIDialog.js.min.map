{"version":3,"sources":["AX6UIDialog.js"],"names":["_jqmin","require","_AX6UICore2","_AX6Util","_AX6Info","_AX6Mustache","dialogTmpl","columnKeys","that","opts","onStateChanged","call","data","dialogId","input","btns","getContent","additionalContent","title","msg","this","config","replace","_crlf","render","_AX6Util2","default","isFunction","open","width","_AX6Mustache2","activeDialog","callback","_this","pos","box","_jqmin2","document","body","append","id","dialogConfig","height","css","position","top","window","left","find","dialogType","zIndex","onKeyup","e","self","event","trigger","on","autoCloseTime","throttle","align","bind","autoCloseTimer","setTimeout","close","k","innerHeight","innerWidth","emptyKey","target","findParentNode","key","btnTarget","getAttribute","doNotCallback","oi","val","onClick","get","focus","keyCode","_AX6Info2","eventKeys","ESC","RETURN","value","AX6UIDialog","_classCallCheck","_this2","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","instanceId","clickEventName","theme","lang","ok","cancel","animateTime","extend","queue","init","initOnce","initialized","tryCount","label","isString","push","_option","clearTimeout","addClass","off","remove","state"],"mappings":"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","file":"AX6UIDialog.js","sourcesContent":["import jQuery from \"jqmin\";\nimport AX6UICore from \"./AX6UICore.js\";\nimport U from \"./AX6Util.js\";\nimport info from \"./AX6Info.js\";\nimport mustache from \"./AX6Mustache.js\";\nimport \"./AX6UIDialog/index.scss\";\n\nconst dialogTmpl = function (columnKeys) {\n    return ` \n<div id=\"{{dialogId}}\" data-dialog-els=\"root\" data-ax6ui-dialog=\"\" class=\"{{theme}}\">\n    <div class=\"ax-dialog-header\" data-dialog-els=\"header\">\n        {{{title}}}\n    </div>\n    <div class=\"ax-dialog-body\" data-dialog-els=\"body\">\n        <div class=\"ax-dialog-msg\">{{{msg}}}</div>\n        \n        {{#input}}\n        <div class=\"ax-dialog-prompt\">\n            {{#@each}}\n            <div class=\"form-group\">\n            {{#@value.label}}\n            <label>{{#_crlf}}{{{.}}}{{/_crlf}}</label>\n            {{/@value.label}}\n            <input type=\"{{@value.type}}\" placeholder=\"{{@value.placeholder}}\" class=\"form-control {{@value.theme}}\" data-dialog-prompt=\"{{@key}}\" style=\"width:100%;\" value=\"{{@value.value}}\" />\n            {{#@value.help}}\n            <p class=\"help-block\">{{#_crlf}}{{.}}{{/_crlf}}</p>\n            {{/@value.help}}\n            </div>\n            {{/@each}}\n        </div>\n        {{/input}}\n        \n        <div class=\"ax-dialog-buttons\" data-dialog-els=\"buttons\">\n            <div class=\"ax-button-wrap\">\n            {{#btns}}\n                {{#@each}}\n                <button type=\"button\" data-dialog-btn=\"{{@key}}\" class=\"btn btn-{{@value.theme}}\">{{@value.label}}</button>\n                {{/@each}}\n            {{/btns}}\n            </div>\n        </div>\n        \n        {{#additionalContent}}\n        <div data-dialog-els=\"additional-content\">{{{.}}}</div>\n        {{/additionalContent}}\n    </div>\n</div>  \n`;\n};\nconst onStateChanged = function (opts, that) {\n    if (opts && opts.onStateChanged) {\n        opts.onStateChanged.call(that, that);\n    }\n    else if (this.onStateChanged) {\n        this.onStateChanged.call(that, that);\n    }\n\n    opts = null;\n    that = null;\n    return true;\n};\nconst getContent = function (dialogId, opts) {\n    let data = {\n        dialogId: dialogId,\n        title: (opts.title || this.config.title || \"\"),\n        msg: (opts.msg || this.config.msg || \"\").replace(/\\n/g, \"<br/>\"),\n        input: opts.input,\n        btns: opts.btns,\n        '_crlf': function () {\n            return this.replace(/\\n/g, \"<br/>\");\n        },\n        additionalContent: (function (additionalContent) {\n            if (U.isFunction(additionalContent)) {\n                return additionalContent.call(opts);\n            }\n            else {\n                return additionalContent;\n            }\n        })(opts.additionalContent)\n    };\n\n    return mustache.render(dialogTmpl.call(this), data);\n};\nconst open = function (opts, callback) {\n    let pos = {},\n        box = {\n            width: opts.width\n        };\n    jQuery(document.body).append(getContent.call(this, opts.id, opts));\n\n    this.dialogConfig = opts;\n    this.activeDialog = jQuery('#' + opts.id);\n    this.activeDialog.css({width: box.width});\n\n    if(typeof callback === \"undefined\"){\n        callback = opts.callback;\n    }\n\n    // dialog 높이 구하기 - 너비가 정해지면 높이가 변경 될 것.\n    opts.height = box.height = this.activeDialog.height();\n\n    //- position 정렬\n    if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n        pos.top = jQuery(window).height() / 2 - box.height / 2;\n        pos.left = jQuery(window).width() / 2 - box.width / 2;\n    }\n    else {\n        pos.left = opts.position.left || 0;\n        pos.top = opts.position.top || 0;\n    }\n    if (this.config.zIndex) {\n        pos[\"z-index\"] = this.config.zIndex;\n    }\n\n    this.activeDialog\n        .css(pos)\n        .on(opts.clickEventName, \"[data-dialog-btn]\", (e) => {\n            btnOnClick.call(this, e || window.event, opts, callback);\n        })\n        .find(opts.dialogType === \"prompt\" ? \"[data-dialog-prompt]\" : \"[data-dialog-btn]\").trigger(\"focus\");\n\n    // bind key event\n    jQuery(window)\n        .on(\"keydown.ax6dialog\", (e) => {\n            onKeyup.call(this, e || window.event, opts, callback);\n        })\n        .on(\"resize.ax6dialog\", U.throttle(function (e) {\n            align.call(this, e || window.event);\n        }, 30).bind(this));\n\n    onStateChanged.call(this, opts, {\n        self: this,\n        state: \"open\"\n    });\n\n    if (opts.autoCloseTime) {\n        this.autoCloseTimer = setTimeout(() => {\n            this.close();\n        }, opts.autoCloseTime);\n    }\n\n    pos = null;\n    box = null;\n};\nconst align = function (e) {\n    if (!this.activeDialog) return this;\n    let opts = this.dialogConfig,\n        box = {\n            width: opts.width,\n            height: opts.height\n        };\n\n    //- position 정렬\n    if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n        box.top = window.innerHeight / 2 - box.height / 2;\n        box.left = window.innerWidth / 2 - box.width / 2;\n    }\n    else {\n        box.left = opts.position.left || 0;\n        box.top = opts.position.top || 0;\n    }\n    if (box.left < 0) box.left = 0;\n    if (box.top < 0) box.top = 0;\n\n    this.activeDialog.css(box);\n\n    opts = null;\n    box = null;\n\n    return this;\n};\nconst btnOnClick = function (e, opts, callback, target, k) {\n    let that,\n        emptyKey = null;\n\n    if (e.srcElement) e.target = e.srcElement;\n\n    target = U.findParentNode(e.target, function (target) {\n        if (target.getAttribute(\"data-dialog-btn\")) {\n            return true;\n        }\n    });\n\n    if (target) {\n        k = target.getAttribute(\"data-dialog-btn\");\n\n        that = {\n            self: this,\n            key: k, value: opts.btns[k],\n            dialogId: opts.id,\n            btnTarget: target\n        };\n        if (opts.dialogType === \"prompt\") {\n            for (let oi in opts.input) {\n                that[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                if (that[oi] == \"\" || that[oi] == null) {\n                    emptyKey = oi;\n                    break;\n                }\n            }\n        }\n        if (opts.btns[k].onClick) {\n            opts.btns[k].onClick.call(that, that);\n        }\n        else if (opts.dialogType === \"alert\") {\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n        else if (opts.dialogType === \"confirm\") {\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n        else if (opts.dialogType === \"prompt\") {\n            if (k === 'ok') {\n                if (emptyKey) {\n                    this.activeDialog.find('[data-dialog-prompt=\"' + emptyKey + '\"]').get(0).focus();\n                    return false;\n                }\n            }\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n    }\n\n    that = null;\n    opts = null;\n    callback = null;\n    target = null;\n    k = null;\n};\nconst onKeyup = function (e, opts, callback, target, k) {\n    let that,\n        emptyKey = null;\n\n    if (e.keyCode == info.eventKeys.ESC) {\n        this.close();\n    }\n    if (opts.dialogType === \"prompt\") {\n        if (e.keyCode == info.eventKeys.RETURN) {\n            that = {\n                self: this,\n                key: k, value: opts.btns[k],\n                dialogId: opts.id,\n                btnTarget: target\n            };\n\n            for (let oi in opts.input) {\n                that[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                if (that[oi] == \"\" || that[oi] == null) {\n                    emptyKey = oi;\n                    break;\n                }\n            }\n            if (emptyKey) {\n                that = null;\n                emptyKey = null;\n                return false;\n            }\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n    }\n\n    that = null;\n    emptyKey = null;\n    opts = null;\n    callback = null;\n    target = null;\n    k = null;\n};\n\n/**\n * @class\n */\nclass AX6UIDialog extends AX6UICore {\n    /**\n     * @constructor\n     * @param config\n     */\n    constructor(config) {\n        super();\n\n        /**\n         * @member {JSON}\n         * @param config\n         * @param [config.theme='default']\n         * @param [config.width=300]\n         * @param [config.title='']\n         * @param [config.msg='']\n         * @param [config.lang]\n         * @param [config.lang.ok='ok']\n         * @param [config.lang.cancel='cancel']\n         * @param [config.animateTime=150]\n         * @param [config.autoCloseTime=0]\n         * @param [config.onStateChanged]\n         *\n         */\n        this.config = {\n            id: 'ax6-dialog-' + this.instanceId,\n            clickEventName: \"click\",\n            theme: 'default',\n            width: 300,\n            title: 'AX6UIDialog',\n            msg: '',\n            lang: {\n                \"ok\": \"ok\", \"cancel\": \"cancel\"\n            },\n            animateTime: 150,\n            autoCloseTime: 0\n        };\n        jQuery.extend(true, this.config, config);\n\n        // 멤버 변수 초기화\n        /**\n         * dialog가 열려있는 상태에서 다시 open이 되면 queue에 보관 하였다가 close후 open\n         * @member {Array}\n         */\n        this.queue = [];\n        /**\n         * @member {Object}\n         */\n        this.activeDialog = null;\n        /**\n         * @member {Object}\n         */\n        this.autoCloseTimer = null;\n\n        this.init();\n    }\n\n    /**\n     * @method\n     * @param config\n     */\n    init() {\n        this.onStateChanged = this.config.onStateChanged;\n        delete this.config.onStateChanged;\n\n        // init 호출 여부\n        this.initOnce();\n    }\n\n    /**\n     * @method\n     */\n    initOnce() {\n        if (this.initialized) return this;\n        this.initialized = true;\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     * dialog.alert(\"Alert Message\");\n     * dialog.alert({\n     *     title: \"Title\",\n     *     msg: \"Alert Message\"\n     * });\n     * ```\n     */\n    alert(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts, {\n            dialogType: \"alert\",\n            callback: callback\n        });\n\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     * dialog.confirm({\n     *     title: \"확인\",\n     *     msg: \"확인 또는 취소를 누르세요\"\n     * }, function (res) {\n     *     //console.log(this, a, b);\n     *     if(res.key == \"ok\"){\n     *         console.log(\"OK\");\n     *     }\n     *     else if(res.key == \"cancel\"){\n     *         console.log(\"CANCEL\");\n     *     }\n     * });\n     *\n     * // btns custom\n     * dialog.config({\n     *  title: \"예/아니오\",\n     *  msg: \"당신은 개발자 입니까?\",\n     *  btns: {\n     *      Y: {label: \"예\"},\n     *      N: {label: \"아니오\"}\n     *  }\n     * }, function (res) {\n     *      console.log(res);\n     * });\n     * ```\n     */\n    confirm(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts, {\n            dialogType: \"confirm\",\n            callback: callback\n        });\n\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme},\n                cancel: {label: opts.lang[\"cancel\"]}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     *\n     * dialog.prompt({\n     *  title: \"prompt\",\n     *  msg: '다음의 값을 입력하세요.',\n     *  input: {\n     *      data1: {label: \"data1의 라벨\", type: \"password\"},\n     *      data2: {label: \"data2의 라벨\"}\n     *  }\n     * }, function(res){\n     *      console.log(res);\n     * });\n     * ```\n     */\n    prompt(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts, {\n            dialogType: \"prompt\",\n            callback: callback\n        });\n\n        if (typeof opts.input === \"undefined\") {\n            opts.input = {\n                value: {label: \"\"}\n            };\n        }\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme},\n                cancel: {label: opts.lang[\"cancel\"]}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _option\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * dialog.close();\n     * dialog.close({callback: function(){\n     *\n     * });\n     * ```\n     */\n    close(_option) {\n        let opts, that;\n\n        if (this.activeDialog) {\n            if (this.autoCloseTimer) clearTimeout(this.autoCloseTimer);\n\n            opts = this.dialogConfig;\n\n            this.activeDialog.addClass(\"destroy\");\n            jQuery(window)\n                .off(\"keydown.ax6dialog\")\n                .off(\"resize.ax6dialog\");\n\n            setTimeout((function () {\n                if (this.activeDialog) {\n                    this.activeDialog.remove();\n                    this.activeDialog = null;\n                }\n\n                that = {\n                    self: this,\n                    state: \"close\",\n                    dialogId: opts.id\n                };\n\n                if (_option && U.isFunction(_option.callback)) {\n                    _option.callback.call(that, that);\n                } else if (opts.callback && (!_option || !_option.doNotCallback)) {\n                    opts.callback.call(that, that);\n                }\n\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                // 열려야 할 큐가 남아 있다면 큐아이템으로 다시 open\n                if(this.queue && this.queue.length) {\n                    open.call(this, this.queue.shift());\n                }\n\n                opts = null;\n                that = null;\n            }).bind(this), this.config.animateTime);\n        }\n        return this;\n    }\n}\n\nexport default AX6UIDialog;"]}