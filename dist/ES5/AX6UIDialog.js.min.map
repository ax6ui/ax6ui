{"version":3,"sources":["AX6UIDialog.js"],"names":["_jqmin","require","_AX6UICore2","_AX6Util","_AX6Info","_AX6Mustache","dialogTmpl","columnKeys","that","opts","onStateChanged","call","data","dialogId","input","btns","getContent","additionalContent","title","msg","this","config","replace","_crlf","render","_AX6Util2","default","isFunction","open","width","align","e","event","document","_this","pos","box","activeDialog","throttledResize","throttle","callback","window","_jqmin2","body","append","id","dialogConfig","height","css","position","top","left","find","dialogType","zIndex","onKeyup","self","state","clickEventName","btnOnClick","autoCloseTime","trigger","on","bind","autoCloseTimer","setTimeout","close","k","innerHeight","innerWidth","emptyKey","target","findParentNode","key","btnTarget","getAttribute","doNotCallback","oi","val","onClick","get","focus","keyCode","_AX6Info2","eventKeys","ESC","RETURN","value","AX6UIDialog","_classCallCheck","_this2","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","instanceId","theme","lang","ok","cancel","animateTime","extend","queue","init","initOnce","initialized","tryCount","label","isString","push","_option","clearTimeout","addClass","off","remove"],"mappings":"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","file":"AX6UIDialog.js","sourcesContent":["import jQuery from \"jqmin\";\nimport AX6UICore from \"./AX6UICore.js\";\nimport U from \"./AX6Util.js\";\nimport info from \"./AX6Info.js\";\nimport mustache from \"./AX6Mustache.js\";\nimport \"./AX6UIDialog/index.scss\";\n\nconst dialogTmpl = function (columnKeys) {\n    return ` \n<div id=\"{{dialogId}}\" data-dialog-els=\"root\" data-ax6ui-dialog=\"\" class=\"{{theme}}\">\n    <div class=\"ax-dialog-header\" data-dialog-els=\"header\">\n        {{{title}}}\n    </div>\n    <div class=\"ax-dialog-body\" data-dialog-els=\"body\">\n        <div class=\"ax-dialog-msg\">{{{msg}}}</div>\n        \n        {{#input}}\n        <div class=\"ax-dialog-prompt\">\n            {{#@each}}\n            <div class=\"form-group\">\n            {{#@value.label}}\n            <label>{{#_crlf}}{{{.}}}{{/_crlf}}</label>\n            {{/@value.label}}\n            <input type=\"{{@value.type}}\" placeholder=\"{{@value.placeholder}}\" class=\"form-control {{@value.theme}}\" data-dialog-prompt=\"{{@key}}\" style=\"width:100%;\" value=\"{{@value.value}}\" />\n            {{#@value.help}}\n            <p class=\"help-block\">{{#_crlf}}{{.}}{{/_crlf}}</p>\n            {{/@value.help}}\n            </div>\n            {{/@each}}\n        </div>\n        {{/input}}\n        \n        <div class=\"ax-dialog-buttons\" data-dialog-els=\"buttons\">\n            <div class=\"ax-button-wrap\">\n            {{#btns}}\n                {{#@each}}\n                <button type=\"button\" data-dialog-btn=\"{{@key}}\" class=\"btn btn-{{@value.theme}}\">{{@value.label}}</button>\n                {{/@each}}\n            {{/btns}}\n            </div>\n        </div>\n        \n        {{#additionalContent}}\n        <div data-dialog-els=\"additional-content\">{{{.}}}</div>\n        {{/additionalContent}}\n    </div>\n</div>  \n`;\n};\nconst onStateChanged = function (opts, that) {\n    if (opts && opts.onStateChanged) {\n        opts.onStateChanged.call(that, that);\n    }\n    else if (this.onStateChanged) {\n        this.onStateChanged.call(that, that);\n    }\n\n    opts = null;\n    that = null;\n    return true;\n};\nconst getContent = function (dialogId, opts) {\n    let data = {\n        dialogId: dialogId,\n        title: (opts.title || this.config.title || \"\"),\n        msg: (opts.msg || this.config.msg || \"\").replace(/\\n/g, \"<br/>\"),\n        input: opts.input,\n        btns: opts.btns,\n        '_crlf': function () {\n            return this.replace(/\\n/g, \"<br/>\");\n        },\n        additionalContent: (function (additionalContent) {\n            if (U.isFunction(additionalContent)) {\n                return additionalContent.call(opts);\n            }\n            else {\n                return additionalContent;\n            }\n        })(opts.additionalContent)\n    };\n\n    return mustache.render(dialogTmpl.call(this), data);\n};\nconst open = function (opts, callback) {\n    let pos = {},\n        box = {\n            width: opts.width\n        };\n    const throttledResize = U.throttle(function (e) {\n        align.call(this, e || window.event);\n    }, 30);\n    jQuery(document.body).append(getContent.call(this, opts.id, opts));\n\n    this.dialogConfig = opts;\n    this.activeDialog = jQuery('#' + opts.id);\n    this.activeDialog.css({width: box.width});\n\n    if(typeof callback === \"undefined\"){\n        callback = opts.callback;\n    }\n\n    // dialog 높이 구하기 - 너비가 정해지면 높이가 변경 될 것.\n    opts.height = box.height = this.activeDialog.height();\n\n    //- position 정렬\n    if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n        pos.top = jQuery(window).height() / 2 - box.height / 2;\n        pos.left = jQuery(window).width() / 2 - box.width / 2;\n    }\n    else {\n        pos.left = opts.position.left || 0;\n        pos.top = opts.position.top || 0;\n    }\n    if (this.config.zIndex) {\n        pos[\"z-index\"] = this.config.zIndex;\n    }\n\n    this.activeDialog\n        .css(pos)\n        .on(opts.clickEventName, \"[data-dialog-btn]\", (e) => {\n            btnOnClick.call(this, e || window.event, opts, callback);\n        })\n        .find(opts.dialogType === \"prompt\" ? \"[data-dialog-prompt]\" : \"[data-dialog-btn]\").trigger(\"focus\");\n\n    // bind key event\n    jQuery(window)\n        .on(\"keydown.ax6dialog\", (e) => {\n            onKeyup.call(this, e || window.event, opts, callback);\n        })\n        .on(\"resize.ax6dialog\", throttledResize.bind(this));\n\n    onStateChanged.call(this, opts, {\n        self: this,\n        state: \"open\"\n    });\n\n    if (opts.autoCloseTime) {\n        this.autoCloseTimer = setTimeout(() => {\n            this.close();\n        }, opts.autoCloseTime);\n    }\n\n    pos = null;\n    box = null;\n};\nconst align = function (e) {\n    if (!this.activeDialog) return this;\n    let opts = this.dialogConfig,\n        box = {\n            width: opts.width,\n            height: opts.height\n        };\n\n    //- position 정렬\n    if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n        box.top = window.innerHeight / 2 - box.height / 2;\n        box.left = window.innerWidth / 2 - box.width / 2;\n    }\n    else {\n        box.left = opts.position.left || 0;\n        box.top = opts.position.top || 0;\n    }\n    if (box.left < 0) box.left = 0;\n    if (box.top < 0) box.top = 0;\n\n    this.activeDialog.css(box);\n\n    opts = null;\n    box = null;\n\n    return this;\n};\nconst btnOnClick = function (e, opts, callback, target, k) {\n    let that,\n        emptyKey = null;\n\n    if (e.srcElement) e.target = e.srcElement;\n\n    target = U.findParentNode(e.target, function (target) {\n        if (target.getAttribute(\"data-dialog-btn\")) {\n            return true;\n        }\n    });\n\n    if (target) {\n        k = target.getAttribute(\"data-dialog-btn\");\n\n        that = {\n            self: this,\n            key: k, value: opts.btns[k],\n            dialogId: opts.id,\n            btnTarget: target\n        };\n        if (opts.dialogType === \"prompt\") {\n            for (let oi in opts.input) {\n                that[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                if (that[oi] == \"\" || that[oi] == null) {\n                    emptyKey = oi;\n                    break;\n                }\n            }\n        }\n        if (opts.btns[k].onClick) {\n            opts.btns[k].onClick.call(that, that);\n        }\n        else if (opts.dialogType === \"alert\") {\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n        else if (opts.dialogType === \"confirm\") {\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n        else if (opts.dialogType === \"prompt\") {\n            if (k === 'ok') {\n                if (emptyKey) {\n                    this.activeDialog.find('[data-dialog-prompt=\"' + emptyKey + '\"]').get(0).focus();\n                    return false;\n                }\n            }\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n    }\n\n    that = null;\n    opts = null;\n    callback = null;\n    target = null;\n    k = null;\n};\nconst onKeyup = function (e, opts, callback, target, k) {\n    let that,\n        emptyKey = null;\n\n    if (e.keyCode == info.eventKeys.ESC) {\n        this.close();\n    }\n    if (opts.dialogType === \"prompt\") {\n        if (e.keyCode == info.eventKeys.RETURN) {\n            that = {\n                self: this,\n                key: k, value: opts.btns[k],\n                dialogId: opts.id,\n                btnTarget: target\n            };\n\n            for (let oi in opts.input) {\n                that[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                if (that[oi] == \"\" || that[oi] == null) {\n                    emptyKey = oi;\n                    break;\n                }\n            }\n            if (emptyKey) {\n                that = null;\n                emptyKey = null;\n                return false;\n            }\n            if (callback) callback.call(that, that);\n            this.close({doNotCallback: true});\n        }\n    }\n\n    that = null;\n    emptyKey = null;\n    opts = null;\n    callback = null;\n    target = null;\n    k = null;\n};\n\n/**\n * @class\n */\nclass AX6UIDialog extends AX6UICore {\n    /**\n     * @constructor\n     * @param config\n     */\n    constructor(config) {\n        super();\n\n        /**\n         * @member {JSON}\n         * @param config\n         * @param [config.theme='default']\n         * @param [config.width=300]\n         * @param [config.title='']\n         * @param [config.msg='']\n         * @param [config.lang]\n         * @param [config.lang.ok='ok']\n         * @param [config.lang.cancel='cancel']\n         * @param [config.animateTime=150]\n         * @param [config.autoCloseTime=0]\n         * @param [config.onStateChanged]\n         *\n         */\n        this.config = {\n            id: 'ax6-dialog-' + this.instanceId,\n            clickEventName: \"click\",\n            theme: 'default',\n            width: 300,\n            title: 'AX6UIDialog',\n            msg: '',\n            lang: {\n                \"ok\": \"ok\", \"cancel\": \"cancel\"\n            },\n            animateTime: 150,\n            autoCloseTime: 0\n        };\n        jQuery.extend(true, this.config, config);\n\n        // 멤버 변수 초기화\n        /**\n         * dialog가 열려있는 상태에서 다시 open이 되면 queue에 보관 하였다가 close후 open\n         * @member {Array}\n         */\n        this.queue = [];\n        /**\n         * @member {Object}\n         */\n        this.activeDialog = null;\n        /**\n         * @member {Object}\n         */\n        this.autoCloseTimer = null;\n\n        this.init();\n    }\n\n    /**\n     * @method\n     * @param config\n     */\n    init() {\n        this.onStateChanged = this.config.onStateChanged;\n        delete this.config.onStateChanged;\n\n        // init 호출 여부\n        this.initOnce();\n    }\n\n    /**\n     * @method\n     * @return {AX6UIMask}\n     */\n    initOnce() {\n        if (this.initialized) return this;\n        this.initialized = true;\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     * dialog.alert(\"Alert Message\");\n     * dialog.alert({\n     *     title: \"Title\",\n     *     msg: \"Alert Message\"\n     * });\n     * ```\n     */\n    alert(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts, {\n            dialogType: \"alert\",\n            callback: callback\n        });\n\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     * dialog.confirm({\n     *     title: \"확인\",\n     *     msg: \"확인 또는 취소를 누르세요\"\n     * }, function (res) {\n     *     //console.log(this, a, b);\n     *     if(res.key == \"ok\"){\n     *         console.log(\"OK\");\n     *     }\n     *     else if(res.key == \"cancel\"){\n     *         console.log(\"CANCEL\");\n     *     }\n     * });\n     *\n     * // btns custom\n     * dialog.config({\n     *  title: \"예/아니오\",\n     *  msg: \"당신은 개발자 입니까?\",\n     *  btns: {\n     *      Y: {label: \"예\"},\n     *      N: {label: \"아니오\"}\n     *  }\n     * }, function (res) {\n     *      console.log(res);\n     * });\n     * ```\n     */\n    confirm(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts, {\n            dialogType: \"confirm\",\n            callback: callback\n        });\n\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme},\n                cancel: {label: opts.lang[\"cancel\"]}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param opts\n     * @param callback\n     * @param tryCount\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * import {Dialog} from \"ax6ui\"\n     *\n     * const dialog = new Dialog();\n     *\n     * dialog.prompt({\n     *  title: \"prompt\",\n     *  msg: '다음의 값을 입력하세요.',\n     *  input: {\n     *      data1: {label: \"data1의 라벨\", type: \"password\"},\n     *      data2: {label: \"data2의 라벨\"}\n     *  }\n     * }, function(res){\n     *      console.log(res);\n     * });\n     * ```\n     */\n    prompt(opts, callback, tryCount) {\n        if (typeof opts === \"undefined\") {\n            opts = {\n                title: this.config.title,\n                msg: \"\"\n            }\n        } else if (U.isString(opts)) {\n            opts = {\n                title: this.config.title,\n                msg: opts\n            }\n        }\n\n        opts = jQuery.extend(true, {}, this.config, opts, {\n            dialogType: \"prompt\",\n            callback: callback\n        });\n\n        if (typeof opts.input === \"undefined\") {\n            opts.input = {\n                value: {label: \"\"}\n            };\n        }\n        if (typeof opts.btns === \"undefined\") {\n            opts.btns = {\n                ok: {label: opts.lang[\"ok\"], theme: opts.theme},\n                cancel: {label: opts.lang[\"cancel\"]}\n            };\n        }\n\n        if (this.activeDialog) {\n            this.queue.push(opts);\n        }else{\n            open.call(this, opts, callback);\n        }\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param _option\n     * @return {AX6UIDialog}\n     * @example\n     * ```js\n     * dialog.close();\n     * dialog.close({callback: function(){\n     *\n     * });\n     * ```\n     */\n    close(_option) {\n        let opts, that;\n\n        if (this.activeDialog) {\n            if (this.autoCloseTimer) clearTimeout(this.autoCloseTimer);\n\n            opts = this.dialogConfig;\n\n            this.activeDialog.addClass(\"destroy\");\n            jQuery(window)\n                .off(\"keydown.ax6dialog\")\n                .off(\"resize.ax6dialog\");\n\n            setTimeout((function () {\n                if (this.activeDialog) {\n                    this.activeDialog.remove();\n                    this.activeDialog = null;\n                }\n\n                that = {\n                    self: this,\n                    state: \"close\",\n                    dialogId: opts.id\n                };\n\n                if (_option && U.isFunction(_option.callback)) {\n                    _option.callback.call(that, that);\n                } else if (opts.callback && (!_option || !_option.doNotCallback)) {\n                    opts.callback.call(that, that);\n                }\n\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                // 열려야 할 큐가 남아 있다면 큐아이템으로 다시 open\n                if(this.queue && this.queue.length) {\n                    open.call(this, this.queue.shift());\n                }\n\n                opts = null;\n                that = null;\n            }).bind(this), this.config.animateTime);\n        }\n        return this;\n    }\n}\n\nexport default AX6UIDialog;"]}