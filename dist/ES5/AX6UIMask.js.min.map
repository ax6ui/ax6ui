{"version":3,"sources":["AX6UIMask.js"],"names":["_jqmin","require","_lodash","_AX6UICore2","_AX6Mustache","onStateChanged","opts","that","call","this","getBodyTmpl","data","columnKeys","_AX6Mustache2","default","render","content","AX6UIMask","maskContent","_this","config","theme","target","_jqmin2","document","body","get","animateTime","extend","status","activeConfig","init","onClick","setBody","initOnce","initialized","options","self","_cfg","_lodash2","merge","$target","maskId","instanceId","$mask","css","templateName","trim","position","left","offset","top","width","outerWidth","height","outerHeight","addClass","on","align","bind","zIndex","e","state","type","_close","remove","window","off","delay","removeClass","setTimeout"],"mappings":"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","file":"AX6UIMask.js","sourcesContent":["import jQuery from \"jqmin\";\nimport _ from \"lodash\";\nimport AX6UICore from \"./AX6UICore\";\nimport mustache from \"./AX6Mustache\";\n\nconst onStateChanged = function (opts, that) {\n    if (opts && opts.onStateChanged) {\n        opts.onStateChanged.call(that, that);\n    }\n    else if (this.onStateChanged) {\n        this.onStateChanged.call(that, that);\n    }\n\n    opts = null;\n    that = null;\n    return true;\n};\nconst getBodyTmpl = function (data, columnKeys) {\n    const defaultMask = function(columnKeys) {\n        return `\n            <div class=\"ax-mask {{theme}}\" id=\"{{maskId}}\">\n                <div class=\"ax-mask-bg\"></div>\n                <div class=\"ax-mask-content\">\n                    <div class=\"ax-mask-body\">\n                    {{{body}}}\n                    </div>\n                </div>\n            </div>\n        `;\n    };\n    return mustache.render(defaultMask.call(this, columnKeys), data);\n};\nconst setBody = function (content) {\n    this.maskContent = content;\n};\n\n/**\n * @class\n */\nclass AX6UIMask extends AX6UICore {\n    /**\n     * @constructor\n     * @param config\n     * @param [config.theme]\n     * @param [config.target]\n     * @param [config.anmateTime]\n     * @param [config.onStateChanged]\n     * @param [config.onClick]\n     * @param [config.content]\n     */\n    constructor(config) {\n        super();\n\n        /**\n         * @member {JSON}\n         * @param config\n         * @param [config.theme]\n         * @param [config.target=document.body]\n         * @param [config.anmateTime=250]\n         * @param [config.onStateChanged]\n         * @param [config.onClick]\n         * @param [config.content]\n         *\n         */\n        this.config = {\n            theme: '',\n            target: jQuery(document.body).get(0),\n            animateTime: 250\n        };\n        jQuery.extend(true, this.config, config);\n\n        // 멤버 변수 초기화\n        /**\n         * @member {String}\n         */\n        this.maskContent = '';\n        /**\n         * @member {String}\n         */\n        this.status = \"off\";\n        /**\n         * @member {JSON}\n         */\n        this.activeConfig = {};\n\n        this.init();\n    }\n\n    /**\n     * @method\n     * @param config\n     * @param [config.theme]\n     * @param [config.target]\n     * @param [config.anmateTime]\n     * @param [config.onStateChanged]\n     * @param [config.onClick]\n     * @param [config.content]\n     */\n    init(){\n        this.onStateChanged = this.config.onStateChanged;\n        delete this.config.onStateChanged;\n        this.onClick = this.config.onClick;\n        delete this.config.onClick;\n\n        setBody.call(this, this.config.content || \"\");\n\n        // init 호출 여부\n        this.initOnce();\n    }\n\n    /**\n     * @method\n     * @return {AX6UIMask}\n     */\n    initOnce(){\n        if(this.initialized) return this;\n        this.initialized = true;\n    }\n\n    /**\n     * @method\n     * @param options\n     * @return {AX6UIMask}\n     */\n    open(options) {\n        let self = this;\n\n        if (this.status === \"on\") this.close();\n        setBody.call(this, (options) ? options.content || \"\" : \"\");\n\n        let _cfg = _.merge({}, this.config, options),\n            target = _cfg.target,\n            $target = jQuery(target),\n            maskId = 'ax-mask-' + this.instanceId,\n            $mask,\n            css = {},\n            that = {},\n            templateName = _cfg.templateName,\n            body = getBodyTmpl({\n                theme: _cfg.theme,\n                maskId: maskId,\n                body: this.maskContent,\n                templateName: templateName\n            }).trim();\n\n        jQuery(document.body).append(body);\n\n        // 마스크의 타겟이 html body 가 아니라면\n        if (target && target !== jQuery(document.body).get(0)) {\n            css = {\n                position: _cfg.position || \"absolute\",\n                left: $target.offset().left,\n                top: $target.offset().top,\n                width: $target.outerWidth(),\n                height: $target.outerHeight()\n            };\n\n            $target.addClass(\"ax-masking\");\n\n            // 마스크의 타겟이 html body가 아닌경우 window resize 이벤트를 추적하여 엘리먼트 마스크의 CSS 속성 변경\n            \n            jQuery(window).on(\"resize.ax5mask-\" + this.instanceId, (function () {\n                this.align();\n            }).bind(this));\n        }\n\n        if (typeof _cfg.zIndex !== \"undefined\") {\n            css[\"z-index\"] = _cfg.zIndex;\n        }\n\n        this.$mask = $mask = jQuery(\"#\" + maskId);\n        this.$target = $target;\n        this.status = \"on\";\n        $mask.css(css);\n\n        if (this.onClick) {\n            $mask.on(\"click\", function (e) {\n                that = {\n                    self: self,\n                    state: \"open\",\n                    type: \"click\"\n                };\n                self.onClick.call(that, that);\n            });\n        }\n\n        onStateChanged.call(this, null, {\n            self: this,\n            state: \"open\"\n        });\n\n        // 현재 활성화된 설정 기억\n        this.activeConfig = _cfg;\n\n        options = null;\n        _cfg = null;\n        target = null;\n        $target = null;\n        maskId = null;\n        $mask = null;\n        css = null;\n        that = null;\n        templateName = null;\n        body = null;\n\n        return this;\n    }\n\n    /**\n     * @method\n     * @param delay\n     * @return {AX6UIMask}\n     */\n    close(delay) {\n        if (this.$mask) {\n\n            let _close = function () {\n                this.status = \"off\";\n                this.$mask.remove();\n                this.$target.removeClass(\"ax-masking\");\n\n                onStateChanged.call(this, null, {\n                    self: this,\n                    state: \"close\"\n                });\n\n                jQuery(window).off(\"resize.ax5mask-\" + this.instanceId);\n            };\n\n            if (delay) {\n                setTimeout((function () {\n                    _close.call(this);\n                }).bind(this), delay);\n            } else {\n                _close.call(this);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @method\n     * @return {AX6UIMask}\n     */\n    fadeOut(){\n        if (this.$mask) {\n            let _close = function () {\n                this.status = \"off\";\n                this.$mask.remove();\n                this.$target.removeClass(\"ax-masking\");\n\n                onStateChanged.call(this, null, {\n                    self: this,\n                    state: \"close\"\n                });\n\n                jQuery(window).off(\"resize.ax5mask-\" + this.instanceId);\n            };\n\n\n            this.$mask.addClass(\"fade-out\");\n            setTimeout((function () {\n                _close.call(this);\n            }).bind(this), this.activeConfig.animateTime);\n        }\n        return this;\n    }\n\n    /**\n     * @method\n     * @return {AX6UIMask}\n     */\n    align(){\n        if (this.$mask && this.activeConfig && this.activeConfig.target && this.activeConfig.target !== jQuery(document.body).get(0)) {\n            try {\n                let css = {\n                    position: this.activeConfig.position || \"absolute\",\n                    left: this.$target.offset().left,\n                    top: this.$target.offset().top,\n                    width: this.$target.outerWidth(),\n                    height: this.$target.outerHeight()\n                };\n                this.$mask.css(css);\n            } catch (e) {\n\n            }\n        }\n        return this;\n    }\n}\n\nexport default AX6UIMask;"]}