{"version":3,"sources":["AX6UIGrid_data.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_page","_AX6UIGrid_util","clearGroupingData","_list","i","l","length","returnList","this","config","columnKeys","selected","selectedDataIndexs","push","_jqmin2","default","extend","initData","appendIndex","dataRealRowCount","grouping","groupingKeys","_AX6Util2","map","bodyGrouping","by","key","compareString","gi","gl","appendRow","ari","deleted","deletedList","lineNumber","appendRowItem","keys","labels","list","ki","__groupingList","__groupingBy","xvar","arrangeData4tree","seq","li","tree","hashDigit","listIndexMap","selfKey","parentKey","children","parentHash","setDigit","selfHash","depth","_parent","_parentHash","hidden","data","page","proxyList","sort","call","sortInfo","frozenRowIndex","undefined","virtualPaintStartRowIndex","_AX6UIGrid_page2","navigationUpdate","getList","getProxyList","needToPaintSum","modified","body","concat","_type","_dindex","_doindex","_value","originalValue","getValue","_key","listIndex","test","Function","_AX6UIGrid_util2","getRealPathForDataItem","e","__origin_index__","dindex","doindex","item","setValue","value","select","_selected","_options","cfg","disableSelection","search","clearSelect","splice","onDataChanged","internalCall","self","selectAll","__isGrouping","filter","add","processor","first","last","use","_row","isNumber","_i","_l","Object","paintStartRowIndex","remove","index","__list","treeKeys","substr","deleteRow","ii","update","updateChild","originIndex","_updateData","_k","_sortInfo","getKeyValue","sortInfoArray","_item","k","order","orderBy","_a_val","resetLineNumber","_b_val","_a","_typeof","append","appendProgress","statusUpdate","appendDebounceTimes","_callback","debounceTime","appendDebouncer","setTimeout","appendIdle","clearTimeout","toggleCollapse","_doindx","_collapse","collapse","init","set","get"],"mappings":"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","file":"AX6UIGrid_data.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"../AX6Util\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport UTIL from \"./AX6UIGrid_util\";\n/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */\n\nconst clearGroupingData = function (_list) {\n  let i = 0, l = _list.length, returnList = [];\n  for (; i < l; i++) {\n    if (_list[i] && !_list[i][\"__isGrouping\"]) {\n      if (_list[i][this.config.columnKeys.selected]) {\n        this.selectedDataIndexs.push(i);\n      }\n      returnList.push(jQuery.extend({}, _list[i]));\n    }\n  }\n  return returnList;\n};\n\nconst initData = function (_list) {\n  this.selectedDataIndexs = [];\n  // this.deletedList = [];\n  // todo : deletedList 초기화 시점이 언제로 하는게 좋은가. set 메소드에서 초기화 하는 것으로 수정\n\n  let i = 0, l = _list.length,\n    returnList = [],\n    appendIndex = 0,\n    dataRealRowCount = 0,\n    lineNumber = 0;\n\n  if (this.config.body.grouping) {\n\n    let groupingKeys = U.map(this.bodyGrouping.by, function () {\n      return {\n        key: this,\n        compareString: \"\",\n        grouping: false,\n        list: []\n      }\n    });\n\n    let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n    for (; i < l + 1; i++) {\n      gi = 0;\n\n      if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n        this.deletedList.push(_list[i]);\n      }\n      else {\n        compareString = \"\"; // 그룹핑 구문검사용\n        appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄\n\n        // 그룹핑 구문검사\n        for (; gi < gl; gi++) {\n          if (_list[i]) {\n            compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n          }\n\n          if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n            let appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n            for (let ki = 0; ki < gi + 1; ki++) {\n              appendRowItem.keys.push(groupingKeys[ki].key);\n              appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n            }\n            appendRow.push(appendRowItem);\n            groupingKeys[gi].list = [];\n          }\n\n          groupingKeys[gi].list.push(_list[i]);\n          groupingKeys[gi].compareString = compareString;\n        }\n\n        // 새로 추가해야할 그룹핑 row\n        ari = appendRow.length;\n        while (ari--) {\n          returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n        }\n        //~ 그룹핑 구문 검사 완료\n\n        if (_list[i]) {\n          if (_list[i][this.config.columnKeys.selected]) {\n            this.selectedDataIndexs.push(i);\n          }\n          // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.\n          _list[i][\"__original_index\"] = _list[i][\"__index\"] = lineNumber;\n          returnList.push(_list[i]);\n\n          dataRealRowCount++;\n          appendIndex++;\n          lineNumber++;\n        }\n      }\n    }\n  }\n  else {\n    for (; i < l; i++) {\n      if (_list[i]) {\n        if (_list[i][this.config.columnKeys.deleted]) {\n          this.deletedList.push(_list[i]);\n        } else {\n\n          if (_list[i][this.config.columnKeys.selected]) {\n            this.selectedDataIndexs.push(i);\n          }\n\n          // __original_index 인덱스 키가 없다면 추가.\n          if (typeof _list[i][\"__original_index\"] === \"undefined\") {\n            _list[i][\"__original_index\"] = lineNumber;\n          }\n          _list[i][\"__index\"] = lineNumber;\n          dataRealRowCount++;\n          lineNumber++;\n          returnList.push(_list[i]);\n        }\n      }\n    }\n  }\n\n  // 원본 데이터의 갯수\n  // grouping은 제외하고 수집됨.\n  this.xvar.dataRealRowCount = dataRealRowCount;\n  return returnList;\n};\n\nconst arrangeData4tree = function (_list) {\n  this.selectedDataIndexs = [];\n  this.deletedList = [];\n  let i = 0, seq = 0,\n    appendIndex = 0,\n    dataRealRowCount = 0,\n    lineNumber = 0;\n\n  let li = _list.length;\n  let keys = this.config.tree.columnKeys;\n  let hashDigit = this.config.tree.hashDigit;\n  let listIndexMap = {};\n\n  while (li--) {\n    delete _list[li][keys.parentHash];\n    delete _list[li][keys.selfHash];\n    //delete _list[li][keys.childrenLength];\n  }\n\n  /// 루트 아이템 수집\n  i = 0;\n  seq = 0;\n  li = _list.length;\n  for (; i < li; i++) {\n    if (_list[i]) {\n      listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\n\n      if (U.isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === \"top\") { // 최상위 아이템인 경우\n        _list[i][keys.parentKey] = \"top\";\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n        _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n        _list[i][keys.depth] = 0;\n        _list[i][keys.hidden] = false;\n\n        seq++;\n      }\n    }\n  }\n\n  /// 자식 아이템 수집\n  i = 0;\n  lineNumber = 0;\n  for (; i < li; i++) {\n    let _parent, _parentHash;\n    if (_list[i] && _list[i][keys.parentKey] !== \"top\" && typeof _list[i][keys.parentHash] === \"undefined\") {\n\n      if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\n        _parentHash = _parent[keys.selfHash];\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = _parentHash;\n        _list[i][keys.selfHash] = _parentHash + \".\" + U.setDigit(_parent[keys.children].length, hashDigit);\n        _list[i][keys.depth] = _parent[keys.depth] + 1;\n        if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\n        _parent[keys.children].push(_list[i][keys.selfKey]);\n      } else {\n        _list[i][keys.parentKey] = \"top\";\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n        _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n        _list[i][keys.hidden] = false;\n\n        seq++;\n      }\n    }\n\n    if (_list[i]) {\n      if (_list[i][this.config.columnKeys.deleted]) {\n        this.deletedList.push(_list[i]);\n        _list[i][keys.hidden] = true;\n      }\n      else if (_list[i][this.config.columnKeys.selected]) {\n        this.selectedDataIndexs.push(i);\n      }\n\n      _list[i][\"__index\"] = lineNumber;\n      dataRealRowCount++;\n      lineNumber++;\n    }\n  }\n\n  this.listIndexMap = listIndexMap;\n  this.xvar.dataRealRowCount = dataRealRowCount;\n\n  return _list;\n};\n\nconst set = function (data) {\n  let list;\n  if (U.isArray(data)) {\n    this.page = null;\n    list = data;\n  } else if (\"page\" in data) {\n    this.page = jQuery.extend({}, data.page);\n    list = data.list;\n  }\n\n  // console.log(this.list.length);\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  } else {\n    this.proxyList = null;\n    this.list = initData.call(this,\n      (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, list) : list\n    );\n  }\n  this.selectedDataIndexs = [];\n  this.deletedList = [];\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n\n  if (this.config.body.grouping) {\n\n  }\n  return this;\n};\n\nconst get = function () {\n  return {\n    list: this.list,\n    page: this.page\n  };\n};\n\nconst getList = function (_type) {\n  let returnList = [];\n  //let list = (this.proxyList) ? this.proxyList : this.list;\n  let list = this.list;\n  let i = 0, l = list.length;\n  switch (_type) {\n    case \"modified\":\n      for (; i < l; i++) {\n        if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.modified]) {\n          returnList.push(jQuery.extend({}, list[i]));\n        }\n      }\n      break;\n    case \"selected\":\n      for (; i < l; i++) {\n        if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.selected]) {\n          returnList.push(jQuery.extend({}, list[i]));\n        }\n      }\n      break;\n    case \"deleted\":\n      //_list = clearGroupingData(this.list);\n      returnList = [].concat(this.deletedList);\n      break;\n    default:\n      returnList = clearGroupingData.call(this, list);\n  }\n  return returnList;\n};\n\nconst getProxyList = function (_list) {\n  let i = 0, l = _list.length, returnList = [];\n  for (; i < l; i++) {\n\n    if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {\n      _list[i].__origin_index__ = i;\n      returnList.push(_list[i]);\n    }\n  }\n  return returnList;\n};\n\nconst setValue = function (_dindex, _doindex, _key, _value) {\n  let originalValue = getValue.call(this, _dindex, _doindex, _key);\n  let list = this.list;\n  let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n  this.needToPaintSum = true;\n\n  if (originalValue !== _value) {\n    if (/[\\.\\[\\]]/.test(_key)) {\n      try {\n        list[listIndex][this.config.columnKeys.modified] = true;\n        (Function(\"val\", \"this\" + UTIL.getRealPathForDataItem(_key) + \" = val;\")).call(list[listIndex], _value);\n      }\n      catch (e) {\n\n      }\n    } else {\n      list[listIndex][this.config.columnKeys.modified] = true;\n      list[listIndex][_key] = _value;\n    }\n\n    if (this.onDataChanged) {\n      this.onDataChanged.call({\n        self: this,\n        list: this.list,\n        dindex: _dindex,\n        doindex: _doindex,\n        item: this.list[_dindex],\n        key: _key,\n        value: _value\n      });\n    }\n  }\n\n  return true;\n};\n\nconst getValue = function (_dindex, _doindex, _key, _value) {\n  let list = this.list;\n  let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n\n  if (/[\\.\\[\\]]/.test(_key)) {\n    try {\n      _value = (Function(\"\", \"return this\" + UTIL.getRealPathForDataItem(_key) + \";\")).call(list[listIndex]);\n    }\n    catch (e) {\n\n    }\n  } else {\n    _value = list[listIndex][_key];\n  }\n  return _value;\n};\n\nconst clearSelect = function () {\n  this.selectedDataIndexs = [];\n};\n\nconst select = function (_dindex, _doindex, _selected, _options) {\n  let cfg = this.config;\n\n  if (typeof _doindex === \"undefined\") _doindex = _dindex;\n\n  if (!this.list[_doindex]) return false;\n  if (this.list[_doindex].__isGrouping) return false;\n  if (this.list[_doindex][cfg.columnKeys.disableSelection]) return false;\n\n  if (typeof _selected === \"undefined\") {\n    if (this.list[_doindex][cfg.columnKeys.selected] = !this.list[_doindex][cfg.columnKeys.selected]) {\n      this.selectedDataIndexs.push(_doindex);\n    } else {\n      this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n        return this == _doindex;\n      }), 1);\n    }\n  } else {\n    if (this.list[_doindex][cfg.columnKeys.selected] = _selected) {\n      this.selectedDataIndexs.push(_doindex);\n    } else {\n      this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n        return this == _doindex;\n      }), 1);\n    }\n  }\n\n  if (this.onDataChanged && _options && _options.internalCall) {\n    this.onDataChanged.call({\n      self: this,\n      list: this.list,\n      dindex: _dindex,\n      doindex: _doindex,\n      item: this.list[_doindex],\n      key: cfg.columnKeys.selected,\n      value: this.list[_doindex][cfg.columnKeys.selected]\n    });\n  }\n\n  return this.list[_doindex][cfg.columnKeys.selected];\n};\n\nconst selectAll = function (_selected, _options) {\n  let cfg = this.config,\n      dindex = this.list.length;\n\n  this.selectedDataIndexs = [];\n\n  if (typeof _selected === \"undefined\") {\n    while (dindex--) {\n      if (this.list[dindex].__isGrouping) continue;\n      if (_options && _options.filter) {\n        if (_options.filter.call(this.list[dindex]) !== true) {\n          continue;\n        }\n      }\n      if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n      if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n        this.selectedDataIndexs.push(dindex);\n      }\n    }\n  } else {\n    while (dindex--) {\n      if (this.list[dindex].__isGrouping) continue;\n      if (_options && _options.filter) {\n        if (_options.filter.call(this.list[dindex]) !== true) {\n          continue;\n        }\n      }\n      if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n      if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n        this.selectedDataIndexs.push(dindex);\n      }\n    }\n  }\n\n  if (this.onDataChanged && _options && _options.internalCall) {\n    this.onDataChanged.call({\n      self: this,\n      list: this.list\n    });\n  }\n\n  return this.list;\n};\n\nconst add = function (_row, _dindex, _options) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\"() {\n      list = [].concat(_row).concat(list);\n    },\n    \"last\"() {\n      list = list.concat([].concat(_row));\n    }\n  };\n\n  if (this.config.tree.use) {\n    let list = this.list.concat([].concat(_row));\n\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (typeof _dindex === \"undefined\") _dindex = \"last\";\n    if (_dindex in processor) {\n      _row[this.config.columnKeys.modified] = true;\n      processor[_dindex].call(this, _row);\n    } else {\n      if (!U.isNumber(_dindex)) {\n        throw 'invalid argument _dindex';\n      }\n      if (U.isArray(_row)) {\n        for (let _i = 0, _l = _row.length; _i < _l; _i++) {\n          list.splice(_dindex + _i, 0, _row[_i]);\n        }\n      } else {\n        list.splice(_dindex, 0, _row);\n      }\n    }\n\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    }\n    else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    }\n    else {\n      list = initData.call(this, list);\n    }\n\n    this.list = list;\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\nconst remove = function (_dindex) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, 0);\n      } else {\n        list.splice(0, 1);\n      }\n    },\n    \"last\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, list.length - 1);\n      } else {\n        list.splice(list.length - 1, 1);\n      }\n    },\n    \"index\": function (_dindex) {\n      if (this.config.tree.use) {\n        processor.tree.call(this, _dindex);\n      } else {\n        list.splice(_dindex, 1);\n      }\n    },\n    \"selected\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, \"selected\");\n      } else {\n        let __list = [], i, l;\n\n        for (i = 0, l = list.length; i < l; i++) {\n          if (!list[i][this.config.columnKeys.selected]) {\n            __list.push(list[i]);\n          }\n        }\n        list = __list;\n        __list = null;\n        i = null;\n      }\n    },\n    \"tree\": function (_dindex) {\n      let treeKeys = this.config.tree.columnKeys, selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];\n      list = U.filter(list, function () {\n        return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;\n      });\n      treeKeys = null;\n      selfHash = null;\n    },\n  };\n\n  if (typeof _dindex === \"undefined\") _dindex = \"last\";\n  if (_dindex in processor) {\n    processor[_dindex].call(this, _dindex);\n  } else {\n    if (!U.isNumber(_dindex)) {\n      throw 'invalid argument _dindex';\n    }\n    processor[\"index\"].call(this, _dindex);\n  }\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else if (Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else {\n      list = initData.call(this, list);\n    }\n    this.list = list;\n  }\n\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\nconst deleteRow = function (_dindex) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, 0);\n      } else {\n        list[0][this.config.columnKeys.deleted] = true;\n      }\n    },\n    \"last\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, list.length - 1);\n      } else {\n        list[list.length - 1][this.config.columnKeys.deleted] = true;\n      }\n    },\n    \"selected\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, \"selected\");\n      } else {\n        let i = list.length;\n        while (i--) {\n          if (list[i][this.config.columnKeys.selected]) {\n            list[i][this.config.columnKeys.deleted] = true;\n          }\n        }\n        i = null;\n      }\n    },\n    \"tree\": function (_dindex) {\n      let keys = this.config.columnKeys,\n        treeKeys = this.config.tree.columnKeys;\n\n      if (_dindex === \"selected\") {\n\n        let i = list.length;\n        while (i--) {\n          if (list[i][this.config.columnKeys.selected]) {\n            list[i][this.config.columnKeys.deleted] = true;\n\n            let selfHash = list[i][treeKeys.selfHash];\n            let ii = list.length;\n\n            while (ii--) {\n              if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {\n                list[ii][keys.deleted] = true;\n              }\n            }\n\n            selfHash = null;\n            ii = null;\n          }\n        }\n        i = null;\n\n      } else {\n        let selfHash = list[_dindex][treeKeys.selfHash];\n        let i = list.length;\n        while (i--) {\n          if (list[i][treeKeys.selfHash].substr(0, selfHash.length) !== selfHash) {\n            list[i][keys.deleted] = true;\n          }\n        }\n        selfHash = null;\n        i = null;\n      }\n\n      keys = null;\n      treeKeys = null;\n    },\n  };\n\n  if (typeof _dindex === \"undefined\") _dindex = \"last\";\n\n  if (_dindex in processor) {\n    processor[_dindex].call(this, _dindex);\n  } else {\n    if (!U.isNumber(_dindex)) {\n      throw 'invalid argument _dindex';\n    }\n    list[_dindex][this.config.columnKeys.deleted] = true;\n  }\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else if (Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else {\n      list = initData.call(this, list);\n    }\n\n    this.list = list;\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\nconst update = function (_row, _dindex) {\n  if (!U.isNumber(_dindex)) {\n    throw 'invalid argument _dindex';\n  }\n  //\n  this.needToPaintSum = true;\n  this.list.splice(_dindex, 1, _row);\n\n  if (this.config.body.grouping) {\n    this.list = initData.call(this, clearGroupingData.call(this, this.list));\n  }\n};\n\nconst updateChild = function (_dindex, _updateData, _options) {\n  let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n  if (typeof _dindex === \"undefined\") return false;\n  originIndex = this.proxyList[_dindex].__origin_index__;\n\n  if (this.list[originIndex][keys.children]) {\n    this.proxyList = []; // 리셋 프록시\n\n    if (_options && _options.filter) {\n      if (_options.filter.call({item: this.list[originIndex], dindex: originIndex}, this.list[originIndex])) {\n        for (let _k in _updateData) {\n          this.list[originIndex][_k] = _updateData[_k];\n        }\n      }\n    }\n    else {\n      for (let _k in _updateData) {\n        this.list[originIndex][_k] = _updateData[_k];\n      }\n    }\n\n    selfHash = this.list[originIndex][keys.selfHash];\n\n    let i = 0, l = this.list.length;\n    for (; i < l; i++) {\n      if (this.list[i]) {\n        if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n\n          if (_options && _options.filter) {\n            if (_options.filter.call({item: this.list[i], dindex: i}, this.list[i])) {\n              for (let _k in _updateData) {\n                this.list[i][_k] = _updateData[_k];\n              }\n            }\n          }\n          else {\n            for (let _k in _updateData) {\n              this.list[i][_k] = _updateData[_k];\n            }\n          }\n        }\n\n        if (!this.list[i][keys.hidden]) {\n          this.proxyList.push(this.list[i]);\n        }\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst sort = function (_sortInfo, _list, _options) {\n  let self = this, list = _list || this.list, sortInfoArray = [], lineNumber = 0;\n  let getKeyValue = function (_item, _key, _value) {\n    if (/[\\.\\[\\]]/.test(_key)) {\n      try {\n        _value = (Function(\"\", \"return this\" + UTIL.getRealPathForDataItem(_key) + \";\")).call(_item);\n      }\n      catch (e) {\n      }\n    } else {\n      _value = _item[_key];\n    }\n    return _value;\n  };\n\n  for (let k in _sortInfo) {\n    sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n  }\n  sortInfoArray = U.filter(sortInfoArray, function () {\n    return typeof this !== \"undefined\";\n  });\n\n  // 정렬조건이 없으면 original_index값을 이용하여 정렬처리\n  if (_options && _options.resetLineNumber && sortInfoArray.length === 0) {\n    sortInfoArray[0] = {key: '__original_index', order: \"asc\"}\n  }\n\n  let i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n  list.sort(function (_a, _b) {\n    for (i = 0; i < l; i++) {\n      _a_val = getKeyValue(_a, sortInfoArray[i].key);\n      _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n      if (typeof _a_val !== typeof _b_val) {\n        _a_val = '' + _a_val;\n        _b_val = '' + _b_val;\n      }\n      if (_a_val < _b_val) {\n        return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n      } else if (_a_val > _b_val) {\n        return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n      }\n    }\n  });\n\n  if (_options && _options.resetLineNumber) {\n    i = 0, l = list.length, lineNumber = 0;\n    for (; i < l; i++) {\n      if (_list[i] && !_list[i][\"__isGrouping\"]) {\n        _list[i][\"__index\"] = lineNumber++;\n      }\n    }\n  }\n\n  if (_list) {\n    return list;\n  } else {\n    this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    PAGE.navigationUpdate.call(this);\n    return this;\n  }\n};\n\nconst append = function (_list, _callback) {\n  let self = this;\n\n  if (this.config.tree.use) {\n    let list = this.list.concat([].concat(_list));\n\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n    list = null;\n  } else {\n    this.list = this.list.concat([].concat(_list));\n  }\n\n  this.appendProgress = true;\n  PAGE.statusUpdate.call(this);\n\n  if (this.appendDebouncer) {\n    if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n      clearTimeout(this.appendDebouncer);\n      self.appendDebounceTimes++;\n    } else {\n      self.appendDebounceTimes = 0;\n      appendIdle.call(self);\n      _callback();\n      return false;\n    }\n  }\n\n  this.appendDebouncer = setTimeout(function () {\n    self.appendDebounceTimes = 0;\n    appendIdle.call(self);\n    _callback();\n  }, this.config.debounceTime);\n\n  // todo : append bounce animation\n};\n\nconst appendIdle = function () {\n  this.appendProgress = false;\n  if (this.config.body.grouping) {\n    this.list = initData.call(this,\n      sort.call(this,\n        this.sortInfo,\n        this.list\n      )\n    );\n  } else {\n    this.list = initData.call(this, this.list);\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n};\n\nconst toggleCollapse = function (_dindex, _doindx, _collapse) {\n  let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n  if (typeof _dindex === \"undefined\") return false;\n  originIndex = this.proxyList[_dindex].__origin_index__;\n\n  if (this.list[originIndex][keys.children]) {\n    this.proxyList = []; // 리셋 프록시\n    if (typeof _collapse == \"undefined\") {\n      _collapse = !(this.list[originIndex][keys.collapse] || false);\n    }\n\n    this.list[originIndex][keys.collapse] = _collapse;\n    selfHash = this.list[originIndex][keys.selfHash];\n\n    let i = this.list.length;\n    while (i--) {\n      if (this.list[i]) {\n        // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);\n        if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n          this.list[i][keys.hidden] = _collapse;\n        }\n\n        if (!this.list[i][keys.hidden]) {\n          this.proxyList.push(this.list[i]);\n        }\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * @module AX6UIGrid_data\n */\nexport default {\n  init: function () {\n\n  },\n  /**\n   * @param data\n   * @return {module:AX6UIGrid_data}\n   */\n  set: set,\n  /**\n   * @return {*}\n   */\n  get: get,\n  /**\n   * @param {String} _type - modified|selected|deleted\n   * @return {Array}\n   */\n  getList: getList,\n  /**\n   * @param {Array}\n   * @return {Array}\n   */\n  getProxyList: getProxyList,\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   * @param _key\n   * @param _value\n   * @return {boolean}\n   */\n  setValue: setValue,\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   * @param _key\n   * @param _value\n   * @return {*}\n   */\n  getValue: getValue,\n  /**\n   *\n   */\n  clearSelect: clearSelect,\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   * @param _selected\n   * @param _options\n   * @return {boolean}\n   */\n  select: select,\n  /**\n   *\n   * @param _selected\n   * @param _options\n   */\n  selectAll: selectAll,\n  /**\n   *\n   * @param _row\n   * @param _dindex\n   * @param _options\n   * @return {add}\n   */\n  add: add,\n  /**\n   * list에서 완전 제거 하는 경우 사용.\n   * @param _dindex\n   * @return {remove}\n   */\n  remove: remove,\n  /**\n   * list에서 deleted 처리 repaint\n   * @param _dindex\n   * @return {deleteRow}\n   */\n  deleteRow: deleteRow,\n  /**\n   *\n   * @param _row\n   * @param _dindex\n   */\n  update: update,\n  /**\n   *\n   * @param _dindex\n   * @param _updateData\n   * @param _options\n   * @return {boolean}\n   */\n  updateChild: updateChild,\n  /**\n   *\n   * @param _sortInfo\n   * @param _list\n   * @param _options\n   * @return {*}\n   */\n  sort: sort,\n  /**\n   *\n   * @param _list\n   * @return {Array}\n   */\n  initData: initData,\n  /**\n   *\n   * @param _list\n   * @return {Array}\n   */\n  clearGroupingData: clearGroupingData,\n  /**\n   *\n   * @param _list\n   * @param _callback\n   * @return {boolean}\n   */\n  append: append,\n  /**\n   *\n   * @param _dindex\n   * @param _doindx\n   * @param _collapse\n   * @return {boolean}\n   */\n  toggleCollapse: toggleCollapse\n};"]}