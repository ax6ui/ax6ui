{"version":3,"sources":["AX6UIGrid_data.js"],"names":["_jqmin","require","_AX6Util","_AX6UIGrid_page","_AX6UIGrid_util","clearGroupingData","_list","i","l","length","returnList","this","config","columnKeys","selected","selectedDataIndexs","push","_jqmin2","default","extend","initData","appendIndex","dataRealRowCount","grouping","groupingKeys","_AX6Util2","map","bodyGrouping","by","key","compareString","gi","gl","appendRow","ari","deleted","deletedList","lineNumber","appendRowItem","keys","labels","list","ki","__groupingList","__groupingBy","xvar","arrangeData4tree","seq","li","hashDigit","tree","listIndexMap","parentHash","selfHash","selfKey","parentKey","children","setDigit","hidden","_parent","_parentHash","depth","collapse","set","data","page","use","call","sort","sortInfo","proxyList","remoteSort","Object","needToPaintSum","frozenRowIndex","virtualPaintStartRowIndex","undefined","_AX6UIGrid_page2","navigationUpdate","body","get","getList","_type","modified","concat","setValue","_dindex","_doindex","_key","_value","originalValue","getValue","listIndex","test","Function","_AX6UIGrid_util2","getRealPathForDataItem","e","getProxyList","onDataChanged","__origin_index__","doindex","item","value","select","_selected","_options","cfg","disableSelection","splice","search","self","dindex","selectAll","__isGrouping","filter","internalCall","add","processor","first","_row","last","isNumber","_i","_l","paintStartRowIndex","remove","index","__list","treeKeys","deleteRow","ii","substr","update","originIndex","updateChild","_updateData","_k","sortInfoArray","getKeyValue","_sortInfo","_item","k","order","orderBy","resetLineNumber","_b_val","_a_val","_b","_typeof","append","_callback","appendProgress","clearTimeout","appendDebouncer","appendDebounceTimes","appendIdle","debounceTime","setTimeout","toggleCollapse","_collapse","_doindx","init","clearSelect"],"mappings":"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","file":"AX6UIGrid_data.js","sourcesContent":["import jQuery from \"jqmin\";\nimport U from \"../AX6Util\";\nimport PAGE from \"./AX6UIGrid_page\";\nimport UTIL from \"./AX6UIGrid_util\";\n/* ~~~~~~~~~~~~~~~~~~ end of import  ~~~~~~~~~~~~~~~~~~~~ */\n\nconst clearGroupingData = function (_list) {\n  let i = 0, l = _list.length, returnList = [];\n  for (; i < l; i++) {\n    if (_list[i] && !_list[i][\"__isGrouping\"]) {\n      if (_list[i][this.config.columnKeys.selected]) {\n        this.selectedDataIndexs.push(i);\n      }\n      returnList.push(jQuery.extend({}, _list[i]));\n    }\n  }\n  return returnList;\n};\n\nconst initData = function (_list) {\n  this.selectedDataIndexs = [];\n  // this.deletedList = [];\n  // todo : deletedList 초기화 시점이 언제로 하는게 좋은가. set 메소드에서 초기화 하는 것으로 수정\n\n  let i                = 0, l = _list.length,\n      returnList       = [],\n      appendIndex      = 0,\n      dataRealRowCount = 0,\n      lineNumber       = 0;\n\n  if (this.config.body.grouping) {\n\n    let groupingKeys = U.map(this.bodyGrouping.by, function () {\n      return {\n        key: this,\n        compareString: \"\",\n        grouping: false,\n        list: []\n      }\n    });\n\n    let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n    for (; i < l + 1; i++) {\n      gi = 0;\n\n      if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n        this.deletedList.push(_list[i]);\n      }\n      else {\n        compareString = \"\"; // 그룹핑 구문검사용\n        appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄\n\n        // 그룹핑 구문검사\n        for (; gi < gl; gi++) {\n          if (_list[i]) {\n            compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n          }\n\n          if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n            let appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n            for (let ki = 0; ki < gi + 1; ki++) {\n              appendRowItem.keys.push(groupingKeys[ki].key);\n              appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n            }\n            appendRow.push(appendRowItem);\n            groupingKeys[gi].list = [];\n          }\n\n          groupingKeys[gi].list.push(_list[i]);\n          groupingKeys[gi].compareString = compareString;\n        }\n\n        // 새로 추가해야할 그룹핑 row\n        ari = appendRow.length;\n        while (ari--) {\n          returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n        }\n        //~ 그룹핑 구문 검사 완료\n\n        if (_list[i]) {\n          if (_list[i][this.config.columnKeys.selected]) {\n            this.selectedDataIndexs.push(i);\n          }\n          // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.\n          _list[i][\"__original_index\"] = _list[i][\"__index\"] = lineNumber;\n          returnList.push(_list[i]);\n\n          dataRealRowCount++;\n          appendIndex++;\n          lineNumber++;\n        }\n      }\n    }\n  }\n  else {\n    for (; i < l; i++) {\n      if (_list[i]) {\n        if (_list[i][this.config.columnKeys.deleted]) {\n          this.deletedList.push(_list[i]);\n        } else {\n\n          if (_list[i][this.config.columnKeys.selected]) {\n            this.selectedDataIndexs.push(i);\n          }\n\n          // __original_index 인덱스 키가 없다면 추가.\n          if (typeof _list[i][\"__original_index\"] === \"undefined\") {\n            _list[i][\"__original_index\"] = lineNumber;\n          }\n          _list[i][\"__index\"] = lineNumber;\n          dataRealRowCount++;\n          lineNumber++;\n          returnList.push(_list[i]);\n        }\n      }\n    }\n  }\n\n  // 원본 데이터의 갯수\n  // grouping은 제외하고 수집됨.\n  this.xvar.dataRealRowCount = dataRealRowCount;\n  return returnList;\n};\n\nconst arrangeData4tree = function (_list) {\n  this.selectedDataIndexs = [];\n  this.deletedList = [];\n  let i = 0, seq = 0, dataRealRowCount = 0, lineNumber = 0;\n  let li = _list.length;\n  let keys = this.config.tree.columnKeys;\n  let hashDigit = this.config.tree.hashDigit;\n  let listIndexMap = {};\n\n  while (li--) {\n    delete _list[li][keys.parentHash];\n    delete _list[li][keys.selfHash];\n    //delete _list[li][keys.childrenLength];\n  }\n\n  /// 루트 아이템 수집\n  i = 0;\n  seq = 0;\n  li = _list.length;\n  for (; i < li; i++) {\n    if (_list[i]) {\n      listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\n\n      if (U.isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === \"top\") { // 최상위 아이템인 경우\n        _list[i][keys.parentKey] = \"top\";\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n        _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n        _list[i][keys.depth] = 0;\n        _list[i][keys.hidden] = false;\n\n        seq++;\n      }\n    }\n  }\n\n  /// 자식 아이템 수집\n  i = 0;\n  lineNumber = 0;\n  for (; i < li; i++) {\n    let _parent, _parentHash;\n    if (_list[i] && _list[i][keys.parentKey] !== \"top\" && typeof _list[i][keys.parentHash] === \"undefined\") {\n\n      if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\n        _parentHash = _parent[keys.selfHash];\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = _parentHash;\n        _list[i][keys.selfHash] = _parentHash + \".\" + U.setDigit(_parent[keys.children].length, hashDigit);\n        _list[i][keys.depth] = _parent[keys.depth] + 1;\n        if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\n        _parent[keys.children].push(_list[i][keys.selfKey]);\n      } else {\n        _list[i][keys.parentKey] = \"top\";\n        _list[i][keys.children] = [];\n        _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n        _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n        _list[i][keys.hidden] = false;\n\n        seq++;\n      }\n    }\n\n    if (_list[i]) {\n      if (_list[i][this.config.columnKeys.deleted]) {\n        this.deletedList.push(_list[i]);\n        _list[i][keys.hidden] = true;\n      }\n      else if (_list[i][this.config.columnKeys.selected]) {\n        this.selectedDataIndexs.push(i);\n      }\n\n      _list[i][\"__index\"] = lineNumber;\n      dataRealRowCount++;\n      lineNumber++;\n    }\n  }\n\n  this.listIndexMap = listIndexMap;\n  this.xvar.dataRealRowCount = dataRealRowCount;\n\n  return _list;\n};\n\nconst set = function (data) {\n  let list;\n  if (U.isArray(data)) {\n    this.page = null;\n    list = data;\n  } else if (\"page\" in data) {\n    this.page = jQuery.extend({}, data.page);\n    list = data.list;\n  }\n\n  // console.log(this.list.length);\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  } else {\n    this.proxyList = null;\n    this.list = initData.call(this,\n      (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, list) : list\n    );\n  }\n  this.selectedDataIndexs = [];\n  this.deletedList = [];\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n\n  if (this.config.body.grouping) {\n\n  }\n  return this;\n};\n\nconst get = function () {\n  return {\n    list: this.list,\n    page: this.page\n  };\n};\n\nconst getList = function (_type) {\n  let returnList = [];\n  //let list = (this.proxyList) ? this.proxyList : this.list;\n  let list = this.list;\n  let i = 0, l = list.length;\n  switch (_type) {\n    case \"modified\":\n      for (; i < l; i++) {\n        if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.modified]) {\n          returnList.push(jQuery.extend({}, list[i]));\n        }\n      }\n      break;\n    case \"selected\":\n      for (; i < l; i++) {\n        if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.selected]) {\n          returnList.push(jQuery.extend({}, list[i]));\n        }\n      }\n      break;\n    case \"deleted\":\n      //_list = clearGroupingData(this.list);\n      returnList = [].concat(this.deletedList);\n      break;\n    default:\n      returnList = clearGroupingData.call(this, list);\n  }\n  return returnList;\n};\n\nconst getProxyList = function (_list) {\n  let i = 0, l = _list.length, returnList = [];\n  for (; i < l; i++) {\n\n    if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {\n      _list[i].__origin_index__ = i;\n      returnList.push(_list[i]);\n    }\n  }\n  return returnList;\n};\n\nconst setValue = function (_dindex, _doindex, _key, _value) {\n  let originalValue = getValue.call(this, _dindex, _doindex, _key);\n  let list = this.list;\n  let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n  this.needToPaintSum = true;\n\n  if (originalValue !== _value) {\n    if (/[\\.\\[\\]]/.test(_key)) {\n      try {\n        list[listIndex][this.config.columnKeys.modified] = true;\n        (Function(\"val\", \"this\" + UTIL.getRealPathForDataItem(_key) + \" = val;\")).call(list[listIndex], _value);\n      }\n      catch (e) {\n\n      }\n    } else {\n      list[listIndex][this.config.columnKeys.modified] = true;\n      list[listIndex][_key] = _value;\n    }\n\n    if (this.onDataChanged) {\n      this.onDataChanged.call({\n        self: this,\n        list: this.list,\n        dindex: _dindex,\n        doindex: _doindex,\n        item: this.list[_dindex],\n        key: _key,\n        value: _value\n      });\n    }\n  }\n\n  return true;\n};\n\nconst getValue = function (_dindex, _doindex, _key, _value) {\n  let list = this.list;\n  let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n\n  if (/[\\.\\[\\]]/.test(_key)) {\n    try {\n      _value = (Function(\"\", \"return this\" + UTIL.getRealPathForDataItem(_key) + \";\")).call(list[listIndex]);\n    }\n    catch (e) {\n\n    }\n  } else {\n    _value = list[listIndex][_key];\n  }\n  return _value;\n};\n\nconst clearSelect = function () {\n  this.selectedDataIndexs = [];\n};\n\nconst select = function (_dindex, _doindex, _selected, _options) {\n  let cfg = this.config;\n\n  if (typeof _doindex === \"undefined\") _doindex = _dindex;\n\n  if (!this.list[_doindex]) return false;\n  if (this.list[_doindex].__isGrouping) return false;\n  if (this.list[_doindex][cfg.columnKeys.disableSelection]) return false;\n\n  if (typeof _selected === \"undefined\") {\n    if (this.list[_doindex][cfg.columnKeys.selected] = !this.list[_doindex][cfg.columnKeys.selected]) {\n      this.selectedDataIndexs.push(_doindex);\n    } else {\n      this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n        return this == _doindex;\n      }), 1);\n    }\n  } else {\n    if (this.list[_doindex][cfg.columnKeys.selected] = _selected) {\n      this.selectedDataIndexs.push(_doindex);\n    } else {\n      this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n        return this == _doindex;\n      }), 1);\n    }\n  }\n\n  if (this.onDataChanged && _options && _options.internalCall) {\n    this.onDataChanged.call({\n      self: this,\n      list: this.list,\n      dindex: _dindex,\n      doindex: _doindex,\n      item: this.list[_doindex],\n      key: cfg.columnKeys.selected,\n      value: this.list[_doindex][cfg.columnKeys.selected]\n    });\n  }\n\n  return this.list[_doindex][cfg.columnKeys.selected];\n};\n\nconst selectAll = function (_selected, _options) {\n  let cfg    = this.config,\n      dindex = this.list.length;\n\n  this.selectedDataIndexs = [];\n\n  if (typeof _selected === \"undefined\") {\n    while (dindex--) {\n      if (this.list[dindex].__isGrouping) continue;\n      if (_options && _options.filter) {\n        if (_options.filter.call(this.list[dindex]) !== true) {\n          continue;\n        }\n      }\n      if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n      if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n        this.selectedDataIndexs.push(dindex);\n      }\n    }\n  } else {\n    while (dindex--) {\n      if (this.list[dindex].__isGrouping) continue;\n      if (_options && _options.filter) {\n        if (_options.filter.call(this.list[dindex]) !== true) {\n          continue;\n        }\n      }\n      if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n      if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n        this.selectedDataIndexs.push(dindex);\n      }\n    }\n  }\n\n  if (this.onDataChanged && _options && _options.internalCall) {\n    this.onDataChanged.call({\n      self: this,\n      list: this.list\n    });\n  }\n\n  return this.list;\n};\n\nconst add = function (_row, _dindex, _options) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\"() {\n      list = [].concat(_row).concat(list);\n    },\n    \"last\"() {\n      list = list.concat([].concat(_row));\n    }\n  };\n\n  if (this.config.tree.use) {\n    let list = this.list.concat([].concat(_row));\n\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (typeof _dindex === \"undefined\") _dindex = \"last\";\n    if (_dindex in processor) {\n      _row[this.config.columnKeys.modified] = true;\n      processor[_dindex].call(this, _row);\n    } else {\n      if (!U.isNumber(_dindex)) {\n        throw 'invalid argument _dindex';\n      }\n      if (U.isArray(_row)) {\n        for (let _i = 0, _l = _row.length; _i < _l; _i++) {\n          list.splice(_dindex + _i, 0, _row[_i]);\n        }\n      } else {\n        list.splice(_dindex, 0, _row);\n      }\n    }\n\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    }\n    else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    }\n    else {\n      list = initData.call(this, list);\n    }\n\n    this.list = list;\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\nconst remove = function (_dindex) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, 0);\n      } else {\n        list.splice(0, 1);\n      }\n    },\n    \"last\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, list.length - 1);\n      } else {\n        list.splice(list.length - 1, 1);\n      }\n    },\n    \"index\": function (_dindex) {\n      if (this.config.tree.use) {\n        processor.tree.call(this, _dindex);\n      } else {\n        list.splice(_dindex, 1);\n      }\n    },\n    \"selected\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, \"selected\");\n      } else {\n        let __list = [], i, l;\n\n        for (i = 0, l = list.length; i < l; i++) {\n          if (!list[i][this.config.columnKeys.selected]) {\n            __list.push(list[i]);\n          }\n        }\n        list = __list;\n        __list = null;\n        i = null;\n      }\n    },\n    \"tree\": function (_dindex) {\n      let treeKeys = this.config.tree.columnKeys, selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];\n      list = U.filter(list, function () {\n        return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;\n      });\n      treeKeys = null;\n      selfHash = null;\n    },\n  };\n\n  if (typeof _dindex === \"undefined\") _dindex = \"last\";\n  if (_dindex in processor) {\n    processor[_dindex].call(this, _dindex);\n  } else {\n    if (!U.isNumber(_dindex)) {\n      throw 'invalid argument _dindex';\n    }\n    processor[\"index\"].call(this, _dindex);\n  }\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else if (Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else {\n      list = initData.call(this, list);\n    }\n    this.list = list;\n  }\n\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\nconst deleteRow = function (_dindex) {\n  let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n  let processor = {\n    \"first\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, 0);\n      } else {\n        list[0][this.config.columnKeys.deleted] = true;\n      }\n    },\n    \"last\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, list.length - 1);\n      } else {\n        list[list.length - 1][this.config.columnKeys.deleted] = true;\n      }\n    },\n    \"selected\": function () {\n      if (this.config.tree.use) {\n        processor.tree.call(this, \"selected\");\n      } else {\n        let i = list.length;\n        while (i--) {\n          if (list[i][this.config.columnKeys.selected]) {\n            list[i][this.config.columnKeys.deleted] = true;\n          }\n        }\n        i = null;\n      }\n    },\n    \"tree\": function (_dindex) {\n      let keys     = this.config.columnKeys,\n          treeKeys = this.config.tree.columnKeys;\n\n      if (_dindex === \"selected\") {\n\n        let i = list.length;\n        while (i--) {\n          if (list[i][this.config.columnKeys.selected]) {\n            list[i][this.config.columnKeys.deleted] = true;\n\n            let selfHash = list[i][treeKeys.selfHash];\n            let ii = list.length;\n\n            while (ii--) {\n              if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {\n                list[ii][keys.deleted] = true;\n              }\n            }\n\n            selfHash = null;\n            ii = null;\n          }\n        }\n        i = null;\n\n      } else {\n        let selfHash = list[_dindex][treeKeys.selfHash];\n        let i = list.length;\n        while (i--) {\n          if (list[i][treeKeys.selfHash].substr(0, selfHash.length) !== selfHash) {\n            list[i][keys.deleted] = true;\n          }\n        }\n        selfHash = null;\n        i = null;\n      }\n\n      keys = null;\n      treeKeys = null;\n    },\n  };\n\n  if (typeof _dindex === \"undefined\") _dindex = \"last\";\n\n  if (_dindex in processor) {\n    processor[_dindex].call(this, _dindex);\n  } else {\n    if (!U.isNumber(_dindex)) {\n      throw 'invalid argument _dindex';\n    }\n    list[_dindex][this.config.columnKeys.deleted] = true;\n  }\n\n  if (this.config.tree.use) {\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n  }\n  else {\n    if (this.config.body.grouping) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else if (Object.keys(this.sortInfo).length) {\n      list = initData.call(this,\n        sort.call(this,\n          this.sortInfo,\n          list\n        )\n      );\n    } else {\n      list = initData.call(this, list);\n    }\n\n    this.list = list;\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n  return this;\n};\n\nconst update = function (_row, _dindex) {\n  if (!U.isNumber(_dindex)) {\n    throw 'invalid argument _dindex';\n  }\n  //\n  this.needToPaintSum = true;\n  this.list.splice(_dindex, 1, _row);\n\n  if (this.config.body.grouping) {\n    this.list = initData.call(this, clearGroupingData.call(this, this.list));\n  }\n};\n\nconst updateChild = function (_dindex, _updateData, _options) {\n  let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n  if (typeof _dindex === \"undefined\") return false;\n  originIndex = this.proxyList[_dindex].__origin_index__;\n\n  if (this.list[originIndex][keys.children]) {\n    this.proxyList = []; // 리셋 프록시\n\n    if (_options && _options.filter) {\n      if (_options.filter.call({item: this.list[originIndex], dindex: originIndex}, this.list[originIndex])) {\n        for (let _k in _updateData) {\n          this.list[originIndex][_k] = _updateData[_k];\n        }\n      }\n    }\n    else {\n      for (let _k in _updateData) {\n        this.list[originIndex][_k] = _updateData[_k];\n      }\n    }\n\n    selfHash = this.list[originIndex][keys.selfHash];\n\n    let i = 0, l = this.list.length;\n    for (; i < l; i++) {\n      if (this.list[i]) {\n        if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n\n          if (_options && _options.filter) {\n            if (_options.filter.call({item: this.list[i], dindex: i}, this.list[i])) {\n              for (let _k in _updateData) {\n                this.list[i][_k] = _updateData[_k];\n              }\n            }\n          }\n          else {\n            for (let _k in _updateData) {\n              this.list[i][_k] = _updateData[_k];\n            }\n          }\n        }\n\n        if (!this.list[i][keys.hidden]) {\n          this.proxyList.push(this.list[i]);\n        }\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst sort = function (_sortInfo, _list, _options) {\n  let self = this, list = _list || this.list, sortInfoArray = [], lineNumber = 0;\n  let getKeyValue = function (_item, _key, _value) {\n    if (/[\\.\\[\\]]/.test(_key)) {\n      try {\n        _value = (Function(\"\", \"return this\" + UTIL.getRealPathForDataItem(_key) + \";\")).call(_item);\n      }\n      catch (e) {\n      }\n    } else {\n      _value = _item[_key];\n    }\n    return _value;\n  };\n\n  for (let k in _sortInfo) {\n    sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n  }\n  sortInfoArray = U.filter(sortInfoArray, function () {\n    return typeof this !== \"undefined\";\n  });\n\n  // 정렬조건이 없으면 original_index값을 이용하여 정렬처리\n  if (_options && _options.resetLineNumber && sortInfoArray.length === 0) {\n    sortInfoArray[0] = {key: '__original_index', order: \"asc\"}\n  }\n\n  let i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n  list.sort(function (_a, _b) {\n    for (i = 0; i < l; i++) {\n      _a_val = getKeyValue(_a, sortInfoArray[i].key);\n      _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n      if (typeof _a_val !== typeof _b_val) {\n        _a_val = '' + _a_val;\n        _b_val = '' + _b_val;\n      }\n      if (_a_val < _b_val) {\n        return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n      } else if (_a_val > _b_val) {\n        return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n      }\n    }\n  });\n\n  if (_options && _options.resetLineNumber) {\n    i = 0, l = list.length, lineNumber = 0;\n    for (; i < l; i++) {\n      if (_list[i] && !_list[i][\"__isGrouping\"]) {\n        _list[i][\"__index\"] = lineNumber++;\n      }\n    }\n  }\n\n  if (_list) {\n    return list;\n  } else {\n    this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n    this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n    PAGE.navigationUpdate.call(this);\n    return this;\n  }\n};\n\nconst append = function (_list, _callback) {\n  let self = this;\n\n  if (this.config.tree.use) {\n    let list = this.list.concat([].concat(_list));\n\n    this.list = arrangeData4tree.call(this, list);\n    this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n    list = null;\n  } else {\n    this.list = this.list.concat([].concat(_list));\n  }\n\n  this.appendProgress = true;\n  PAGE.statusUpdate.call(this);\n\n  if (this.appendDebouncer) {\n    if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n      clearTimeout(this.appendDebouncer);\n      self.appendDebounceTimes++;\n    } else {\n      self.appendDebounceTimes = 0;\n      appendIdle.call(self);\n      _callback();\n      return false;\n    }\n  }\n\n  this.appendDebouncer = setTimeout(function () {\n    self.appendDebounceTimes = 0;\n    appendIdle.call(self);\n    _callback();\n  }, this.config.debounceTime);\n\n  // todo : append bounce animation\n};\n\nconst appendIdle = function () {\n  this.appendProgress = false;\n  if (this.config.body.grouping) {\n    this.list = initData.call(this,\n      sort.call(this,\n        this.sortInfo,\n        this.list\n      )\n    );\n  } else {\n    this.list = initData.call(this, this.list);\n  }\n\n  this.needToPaintSum = true;\n  this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n  this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n  PAGE.navigationUpdate.call(this);\n};\n\nconst toggleCollapse = function (_dindex, _doindx, _collapse) {\n  let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n  if (typeof _dindex === \"undefined\") return false;\n  originIndex = this.proxyList[_dindex].__origin_index__;\n\n  if (this.list[originIndex][keys.children]) {\n    this.proxyList = []; // 리셋 프록시\n    if (typeof _collapse == \"undefined\") {\n      _collapse = !(this.list[originIndex][keys.collapse] || false);\n    }\n\n    this.list[originIndex][keys.collapse] = _collapse;\n    selfHash = this.list[originIndex][keys.selfHash];\n\n    let i = this.list.length;\n    while (i--) {\n      if (this.list[i]) {\n        // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);\n        if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n          this.list[i][keys.hidden] = _collapse;\n        }\n\n        if (!this.list[i][keys.hidden]) {\n          this.proxyList.push(this.list[i]);\n        }\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * @module AX6UIGrid_data\n */\nexport default {\n  init: function () {\n\n  },\n  /**\n   * @param data\n   * @return {module:AX6UIGrid_data}\n   */\n  set: set,\n  /**\n   * @return {*}\n   */\n  get: get,\n  /**\n   * @param {String} _type - modified|selected|deleted\n   * @return {Array}\n   */\n  getList: getList,\n  /**\n   * @param {Array}\n   * @return {Array}\n   */\n  getProxyList: getProxyList,\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   * @param _key\n   * @param _value\n   * @return {boolean}\n   */\n  setValue: setValue,\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   * @param _key\n   * @param _value\n   * @return {*}\n   */\n  getValue: getValue,\n  /**\n   *\n   */\n  clearSelect: clearSelect,\n  /**\n   *\n   * @param _dindex\n   * @param _doindex\n   * @param _selected\n   * @param _options\n   * @return {boolean}\n   */\n  select: select,\n  /**\n   *\n   * @param _selected\n   * @param _options\n   */\n  selectAll: selectAll,\n  /**\n   *\n   * @param _row\n   * @param _dindex\n   * @param _options\n   * @return {add}\n   */\n  add: add,\n  /**\n   * list에서 완전 제거 하는 경우 사용.\n   * @param _dindex\n   * @return {remove}\n   */\n  remove: remove,\n  /**\n   * list에서 deleted 처리 repaint\n   * @param _dindex\n   * @return {deleteRow}\n   */\n  deleteRow: deleteRow,\n  /**\n   *\n   * @param _row\n   * @param _dindex\n   */\n  update: update,\n  /**\n   *\n   * @param _dindex\n   * @param _updateData\n   * @param _options\n   * @return {boolean}\n   */\n  updateChild: updateChild,\n  /**\n   *\n   * @param _sortInfo\n   * @param _list\n   * @param _options\n   * @return {*}\n   */\n  sort: sort,\n  /**\n   *\n   * @param _list\n   * @return {Array}\n   */\n  initData: initData,\n  /**\n   *\n   * @param _list\n   * @return {Array}\n   */\n  clearGroupingData: clearGroupingData,\n  /**\n   *\n   * @param _list\n   * @param _callback\n   * @return {boolean}\n   */\n  append: append,\n  /**\n   *\n   * @param _dindex\n   * @param _doindx\n   * @param _collapse\n   * @return {boolean}\n   */\n  toggleCollapse: toggleCollapse\n};"]}